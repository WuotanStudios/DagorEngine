include "dagi_albedo_scene_common.dshl"
include "project_light_point.dshl"
include "project_base_albedo.dshl"
include "heightmap_common.dshl"

macro PROJECT_WORLD_SDF(code)
  DAGI_WRITE_VOXEL_LIT_SCENE_INIT(code)
  DAGI_WRITE_VOXEL_LIT_SCENE_WRITE(code)
  INIT_WORLD_HEIGHTMAP_BASE(code)
  USE_HEIGHTMAP_COMMON_BASE(code)
  hlsl(code) {
    float get_project_world_sdf(float3 worldPos, float maxDist) {
      ##if tex_hmap_low != NULL
      float2 tc = saturate(calcTcLow(worldPos.xz));
      float2 worldPosXZClamped = hmapTcToWorldXZ(tc);
      float distToHmap = length(worldPosXZClamped - worldPos.xz);
      float height = decode_height(getHeightLowLod(tc, 0));
      return distToHmap + max(worldPos.y-height, -0.99*maxDist);
      ##else
      return 1e3;
      ##endif
    }
  }
endmacro

macro PROJECT_WORLD_SDF_CLEAR(code)
  PROJECT_HMAP_ALBEDO(code)
  DAGI_ALBEDO_SAMPLE(code)

  PROJECT_LIGHT_POINT_VOXELIZE(code)//currently no dynamic lights!
  hlsl(code) {
    #define PROJECT_SDF_HAS_RADIANCE PROJECT_DAGI_HMAP_ALBEDO
    void get_project_world_sdf_radiance(float3 worldPos, inout float3 radiance, inout float alpha) {
      #if PROJECT_DAGI_HMAP_ALBEDO
      radiance = project_get_lit_color_at_voxelize(worldPos, getNormalLod(calcTcLow(worldPos.xz), 0), getProjectAlbedoAt(worldPos));
      alpha = 32./256;
      #endif
    }
    void project_world_sdf_clear(int3 world_sdf_coord, int sdf_clip, float3 radiance = 0, float alpha = 0)
    {
      //fixme: if multiple is 1/N we clear too much (each voxel N*N times)
      dagi_lit_scene_voxels_clear(world_sdf_coord + 0.5, sdf_clip, radiance, alpha);
    }
  }
endmacro
include "dagi_lit_scene_voxels_rasterizer.dshl"
