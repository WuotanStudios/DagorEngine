include "shader_global.dshl"

int bvh_process_target_offset;
int bvh_process_dynrend_indices_start;
int bvh_process_dynrend_indices_start_aligned;
int bvh_process_dynrend_indices_count;
int bvh_process_dynrend_indices_vertex_base;
int bvh_process_dynrend_indices_size;

interval bvh_process_dynrend_indices_size: two < 4, four;

interval bvh_process_dynrend_indices_start_aligned: no < 1, yes;

int bvh_process_dynrend_indices_source_const_no = 6;
int bvh_process_dynrend_indices_output_uav_no = 0;

shader bvh_process_dynrend_indices
{
  if (compatibility_mode == compatibility_mode_on)
  {
    dont_render;
  }
  (cs) {
    target_offset@u1 = bvh_process_target_offset;
    start_index@i1 = bvh_process_dynrend_indices_start;
    vertex_base@i1 = bvh_process_dynrend_indices_vertex_base;
    item_count@i1 = bvh_process_dynrend_indices_count;
    source@buf : register(bvh_process_dynrend_indices_source_const_no) hlsl { ByteAddressBuffer source@buf; };
    output@uav : register(bvh_process_dynrend_indices_output_uav_no) hlsl { RWByteAddressBuffer output@uav; };
  }

  ENABLE_ASSERT(cs)
  hlsl(cs) {
    [numthreads( 64, 1, 1 )]
    void bvh_process_dynrend_indices(uint3 dtId : SV_DispatchThreadID)
    {
      uint indexId = dtId.x;
      if (indexId >= item_count)
        return;

      ##if bvh_process_dynrend_indices_size == four
        uint index = loadBuffer(source, (start_index + indexId) * 4);
        storeBuffer(output, target_offset + indexId * 4, index - vertex_base);
      ##else
        int address = start_index * 2 + indexId * 4;
        ##if bvh_process_dynrend_indices_start_aligned == yes
          // Dword aligned
          uint packedIndex = loadBuffer(source, address);
          uint2 indices = uint2(packedIndex & 0xFFFF, packedIndex >> 16);
        ##else
          // In the middle of a dword
          uint2 packedIndex = loadBuffer2(source, address - 2);
          uint2 indices = uint2(packedIndex.x >> 16, packedIndex.y & 0xFFFF);
        ##endif

        indices -= vertex_base;
        uint index = indices.x | (indices.y << 16);
        storeBuffer(output, target_offset + indexId * 4, index);
      ##endif
    }
  }

  compile("target_cs", "bvh_process_dynrend_indices");
}
