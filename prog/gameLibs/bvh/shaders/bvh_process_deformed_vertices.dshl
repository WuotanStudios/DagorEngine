include "shader_global.dshl"
include "dyn_deform_inc.dshl"

int bvh_process_target_offset;
int bvh_process_deformed_vertices_start;
int bvh_process_deformed_vertices_stride;
int bvh_process_deformed_vertices_count;
int bvh_process_deformed_vertices_processed_stride;
int bvh_process_deformed_vertices_position_offset;
int bvh_process_deformed_vertices_normal_offset;
int bvh_process_deformed_vertices_color_offset;
int bvh_process_deformed_vertices_texcoord_offset;
int bvh_process_deformed_vertices_texcoord_size;
int4 bvh_process_deformed_vertices_params;

float4 bvh_process_deformed_vertices_pos_mul;
float4 bvh_process_deformed_vertices_pos_ofs;

float4x4 bvh_process_deformed_vertices_wtm;
float4x4 bvh_process_deformed_vertices_itm;

interval bvh_process_deformed_vertices_texcoord_size: zero < 1, four < 8, eight;
interval bvh_process_deformed_vertices_normal_offset: no < 1, yes;
interval bvh_process_deformed_vertices_color_offset : no < 1, yes;

int bvh_process_deformed_vertices_source_const_no = 6;
int bvh_process_deformed_vertices_output_uav_no = 0;

shader bvh_process_deformed_vertices
{
  if (compatibility_mode == compatibility_mode_on)
  {
    dont_render;
  }
  (cs) {
    target_offset@u1 = bvh_process_target_offset;
    start_vertex@i1 = bvh_process_deformed_vertices_start;
    vertex_stride@i1 = bvh_process_deformed_vertices_stride;
    vertex_count@i1 = bvh_process_deformed_vertices_count;
    processed_vertex_stride@i1 = bvh_process_deformed_vertices_processed_stride;
    position_offset@i1 = bvh_process_deformed_vertices_position_offset;
    color_offset@i1 = bvh_process_deformed_vertices_color_offset;
    normal_offset@i1 = bvh_process_deformed_vertices_normal_offset;
    texcoord_offset@i1 = bvh_process_deformed_vertices_texcoord_offset;
    texcoord_size@i1 = bvh_process_deformed_vertices_texcoord_size;
    pos_mul@f4 = bvh_process_deformed_vertices_pos_mul;
    pos_ofs@f4 = bvh_process_deformed_vertices_pos_ofs;
    wtm@f44 = bvh_process_deformed_vertices_wtm;
    itm@f44 = bvh_process_deformed_vertices_itm;
    bvh_process_deformed_vertices_params@i4 = bvh_process_deformed_vertices_params;
    source@buf : register(bvh_process_deformed_vertices_source_const_no) hlsl { ByteAddressBuffer source@buf; };
    output@uav : register(bvh_process_deformed_vertices_output_uav_no) hlsl { RWByteAddressBuffer output@uav; };
  }

  ENABLE_ASSERT(cs)
  USE_DYNAMIC_DEFORM_COMMON(cs)
  hlsl(cs) {
    #pragma wave32

    [numthreads( 32, 1, 1 )]
    void bvh_process_deformed_vertices(uint3 dtId : SV_DispatchThreadID)
    {
      uint vertexId = dtId.x;
      if (vertexId >= vertex_count)
        return;

      int vertexStart = (start_vertex + vertexId) * vertex_stride;

      const uint3 POS_ENCODING_OFFSET = uint3(16, 0, 16);
      uint2 packedPos = loadBuffer2(source, vertexStart + position_offset);
      int3 posI = asint(packedPos.xxy << POS_ENCODING_OFFSET) >> 16;
      float3 modelPos = (posI / 32767.0) * pos_mul.xyz + pos_ofs.xyz;

      uint offset = 12;

      const uint4 INPUT_ENCODING_OFFSET = uint4(16, 8, 0, 24);

      uint packedColor = loadBuffer(source, vertexStart + color_offset);
      float4 inputColor = float4((packedColor >> INPUT_ENCODING_OFFSET) & 255) / 255;

      float deform_k = 0;
      float desc_id = asfloat(bvh_process_deformed_vertices_params.x); // will be converted asuint in dyn deform func
      float max_height = asfloat(bvh_process_deformed_vertices_params.y);
      float springback = asfloat(bvh_process_deformed_vertices_params.z);
      modelPos = dynamic_deform_hmap_common(modelPos, inputColor, desc_id.xxxx, max_height, springback, deform_k);
      storeBuffer3(output, target_offset + vertexId * processed_vertex_stride, asuint(modelPos));

      ##if bvh_process_deformed_vertices_texcoord_size == four
        storeBuffer(output, target_offset + vertexId * processed_vertex_stride + offset, loadBuffer(source, vertexStart + texcoord_offset));
        offset += 4;
      ##elif bvh_process_deformed_vertices_texcoord_size == eight
        storeBuffer2(output, target_offset + vertexId * processed_vertex_stride + offset, loadBuffer2(source, vertexStart + texcoord_offset));
        offset += 8;
      ##endif

      ##if bvh_process_deformed_vertices_normal_offset == yes
        storeBuffer(output, target_offset + vertexId * processed_vertex_stride + offset, loadBuffer(source, vertexStart + normal_offset));
        offset += 4;
      ##endif

      ##if bvh_process_deformed_vertices_color_offset == yes
        storeBuffer(output, target_offset + vertexId * processed_vertex_stride + offset, loadBuffer(source, vertexStart + color_offset));
        offset += 4;
      ##endif
    }
  }

  compile("target_cs", "bvh_process_deformed_vertices");
}
