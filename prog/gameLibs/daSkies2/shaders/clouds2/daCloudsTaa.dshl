include "sky_shader_global.dshl"
include "viewVecVS.dshl"
include "distanceToClouds2.dshl"
include "clouds_tiled_dist.dshl"
include "clouds_close_layer_outside.dshl"

float4 globtm_no_ofs_psf_0;
float4 globtm_no_ofs_psf_1;
float4 globtm_no_ofs_psf_2;
float4 globtm_no_ofs_psf_3;

float4 prev_globtm_no_ofs_psf_0;
float4 prev_globtm_no_ofs_psf_1;
float4 prev_globtm_no_ofs_psf_2;
float4 prev_globtm_no_ofs_psf_3;

texture clouds_color_prev;
texture clouds_alpha_prev;

float4 prev_view_vecLT;
float4 prev_view_vecRT;
float4 prev_view_vecLB;
float4 prev_view_vecRB;
float4 move_world_view_pos;

int4 clouds2_resolution;
float4 clouds2_dispatch_groups;

texture clouds_color;
texture clouds_depth;
texture clouds_depth_gbuf;
texture clouds_prev_depth_gbuf;
texture clouds_prev_taa_weight;
//when we know invalidate History event had appeared (i.e. offscreen pixel or history was significantly clamped),
//we should increase newFrame weight in next frame (if history sampled is not really historically averaged)
//basically, assume we render jittered pixels in simple sequence 0..7..1..6..2..5..3..4 with 8 animated frames
//whole average should be 3.5, and it is also true for any paired 2 frame.
//let's assume event has happened at frame 0, and pixel became invalid (but then camera is still)
//with a taa weight of 0.93 we will get
//0 .. 0+7*0.07=0.49 .. 0.749*0.7+0.07 = ~0.9, etc, so in fr
//so, instead of getting to 3.5 in two or at least 8 frames it will take _a lot_ of frames to get there.
//in eight frames we will got just ((((((7*0.07)*0.93+1*0.07)*0.93+6*0.07)*0.93+2*0.07)*0.93+5*0.07)*0.93+3*0.07)*0.93+4*0.07 = 1.57053019994101 less than half from 3.5!
//and even in 16 frames we will got to just ~2.449.
// it will take 32 frames to get to 3.21, and 56 frames to get to 3.5.
// it is ~1 second in 60fps!

//which will look as ghosting of moire pattern (depending on which hit we got, 0 or 7, we will get dark or bright pixels)

//but if we know event has happened x frames ago, we use new weight as max(0.07, 1/(1+framesSinceEvent))
//so, let's check what we got now
//first is again, 0(value)|0(frame_since_event_minus_1)
//then 0+7*0.5 = 3.5|1 .. 3.5*2/3 + 1*1/3 = 2.666|2 .. 2.666*3/4 + 6*1/4 = 3.4999|3 .. 3.4999*4/5 + 2*1/5=3.1992|4 .. 3.1992*5/6+5*1/6 =3.499333|5 .. 3.499333*6/7 + 3*1/7 = 3.42|6

//as you can see, it fully converges in expected 8 frames, but additionally it produces fully correct result each second frame already!
//although it is very noise input

float clouds_restart_taa;
float clouds_taa_min_new_frame_weight = 0.0;

macro CLOUDS_TAA(code)
  (code) {
    //move_world_view_pos@f3 = move_world_view_pos;
    move_world_view_pos_tolerance@f1 = (sqrt(move_world_view_pos.x*move_world_view_pos.x + move_world_view_pos.y*move_world_view_pos.y + move_world_view_pos.z*move_world_view_pos.z),0,0,0);
    prev_view_vecLT@f3 = prev_view_vecLT;
    prev_view_vecRT_minus_view_vecLT@f3 = (prev_view_vecRT-prev_view_vecLT);
    prev_view_vecLB_minus_view_vecLT@f3 = (prev_view_vecLB-prev_view_vecLT);
    clouds_prev_taa_weight@smp2d = clouds_prev_taa_weight;
  }
  hlsl(code) {
    float3 getPrevViewVecOptimized(float2 tc) {return prev_view_vecLT + prev_view_vecRT_minus_view_vecLT*tc.x + prev_view_vecLB_minus_view_vecLT*tc.y;}
  }
  (code) {
    clouds_color@smp2d = clouds_color;
    clouds_depth@smp2d = clouds_depth;
    clouds_prev_depth_gbuf@smp2d = clouds_prev_depth_gbuf;
    clouds_depth_gbuf@smp2d = clouds_depth_gbuf;

    clouds_color_prev@smp2d = clouds_color_prev;
    clouds_alpha_prev@smp2d = clouds_alpha_prev;
    prev_globtm_no_ofs_psf@f44 = { prev_globtm_no_ofs_psf_0, prev_globtm_no_ofs_psf_1, prev_globtm_no_ofs_psf_2, prev_globtm_no_ofs_psf_3 };
    globtm_no_ofs_psf@f44 = { globtm_no_ofs_psf_0, globtm_no_ofs_psf_1, globtm_no_ofs_psf_2, globtm_no_ofs_psf_3 };
    move_world_view_pos@f3 = move_world_view_pos;
    //prev_view_vecLT@f3 = prev_view_vecLT;
    //prev_view_vecRT@f3 = prev_view_vecRT;
    //prev_view_vecLB@f3 = prev_view_vecLB;
    //prev_view_vecRB@f3 = prev_view_vecRB;
    clouds_color_dimensions@f4= (clouds2_resolution.x, clouds2_resolution.y, 1./clouds2_resolution.x, 1./clouds2_resolution.y);
    //cloud_layers_altitudes_tex@smp = cloud_layers_altitudes_tex hlsl {Texture2D<float4> cloud_layers_altitudes_tex@smp;}
    clouds_restart_taa@f1 = (clouds_restart_taa);
    clouds_tiles_threshold@f1 = (clouds_tiled_res.x*clouds_tiled_res.y*0.9,0,0,0);//90% of non empty tiles is enough to skip doing optimization
    clouds_taa_min_new_frame_weight@f1 = (clouds_taa_min_new_frame_weight);
  }
  USE_CLOUDS_DISTANCE(code)
  USE_CLOUDS_DISTANCE_STUB(code)
  CLOSE_LAYER_EARLY_EXIT(code)
  CLOSE_LAYER_EARLY_EXIT_STUB(code)
  VIEW_VEC_OPTIMIZED(code)
  INIT_ZNZFAR_STAGE(code)
  hlsl(code){
    ##if (clouds_prev_depth_gbuf == NULL)
      #define DONT_CHECK_DEPTH_DISCONTINUITY 1
      #define TAA_NEW_FRAME_WEIGHT 0.03
      #define TAA_DEBUG_DISABLE_CLAMPING 1
      #define TAA_NEW_FRAME_WEIGHT_BLUR 1
      //#define TAA_ALWAYS_BLUR 1
    ##else
      #define TAA_ALWAYS_BLUR_WHERE_ALLOWED 1//#define TAA_NEW_FRAME_WEIGHT_BLUR_WHERE_ALLOWED 1
      #define TAA_NEW_FRAME_WEIGHT 0.06
    ##endif

    #if SIMPLER_CLOUDS_TAA
      #define TAA_BILINEAR 1
    #else
      #define TAA_BILINEAR 0
    #endif

    ##if clouds_use_fullres == yes
      #define CLOUDS_FULLRES 1
    ##endif
  }

  hlsl(code){
    #define TAA_SHARPENING_FACTOR 0.5
    #define TAA_RESTART_TEMPORAL_X clouds_restart_taa
    #ifndef TAA_NEW_FRAME_WEIGHT
      #define TAA_NEW_FRAME_WEIGHT 0.07
    #endif
    #define TAA_MOTION_DIFFERENCE_MAX_WEIGHT 0.5
    #define TAA_LUMINANCE_MAX 100
    #include "daCloudsTonemap.hlsl"
    #include "temporalClouds.hlsl"
    half4 clouds_taa(out half curTaaWeight, uint2 screenpos, float2 tc)
    {
      BRANCH
      if (HAS_EMPTY_TILES==1 && tile_is_empty(screenpos.xy))//ofc it may be that tile wasn't empty last time, but overall it's unlikely
      {
        curTaaWeight = 1;
        return 0;
      }
      half4 ret;
      TAA(ret, curTaaWeight,
          clouds_color, clouds_color_samplerstate,
          clouds_depth, clouds_depth_samplerstate,
          clouds_color_prev, clouds_color_prev_samplerstate,
          clouds_depth_gbuf, clouds_depth_gbuf_samplerstate,
          clouds_prev_depth_gbuf, clouds_prev_depth_gbuf_samplerstate,
          clouds_prev_taa_weight, clouds_prev_taa_weight_samplerstate,
          tc, clouds_color_dimensions.xy, clouds_color_dimensions.zw, TONEMAPPED_SCENE_EXPOSURE);
      return ret;
    }
  }
endmacro

shader clouds2_taa_ps, clouds2_taa_ps_has_empty, clouds2_taa_ps_no_empty
{
  cull_mode=none;
  z_write=false;
  //DACLOUDS_SETTINGS()
  if (is_gather4_supported == supported || shader != clouds2_taa_ps)
  {
    hlsl {
      #define SUPPORT_TEXTURE_GATHER 1
    }
  }
  if (shader == clouds2_taa_ps_no_empty)
  {
    hlsl {
      #define HAS_EMPTY_TILES 0
    }
  } else
  {
    hlsl {
      #define HAS_EMPTY_TILES 1
    }
  }
  CLOUDS_TAA(ps)

  hlsl {
    struct VsOutput
    {
      VS_OUT_POSITION(pos)
      float2 tc : TEXCOORD0;
    };
  }

  hlsl(ps) {
    struct MRT
    {
      float4 color:SV_Target0;
      float taaWeight:SV_Target1;
    };
    MRT clouds_ps(VsOutput input HW_USE_SCREEN_POS)
    {
      float4 screenpos = GET_SCREEN_POS(input.pos);
      MRT ret;
      ret.color = clouds_taa(ret.taaWeight, screenpos.xy, input.tc);
      return ret;
    }
  }

  USE_POSTFX_VERTEX_POSITIONS()
  hlsl(vs) {
    VsOutput clouds_vs(uint vertexId : SV_VertexID)
    {
      VsOutput output;
      float2 pos = getPostfxVertexPositionById(vertexId);
      output.pos = float4(pos.xy, 1, 1);
      output.tc = screen_to_texcoords(pos);
      return output;
    }
  }

  compile("target_vs", "clouds_vs");
  if (is_gather4_supported == supported || shader != clouds2_taa_ps)
  {
    compile("ps_4_1", "clouds_ps");
  } else
  {
    compile("target_ps", "clouds_ps");
  }
}

shader clouds2_taa_cs, clouds2_taa_cs_has_empty, clouds2_taa_cs_no_empty
{
  hlsl {
    #define SUPPORT_TEXTURE_GATHER 1
  }
  if (shader == clouds2_taa_cs_no_empty)
  {
    hlsl {
      #define HAS_EMPTY_TILES 0
    }
  } else
  {
    hlsl {
      #define HAS_EMPTY_TILES 1
    }
  }
  CLOUDS_TAA(cs)
  (cs) { invres@f4 = (1./clouds2_resolution.x, 1./clouds2_resolution.y, 0.5/clouds2_resolution.x, 0.5/clouds2_resolution.y); }
  //(cs) { clouds2_dispatch_groups@f2 = (clouds2_dispatch_groups); }

  hlsl(cs) {
    RWTexture2D<float4> target0: register(u0);
    RWTexture2D<float> target1: register(u1);
    #include <cloud_settings.hlsli>
    #include <L2_cache_friendly_dispatch.hlsl>

    /*[numthreads(CLOUD_TRACE_WARP_X, CLOUD_TRACE_WARP_Y, 1)]
    void cs_main(uint2 dtid_ : SV_DispatchThreadID, uint2 gid_ : SV_GroupID, uint3 tid_ : SV_GroupThreadID) {
      uint2 swizzledvGroupID;
      dispatch_cache_friendly_pattern(
        uint2(asuint(clouds2_dispatch_groups.x), asuint(clouds2_dispatch_groups.y)),
        uint2(CLOUD_TRACE_WARP_X, CLOUD_TRACE_WARP_Y),
        8,
        gid_,//known in HLSL as GroupID
        swizzledvGroupID);
      uint2 dtid = (swizzledvGroupID*CLOUD_TRACE_WARP) + tid_;
    */
    [numthreads(CLOUD_TRACE_WARP_X, CLOUD_TRACE_WARP_Y, 1)]
    void cs_main(uint2 dtid : SV_DispatchThreadID)
    {
      float taaWeight;
      texture2DAt(target0, dtid) = clouds_taa(taaWeight, dtid.xy, dtid*invres.xy + invres.zw);
      texture2DAt(target1, dtid) = taaWeight;
    }
  }
  compile("cs_5_0", "cs_main");
}
