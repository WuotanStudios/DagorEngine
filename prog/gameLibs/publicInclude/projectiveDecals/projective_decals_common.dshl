include "viewVecVS.dshl"
include "land_block_inc.dshl"
include "deform_hmap_common.dshl"
include "heightmap_ofs.dshl"
include "heightmap_common.dshl"

buffer decal_buffer;

int projective_decals_to_update_count_const_no = 0 always_referenced;
int projective_decals_to_update_const_no = 1 always_referenced; // TODO: use it instead register(c1) for all related shaders
int projective_decals_original_count_const_no = 10 always_referenced;
int projective_decals_original_uav_no = 0 always_referenced;
int projective_decals_target_uav_no = 1 always_referenced;
int projective_decals_target_count_uav_no = 2 always_referenced;

hlsl {
  #include <projectiveDecals/projective_decals.hlsli>
  #include <projectiveDecals/projective_decals_const.hlsli>

  uint2 encode_float4(float4 fval)
  {
    return f32tof16(fval.xy) | (f32tof16(fval.zw)<<16);
  }
  float4 decode_float4(uint2 ival)
  {
    return float4(f16tof32(ival), f16tof32(ival>>16));
  }
  uint2 encode_normal_up(float3 normal, float3 up) //48 bits
  {
    float2 normal_packed = saturate(normal.xy*0.5+0.5);
    float2 up_packed = acos(up.xy) / PI;
    uint normal_and_bits = uint(normal_packed.x*32767) | (uint(normal_packed.y*32767)<<15);
    normal_and_bits |= ((normal.z<0) ? (1U<<30) : 0) | ((up.z<0) ? (1U<<31) : 0);
    uint up_bits = uint(up_packed.x*255) | (uint(up_packed.y*255)<<8);
    return uint2(normal_and_bits, up_bits);
  }
  void decode_normal_up(uint2 v, out float3 normal, out float3 up) //48 bits
  {
    normal.xy = float2((v.x&32767)/32767.0, ((v.x>>15)&32767)/32767.0)*2. - 1.;
    normal.z = sqrt(saturate(1-dot(normal.xy, normal.xy)));
    normal.z = (v.x&(1U<<30)) ? -normal.z : normal.z;
    up.xy = cos(float2((v.y&255)/255.0, ((v.y>>8)&255)/255.0) * PI);
    up.z = sqrt(saturate(1-dot(up.xy, up.xy)));
    up.z = (v.x&(1U<<31)) ? -up.z : up.z;
  }
  float3 get_decal_tex_coord_from_world_pos(float3 world_pos, float3 patch_center, float3 norm, float3 tangent)
  {
    float3 decalOffset = patch_center - world_pos;

    float3 binorm = cross(norm, tangent);
    float3 tang = normalize(cross(binorm, norm));

    return float3(-dot(decalOffset, tang), -dot(decalOffset, binorm), dot(decalOffset, norm));
  }
}

macro PROJECTIVE_DECALS_MATRICES(decal_matrices_var, count, code)
  (code) {
    AllMatrices@cbuf = decal_matrices_var hlsl {
      cbuffer AllMatrices@cbuf
      {
        #include <decalMatrices/decal_matrices_const.hlsli>
        float4 matrices[count*3];
      }
    }
  }
  hlsl {
    #define HAS_MATRIX_BUFFER 1
  }
endmacro

macro POJECTIVE_DECALS_VS_COMMON()
  INIT_DEFORM_HMAP(vs)
  USE_DEFORM_HMAP(vs)
  INIT_HEIGHTMAP_OFS(vs)
  USE_HEIGHTMAP_OFS(vs)
  hlsl(vs) {
    #define NO_GRADIENTS_IN_SHADER 1
  }
  INIT_WORLD_HEIGHTMAP(vs)
  USE_HEIGHTMAP_COMMON(vs)
  hlsl(vs) {
    struct ProjectiveDecalData
    {
      float4 pos_size;
      float4 normal_width;
      float4 tang_bias;
      uint matrixId;
    };

    void calc_world_values(ProjectiveDecalData decal,
                          uint vertexId,
                          float shrinkXRatio,
                          out float3 worldDu,
                          out float3 worldNormal,
                          out float3 worldPos,
                          out float3 worldDecalPos)
    {
      float3 wtm_x = float3(1,0,0);
      float3 wtm_y = float3(0,1,0);
      float3 wtm_z = float3(0,0,1);
      float3 wtm_pos = float3(0,0,0);

      #ifdef HAS_MATRIX_BUFFER
        BRANCH
        if (decal.matrixId > 0)
        {
          int useMatrixId = decal.matrixId * 3 - 3;

          wtm_x = matrices[useMatrixId+0].xyz;
          wtm_y = matrices[useMatrixId+1].xyz;
          wtm_z = matrices[useMatrixId+2].xyz;
          wtm_pos = float3(matrices[useMatrixId+0].w, matrices[useMatrixId+1].w, matrices[useMatrixId+2].w);
        }
      #endif

      worldNormal = normalize(decal.normal_width.x * wtm_x + decal.normal_width.y * wtm_y + decal.normal_width.z * wtm_z);
      worldDu = normalize(decal.tang_bias.x * wtm_x + decal.tang_bias.y * wtm_y + decal.tang_bias.z * wtm_z);
      float3 worldDv = normalize(cross(worldNormal, worldDu));
      worldDu = cross(worldDv, worldNormal);

      worldDecalPos  = decal.pos_size.x * wtm_x + decal.pos_size.y * wtm_y + decal.pos_size.z * wtm_z + wtm_pos;

      BRANCH
      if (decal.matrixId == 0 && worldNormal.y > 0.1) // testing for decals on the ground
      {
        float worldY = getWorldHeight(worldDecalPos.xz); // terrain normal is not considered here
        if (abs(worldY - worldDecalPos.y) < decal.normal_width.w/2)
        {
          float displacementEffect = 0;
          float displacement = get_hmap_ofs(worldDecalPos.xz, 0, displacementEffect);
          worldDecalPos += worldNormal*displacement;
        }
      }

      float3 coords = float3(vertexId / 4, vertexId / 2 % 2 == 1, (vertexId % 2) != 0);

      coords = (coords - float3(0.5, 0.5, 0.5)) * 2;
      coords.x *= shrinkXRatio;

      coords.z += decal.tang_bias.w;
      worldPos = worldDecalPos + decal.pos_size.w * (coords.x*worldDu + coords.y*worldDv) - coords.z * worldNormal * decal.normal_width.w;
    }
  }
endmacro

macro POJECTIVE_DECALS_WITHOUT_ZN_ZFAR_PS()
  if (mobile_render == deferred) {
    USE_SUBPASS_LOADS()
    INIT_SUBPASS_LOAD_DEPTH_GBUFFER(SP_DECALS_REG_DEPTH, SP_DECALS_IA_DEPTH)
    USE_SUBPASS_LOAD_DEPTH_GBUFFER()
    INIT_SUBPASS_LOAD_OPAQUE_MASK(SP_DECALS_REG_MASK, SP_DECALS_IA_MASK)
    USE_SUBPASS_LOAD_OPAQUE_MASK()
  } else {
    INIT_LOAD_DEPTH_GBUFFER()
    USE_LOAD_DEPTH_GBUFFER()
  }
  USE_AND_INIT_VIEW_VEC_PS()
  ENABLE_ASSERT(ps)

  (ps) {
    screen_pos_to_texcoord@f4 = (1. / screen_pos_to_texcoord.x, 1. / screen_pos_to_texcoord.y, screen_pos_to_texcoord.x, screen_pos_to_texcoord.y);
  }

  hlsl(ps) {
    float3 get_decal_eye_to_point(float4 screen)
    {
      int2 tci = screen.xy;

      float depth = loadGbufferDepth(tci);
      float sceneDepth = linearize_z(depth, zn_zfar.zw);
      float2 scrTc = screen.xy * screen_pos_to_texcoord.zw;

      float3 viewVect = lerp_view_vec(scrTc.xy);
      return sceneDepth * viewVect;
    }

    float3 get_decal_world_pos(float4 screen)
    {
      return world_view_pos + get_decal_eye_to_point(screen);
    }

    float3 get_decal_tex_coord(float4 screen, float3 patch_center, float3 norm, float3 tangent)
    {
      return get_decal_tex_coord_from_world_pos(get_decal_world_pos(screen), patch_center, norm, tangent);
    }
  }
endmacro

macro POJECTIVE_DECALS_PS_COMMON()
  INIT_ZNZFAR()
  POJECTIVE_DECALS_WITHOUT_ZN_ZFAR_PS()
endmacro