include "world_sdf.dshl"
include "sky_shader_global.dshl"
include "sq_clouds_shadow.dshl"
include "screenspace_probes_common.dshl"
include "screenspace_probes_reprojection.dshl"
include "project_gi_motion_vecs.dshl"

include "sp_spatial_filter_probes.dshl"
include "screen_gi_encoding.dshl"

buffer screenspace_tile_classificator;

texture prev_screenspace_radiance;

macro SAMPLE_PREV_RADIANCE_SP(code)
  REPROJECT_SP_WEIGHTS(code)
  (code) {
    prev_screenspace_radiance@tex2d = prev_screenspace_radiance;
  }
  hlsl(code) {
    #include <pixelPacking/PixelPacking_R11G11B10.hlsl>
    float3 read_prev_texture_radiance(uint probe_index, uint2 tci, uint2 radiance_coord)
    {
      return sp_decode_texture_radiance(texture2DAt(prev_screenspace_radiance, tci + radiance_coord).xyz);
    }
    bool sample_bilinear_prev_radiance(float3 prevCamPos, float3 worldNormal, float linearW, float2 history_uv, float history_w, uint2 radianceCoord, inout uint historyMovingTag, inout float3 final_radiance)
    {
      uint2 probe_coords[4]; uint4 encodedProbes;
      float4 cornerW;
      if (!sample_bilinear_prev_radiance_info(prevCamPos, worldNormal, linearW, history_uv, history_w, cornerW, probe_coords, encodedProbes))
        return false;
      uint combinedTag = encodedProbes.x|encodedProbes.y|encodedProbes.z|encodedProbes.w;
      historyMovingTag = sp_decodeTag(combinedTag);
      UNROLL
      for (uint i = 0; i < 4; ++i)
      {
        float cW = cornerW[i];
        //if (cW > 0) // since prev radiance is not nan
        {
          uint prevRadianceRes = prev_screenspace_probe_res.w;
          uint2 samplePosCoord = probe_coords[i]*prevRadianceRes + radianceCoord;
          float3 sampledRadiance = read_prev_texture_radiance(probe_coords[i].x + probe_coords[i].y*prev_screenspace_probe_res.x, probe_coords[i]*prevRadianceRes, radianceCoord);
          //float3 sampledRadiance = prev_screenspace_radiance[samplePosCoord].xyz;
          final_radiance += sampledRadiance*cW;
        }
      }
      float prevExposure = 1;//fixme
      final_radiance *= prevExposure;
      return true;
    }
  }
endmacro

macro COMMON_RADIANCE_FILTER(code)
  SCREENSPACE_PROBES_POSITIONS(code)
  SREENSPACE_PROBES_OCTAHEDRAL(code)
  (code) {
    screenspace_tile_classificator@buf = screenspace_tile_classificator hlsl {
      ByteAddressBuffer screenspace_tile_classificator@buf;
    }
    sp_radiance_area@i1 = sp_radiance_area;
    sp_radiance_tc_decode@f4 = (1./screenspace_probe_res.w, 0.5/screenspace_probe_res.w, 2./screenspace_probe_res.w, 1/screenspace_probe_res.w - 1);
  }
  hlsl(code) {
    float3 Round_R11G11B10_FLOAT( float3 rgb, uint3 round = 15)//use rounding when convert to r11g11b10. HW uses truncation, causing yellowish picture
    {
      //return float3(f16tof32((f32tof16(rgb.xy) +  8) & 0x7FF0), f16tof32((f32tof16(rgb.z) + 16) & 0x7FE0));
      //return float3(f16tof32(f32tof16(rgb) & 0x7FE0)); //trunc
      return float3(f16tof32((f32tof16(rgb) + round) & 0x7FE0)); //trunc with rounding as 11bit
    }

    RWTexture2D<float3> radiance_sp: register(u0);
    void write_texture_encoded_radiance(float3 rad, float exposure, uint probe_index, uint2 tci, uint2 radiance_coord)
    {
      //use rounding when convert to r11g11b10. HW uses truncation, causing yellowish picture
      ##if dagi_sp_has_exposure_assume == can_be_r11g11b10
        rad = Round_R11G11B10_FLOAT(rad, rad*exposure < 1 ? 16 : 15);
      ##endif
      texture2DAt(radiance_sp, tci + radiance_coord) = rad;
    }

    #if SP_RADIANCE_SIZE_IS_WARP
    groupshared uint sharedEncodedProbe;
    #define SP_FILTER_WARP_X SP_RADIANCE_OCT_W
    #define SP_FILTER_WARP_Y SP_RADIANCE_OCT_W
    #else
    #define SP_FILTER_WARP_X SP_FILTER_WARP_SIZE
    #define SP_FILTER_WARP_Y 1
    #endif
  }
endmacro

macro CURRENT_RADIANCE_READ(code)
  hlsl(code) {
    float3 read_texture_radiance(uint probe_index, uint2 tci, uint2 radiance_coord)
    {
      return sp_decode_texture_radiance(screenprobes_current_radiance[tci + radiance_coord].xyz);
    }
  }
  (code) {
    screenprobes_current_radiance@tex2d = screenprobes_current_radiance;
  }
endmacro

texture gi_prev_downsampled_close_depth_tex;
float gi_hero_cockpit_distance = 0;

shader temporal_filter_screenspace_radiance_cs, temporal_only_filter_screenspace_radiance_cs
{
  //SP_JITTER_POS(cs)
  ENABLE_ASSERT(cs)
  HISTORY_ONLY_PROBE(cs)
  COMMON_RADIANCE_FILTER(cs)
  if (shader == temporal_filter_screenspace_radiance_cs)
  {
    SP_USE_BUFFERS_LIST(cs)
    hlsl(cs) {
      #include "screenspace_probes_temporal_list_get.hlsl"
      uint get_history_probe_unsafe(uint i)
      {
        return get_sp_probe_unsafe(i, false);
      }
      bool get_history_probe_safe(inout uint i)
      {
        if (i >= get_sp_probes_count(false))
          return false;
        i = get_history_probe_unsafe(i);
        return true;
      }
    }
    CURRENT_RADIANCE_READ(cs)
  }

  if (shader == temporal_only_filter_screenspace_radiance_cs)
  {
    hlsl(cs) {
      RWByteAddressBuffer screenspace_probes_list: register(u3);
      #include "screenspace_probes_temporal_list_add.hlsl"
      #include "screenspace_probes_temporal_list_get.hlsl"
      uint get_history_probe_unsafe(uint i)
      {
        return get_sp_probe_unsafe(i, true);
      }
      bool get_history_probe_safe(inout uint i)
      {
        if (i >= get_sp_probes_count(true))
          return false;
        i = get_history_probe_unsafe(i);
        return true;
      }
    }
  }
  hlsl {
    #define PROBES_THRESHOLD 0.001
  }
  SAMPLE_PREV_RADIANCE_SP(cs)
  DAGI_PROJECT_SAMPLE_MOTION_VECTORS(cs)
  (cs) {
    gi_prev_downsampled_close_depth_tex@smp2d = gi_prev_downsampled_close_depth_tex;
    gi_hero_cockpit_distance@f1 = gi_hero_cockpit_distance;
  }
  hlsl(cs) {
    [numthreads(SP_FILTER_WARP_X, SP_FILTER_WARP_Y, 1)]
    void filter_radiance_cs(uint2 gtId : SV_GroupThreadID, uint gId : SV_GroupID, uint2 dtId : SV_DispatchThreadID, uint tid:SV_GroupIndex)
    {
      #if SP_RADIANCE_SIZE_IS_WARP
        uint atlasProbeIndex = get_history_probe_unsafe(gId);
        uint2 octCoord = gtId;
        if (tid == 0)
          sharedEncodedProbe = sp_loadEncodedProbe(screenspace_probe_pos, atlasProbeIndex);
        GroupMemoryBarrierWithGroupSync();
        uint encodedProbe = sharedEncodedProbe;
      #else
        uint atlasProbeIndex = dtId.x/uint(sp_radiance_area);
        if (!get_history_probe_safe(atlasProbeIndex))
          return;
        uint2 octCoord = uint2(dtId.x%sp_getRadianceRes(), (dtId.x/sp_getRadianceRes())%sp_getRadianceRes());
        uint encodedProbe = sp_loadEncodedProbe(screenspace_probe_pos, atlasProbeIndex);
      #endif
      uint2 atlasProbeCoord = uint2(atlasProbeIndex%uint(screenspace_probe_res.x), atlasProbeIndex/uint(screenspace_probe_res.x));

      uint2 screen_tile_coord = atlasProbeCoord;
      uint numScreenProbes = sp_getNumScreenProbes();
      uint totalAtlasProbes = sp_getNumTotalProbes();
      uint numAddProbes = sp_getNumAdaptiveProbes();

      DecodedProbe probe = sp_decodeProbeInfo(encodedProbe);

      bool isScreenProbe = atlasProbeIndex < numScreenProbes;

      if (!isScreenProbe)
      {
        uint addIndex = atlasProbeIndex - numScreenProbes;
        uint screenProbeIndex = loadBuffer(screenspace_tile_classificator, (sp_getScreenTileClassificatorOffsetDwords() + addIndex)*4);
        screen_tile_coord = uint2(screenProbeIndex%uint(screenspace_probe_res.x), screenProbeIndex/uint(screenspace_probe_res.x));
      }

      uint encodedProbeNormal = sp_loadEncodedProbeNormalCoord(screenspace_probe_pos, atlasProbeIndex, sp_getNumTotalProbes());
      //probe.coord_ofs = decodeCoordOfs(encodedProbeNormal);
      float3 probeNormal = decodeProbeNormal(encodedProbeNormal);
      //float2 screenProbeCoord = min(screen_tile_coord*screenspace_probe_res.z + probe.coord_ofs + 0.5f, screenspace_probe_screen_limit.zw);
      float3 probeCamPos = probe.normalizedW*sp_getViewVecOptimizedNormalized(getScreenProbeCenterScreenUV(screen_tile_coord));
      float3 probeWorldPos = sp_world_view_pos + probeCamPos;
      //float3 probeWorldPos = sp_world_view_pos + probe.normalizedW*sp_getViewVecOptimizedNormalized(screenCoordToScreenUV(screenProbeCoord));

      //float2 octTC = octCoord*sp_radiance_tc_decode.x + sp_radiance_tc_decode.y;
      float3 rayDir = screenspace_probe_dir_decode(octCoord*sp_radiance_tc_decode.z + sp_radiance_tc_decode.w);
      float probeLinearW = probe.normalizedW*sp_zn_zfar.y;

      float3 prevRadiance = 0;
      bool validHistory = false;
      uint historyMovingTag = 0;
      #if TEMPORAL_PROBES_FRAMES
        ##if (shader == temporal_only_filter_screenspace_radiance_cs)
          bool newBornProbe = false;
        ##else
          bool newBornProbe = sp_is_newborn_tag(probe.allTag);
        ##endif
      {
        //age can be checked for faster skip probe history (we already have it's age), as long as it's always correct
#if DAGI_HAS_MOTION_GBUF
        //bool shouldReprojectHistory = sp_is_moving_tag(probe.allTag);
        // for performance reasons, do not sample motion vectors and previous depth for rather far objects.
        bool shouldReprojectHistory = sp_is_moving_tag(probe.allTag) && probeLinearW < 50; // threshold is chosen arbitrarily
        if (shouldReprojectHistory) // this is moving/dynamic probe. to fight noiseness, we try to reproject it differnetly
        {
          uint2 coord_ofs = decodeCoordOfs(encodedProbeNormal);
          uint2 probeScreenCoord = min(screen_tile_coord*screenspace_probe_res.z + coord_ofs, screenspace_probe_screen_limit.zw);
          float2 uv = screenICoordToScreenUV(probeScreenCoord);
          float2 motionVector = load_motion_gbuf(probeScreenCoord, uv);
          if (motionVector.x != 0)
          {
            float2 historyUV = uv + motionVector;
            float4 prevRawDepth = gi_prev_downsampled_close_depth_tex.GatherRed(gi_prev_downsampled_close_depth_tex_samplerstate, historyUV);
            float4 prevLinearDepth = linearize_z4(prevRawDepth, sp_prev_zn_zfar.zw);
            float4 prevDepthDiff = abs(prevLinearDepth - probeLinearW);
            float minDepthDiff = min(min(prevDepthDiff.x, prevDepthDiff.y), min(prevDepthDiff.z, prevDepthDiff.w));
            float bestPrevLinearDepth = minDepthDiff == prevDepthDiff.x ? prevLinearDepth.x : minDepthDiff == prevDepthDiff.y ? prevLinearDepth.y : minDepthDiff == prevDepthDiff.z ? prevLinearDepth.z : prevLinearDepth.w;
            float historyW = probeLinearW;
            if (abs(bestPrevLinearDepth - probeLinearW) < 0.1*probeLinearW) // somewhat similar depth. threshold is chosen arbitrarily
              historyW = bestPrevLinearDepth; // so, use previous one depth

            // threshold is also chosen arbitrarily
            if (abs(bestPrevLinearDepth - probeLinearW) < 0.5*probeLinearW || all(prevRawDepth == 0)) // otherwise it is completely different. Some other dynamic object happened to be infront of it!
            {
              float3 prevProbeCamPos = historyW*sp_getPrevViewVecOptimized(historyUV);
              validHistory = sample_bilinear_prev_radiance(prevProbeCamPos, probeNormal, probeLinearW, historyUV, historyW, octCoord, historyMovingTag, prevRadiance);
            }
          }
        }
#else
        if (sp_is_moving_tag(probe.allTag) && probeLinearW < gi_hero_cockpit_distance)
        {
          float historyW = probeLinearW;
          //fixme: replace (sp_prev_world_view_pos - sp_world_view_pos) with constant;
          // keep rotation, but remove offset
          float4 clipSpace = mul(float4(probeWorldPos + (sp_prev_world_view_pos - sp_world_view_pos), 1), sp_prev_globtm);
          float2 screenSpace = clipSpace.w > 0 ? clipSpace.xy/clipSpace.w : float2(2,2);
          if (all(abs(screenSpace) < 1))
          {
            float2 historyUV = screenSpace*float2(0.5, -0.5) + float2(0.5, 0.5);
            float3 prevProbeCamPos = probeLinearW*sp_getPrevViewVecOptimized(historyUV);

            validHistory = sample_bilinear_prev_radiance(prevProbeCamPos, probeNormal, probeLinearW, historyUV, historyW, octCoord, historyMovingTag, prevRadiance);
          }
        }
#endif
        if (!validHistory)
        {
          float3 oldUv_w;
          validHistory = !newBornProbe && reproject_probe_uv_campos(probeCamPos, oldUv_w) &&
                         sample_bilinear_prev_radiance(probeCamPos + sp_prev_camera_pos_movement, probeNormal, probeLinearW, oldUv_w.xy, oldUv_w.z, octCoord, historyMovingTag, prevRadiance);
        }
      }
      #endif

      float currentExposure = 1;//fixme


      ##if (shader == temporal_only_filter_screenspace_radiance_cs)
        float3 encodedRadiance = validHistory ? sp_encode_texture_radiance(prevRadiance/currentExposure) : 0;
        if (!validHistory && all(octCoord == 0))
        {
          add_screenspace_probes_list(atlasProbeIndex, false);
        }
      ##else
        float3 rad_distance = read_texture_radiance(atlasProbeIndex, atlasProbeCoord*sp_getRadianceRes(), octCoord);
        float3 encodedRadiance = sp_encode_texture_radiance(rad_distance.xyz);
        #if TEMPORAL_PROBES_FRAMES > 1
        //if (onlyHistoryProbe)
        //  encodedRadiance = float3(1,!isScreenProbe,0);
        if (validHistory)
        {
          //float3 newHistory = lerp(prevRadiance, rad_distance.xyz, sp_is_moving_tag(probe.tag) ? 0.2 : 0.03);//moving probes to use less of history
          //newHistory = sp_encode_history_texture_radiance(newHistory);
          //use probe age to faster converge. first weight is 1, then 0.5, then 0.3, then we go to moving average (0.03)
          uint revAge = sp_decodeTagRevAge(probe.allTag);
          float ageW = revAge ? 1./(SP_TAG_MAX_AGE + 1 - revAge) : 0.025;
          float w = sp_is_moving_tag(probe.allTag|historyMovingTag) ? 0.125 : ageW;//moving probes to use less of history
          float3 encodedHistory = sp_encode_texture_radiance(prevRadiance);
          encodedRadiance = lerp(encodedHistory, encodedRadiance, w);
          //float3 newEncodedHistory = lerp(encodedHistory, encodedRadiance, w);//moving probes to use less of history
          //simple verison
          //encodedRadiance = R11G11B10_FLOAT_UINT3(newEncodedHistory) == R11G11B10_FLOAT_UINT3(encodedHistory) ?
          //  lerp(encodedHistory, encodedRadiance, max(w,0.05)) : newEncodedHistory;
          //enhanced version
          //uint3 targetValue = R11G11B10_FLOAT_UINT3(newHistory), historyTargetValue = R11G11B10_FLOAT_UINT3(encodedHistory), newTargetValue = R11G11B10_FLOAT_UINT3(encodedRadiance);
          //const int3 nextR11G11B10_u3 = int3(1<<4, 1<<4, 1<<5);
          //encodedRadiance = (targetValue == historyTargetValue && newTargetValue != historyTargetValue) ? f16tof32(historyTargetValue + (historyTargetValue < newTargetValue ? nextR11G11B10_u3 : -nextR11G11B10_u3)) : newHistory;
        }
        #endif
        encodedRadiance = sp_encode_texture_radiance(sp_decode_texture_radiance(encodedRadiance)/currentExposure);//fixme: function
      ##endif

      encodedRadiance = h3nanofilter(encodedRadiance);
      write_texture_encoded_radiance(encodedRadiance, currentExposure, atlasProbeIndex, atlasProbeCoord*sp_getRadianceRes(), octCoord);
    }
  }
  compile("target_cs", "filter_radiance_cs");
}


int4 sp_placement_iteration;
shader filter_screenspace_radiance_cs
{
  //SP_JITTER_POS(cs)
  ENABLE_ASSERT(cs)
  CURRENT_RADIANCE_READ(cs)
  COMMON_RADIANCE_FILTER(cs)
  hlsl(cs) {
    #define SP_FILTERED_RADIANCE 1
  }
  SP_SPATIAL_FILTER_PROBES(cs)
  (cs) {
    sp_placement_iteration@i3 = sp_placement_iteration;
  }

  hlsl(cs) {
    uint get_history_probe_unsafe(uint i) {return i;}
    bool get_history_probe_safe(inout uint i) {return i < sp_getNumTotalProbes();}
    [numthreads(SP_FILTER_WARP_X, SP_FILTER_WARP_Y, 1)]
    void filter_radiance_cs(uint2 gtId : SV_GroupThreadID, uint gId : SV_GroupID, uint2 dtId : SV_DispatchThreadID, uint tid:SV_GroupIndex)
    {
      #if SP_RADIANCE_SIZE_IS_WARP
        uint atlasProbeIndex = get_history_probe_unsafe(gId);
        uint2 octCoord = gtId;
        if (tid == 0)
          sharedEncodedProbe = sp_loadEncodedProbe(screenspace_probe_pos, atlasProbeIndex);
        GroupMemoryBarrierWithGroupSync();
        uint encodedProbe = sharedEncodedProbe;
      #else
        uint atlasProbeIndex = dtId.x/uint(sp_radiance_area);
        if (!get_history_probe_safe(atlasProbeIndex))
          return;
        uint2 octCoord = uint2(dtId.x%sp_getRadianceRes(), (dtId.x/sp_getRadianceRes())%sp_getRadianceRes());
        uint encodedProbe = sp_loadEncodedProbe(screenspace_probe_pos, atlasProbeIndex);
      #endif
      uint2 atlasProbeCoord = uint2(atlasProbeIndex%uint(screenspace_probe_res.x), atlasProbeIndex/uint(screenspace_probe_res.x));

      if (!encodedProbe)
        return;

      uint2 screen_tile_coord = atlasProbeCoord;
      uint numScreenProbes = sp_getNumScreenProbes();
      uint totalAtlasProbes = sp_getNumTotalProbes();
      uint numAddProbes = sp_getNumAdaptiveProbes();

      DecodedProbe probe = sp_decodeProbeInfo(encodedProbe);

      bool isScreenProbe = atlasProbeIndex < numScreenProbes;

      if (!isScreenProbe)
      {
        uint addIndex = atlasProbeIndex - numScreenProbes;
        uint screenProbeIndex = loadBuffer(screenspace_tile_classificator, (sp_getScreenTileClassificatorOffsetDwords() + addIndex)*4);
        screen_tile_coord = uint2(screenProbeIndex%uint(screenspace_probe_res.x), screenProbeIndex/uint(screenspace_probe_res.x));
      }

      uint encodedProbeNormal = sp_loadEncodedProbeNormalCoord(screenspace_probe_pos, atlasProbeIndex, sp_getNumTotalProbes());
      //probe.coord_ofs = decodeCoordOfs(encodedProbeNormal);
      float3 probeNormal = decodeProbeNormal(encodedProbeNormal);
      //float2 screenProbeCoord = min(screen_tile_coord*screenspace_probe_res.z + probe.coord_ofs + 0.5f, screenspace_probe_screen_limit.zw);
      float3 probeCamPos = probe.normalizedW*sp_getViewVecOptimizedNormalized(getScreenProbeCenterScreenUV(screen_tile_coord));
      //float3 probeWorldPos = sp_world_view_pos + probe.normalizedW*sp_getViewVecOptimizedNormalized(screenCoordToScreenUV(screenProbeCoord));

      //float2 octTC = octCoord*sp_radiance_tc_decode.x + sp_radiance_tc_decode.y;
      float3 rayDir = screenspace_probe_dir_decode(octCoord*sp_radiance_tc_decode.z + sp_radiance_tc_decode.w);
      float probeLinearW = probe.normalizedW*sp_zn_zfar.y;

      float3 prevRadiance = 0;
      bool validHistory = false;
      uint historyMovingTag = 0;

      float3 rad_distance = read_texture_radiance(atlasProbeIndex, atlasProbeCoord*sp_getRadianceRes(), octCoord);

      float sourceExposure = 1;//fixme
      float currentExposure = 1;//fixme

      if (SP_SPATIAL_FILTER)
      {
        ScreenProbeFilteringSettings s = default_screen_probes_filtering_settings();
        //s.searchAdditionalProbes = !isScreenProbe || sp_is_moving_or_new(probe.allTag);
        //s.usePositionAveraging = !sp_is_moving_or_new(probe.allTag);
        //FLATTEN
        //if (sp_is_moving_or_new(probe.allTag))
        //  s.depth_exp /= 8;
        //s.usePositionAveraging = false;
        //use different plane - makes more accurate spatial results
        float4 scenePlaneScaled = float4(rayDir, dot(rayDir, probeCamPos)) / probeLinearW;
        //scenePlaneScaled *= depth_exp_precision_scale(probe.normalizedW);
        // spatial filter
        float cWeight = sp_is_moving_or_new(probe.allTag) ? 0.25 : 1;
        rad_distance *= cWeight;
        float w1 = 1, w2 = 1, w3 = 1;
        float invNormalizedW = rcp(probe.normalizedW);
        int2 tcoordI = screen_tile_coord;
        int ofs = sp_is_relatively_new(probe.allTag) ? sp_placement_iteration.z : 1;
        get_neighboor_radiance(atlasProbeIndex, scenePlaneScaled, invNormalizedW, probeCamPos, rayDir, tcoordI + int2( 0,-ofs), octCoord, rad_distance, cWeight, w2, s);
        get_neighboor_radiance(atlasProbeIndex, scenePlaneScaled, invNormalizedW, probeCamPos, rayDir, tcoordI + int2( 0,+ofs), octCoord, rad_distance, cWeight, w2, s);
        get_neighboor_radiance(atlasProbeIndex, scenePlaneScaled, invNormalizedW, probeCamPos, rayDir, tcoordI + int2(-ofs, 0), octCoord, rad_distance, cWeight, w2, s);
        get_neighboor_radiance(atlasProbeIndex, scenePlaneScaled, invNormalizedW, probeCamPos, rayDir, tcoordI + int2(+ofs, 0), octCoord, rad_distance, cWeight, w2, s);

        if (sp_is_moving_or_new(probe.allTag))//moving or relatively new probes to be smoothed more
        {
          get_neighboor_radiance(atlasProbeIndex, scenePlaneScaled, invNormalizedW, probeCamPos, rayDir, tcoordI + int2(-ofs,-ofs), octCoord, rad_distance, cWeight, w1, s);
          get_neighboor_radiance(atlasProbeIndex, scenePlaneScaled, invNormalizedW, probeCamPos, rayDir, tcoordI + int2(+ofs,-ofs), octCoord, rad_distance, cWeight, w1, s);
          get_neighboor_radiance(atlasProbeIndex, scenePlaneScaled, invNormalizedW, probeCamPos, rayDir, tcoordI + int2(-ofs,+ofs), octCoord, rad_distance, cWeight, w1, s);
          get_neighboor_radiance(atlasProbeIndex, scenePlaneScaled, invNormalizedW, probeCamPos, rayDir, tcoordI + int2(+ofs,+ofs), octCoord, rad_distance, cWeight, w1, s);
          int ofs2 = ofs + ofs;
          get_neighboor_radiance(atlasProbeIndex, scenePlaneScaled, invNormalizedW, probeCamPos, rayDir, tcoordI + int2( 0,-ofs2), octCoord, rad_distance, cWeight, w3, s);
          get_neighboor_radiance(atlasProbeIndex, scenePlaneScaled, invNormalizedW, probeCamPos, rayDir, tcoordI + int2( 0,+ofs2), octCoord, rad_distance, cWeight, w3, s);
          get_neighboor_radiance(atlasProbeIndex, scenePlaneScaled, invNormalizedW, probeCamPos, rayDir, tcoordI + int2(-ofs2, 0), octCoord, rad_distance, cWeight, w3, s);
          get_neighboor_radiance(atlasProbeIndex, scenePlaneScaled, invNormalizedW, probeCamPos, rayDir, tcoordI + int2(+ofs2, 0), octCoord, rad_distance, cWeight, w3, s);
        }
        rad_distance.xyz /= cWeight;
      }
      rad_distance.xyz *= sourceExposure;
      float3 encodedRadiance = sp_encode_texture_radiance(rad_distance.xyz);
      encodedRadiance = sp_encode_texture_radiance(sp_decode_texture_radiance(encodedRadiance)/currentExposure);//fixme: function
      write_texture_encoded_radiance(encodedRadiance, currentExposure, atlasProbeIndex, atlasProbeCoord*sp_getRadianceRes(), octCoord);
    }
  }
  compile("target_cs", "filter_radiance_cs");
}
