include "shader_global.dshl"
include "heightmap_common.dshl"

int gpu_objects_ri_pool_id_offset;
texture noise_128_tex_hash;

float4x4 gpu_objects_placer_tm;
float4 gpu_objects_scale_rotate;
float4 gpu_objects_scale_radius;
float4 gpu_objects_up_vector;
int gpu_objects_buffer_offset;
int gpu_objects_distance_emitter_buffer_offset;
int gpu_objects_distance_emitter_decal_buffer_offset;
int gpu_objects_matrices_count;
int gpu_objects_on_rendinst_geometry_matrices_count;
int gpu_objects_on_terrain_geometry_matrices_count;
int gpu_objects_max_on_terrain_instance_count;
float4 gpu_objects_bbox_y_min_max;
float4 gpu_objects_distance_to_scale_from;
float4 gpu_objects_distance_to_scale_to;
float4 gpu_objects_distance_to_min_scale;
float4 gpu_objects_distance_to_max_scale;
float gpu_objects_distance_to_rotation_from;
float gpu_objects_distance_to_rotation_to;
float gpu_objects_distance_to_min_rotation;
float gpu_objects_distance_to_max_rotation;
float4 gpu_objects_distance_to_scale_pow;
float gpu_objects_distance_to_rotation_pow;
int gpu_objects_distance_out_of_range;
float4 gpu_objects_remove_box_min;
float4 gpu_objects_remove_box_max;

int gpu_objects_distance_affect_decal = 0;
interval gpu_objects_distance_affect_decal: no<1, yes;

buffer gpu_objects_geometry_meshes;
buffer gpu_objects_counter;
buffer gpu_objects_gathered_triangles;
int gpu_objects_mesh_offset;
int gpu_objects_max_triangles;
float4 gpu_objects_debug_color;
float gpu_objects_min_gathered_triangle_size;

float gpu_objects_distance_emitter__range;
float4 gpu_objects_distance_emitter__position;

float gpu_objects_cutoff_ratio = -1.0;
interval gpu_objects_cutoff_ratio: dont_use_cutoff_ratio<1, use_cutoff_ratio;

macro ADD_INSTANCE()
(cs)
{
    gpu_objects_ri_pool_id_offset@i1 = (gpu_objects_ri_pool_id_offset);
}

hlsl(cs)
{
  RWStructuredBuffer<float4> gpuObjectsMatrices : register(u0);

  void addInstance(float3 pos, float3x3 orientation, float scale, int at)
  {
    orientation = transpose(orientation);
    orientation *= scale;

    gpuObjectsMatrices[at + 0] = float4(orientation[0], pos.x);
    gpuObjectsMatrices[at + 1] = float4(orientation[1], pos.y);
    gpuObjectsMatrices[at + 2] = float4(orientation[2], pos.z);
    //TODO gpu_object_placer doesn't yet support randomized color feature of ri_gpu_object
    //Setting the color to white here means that on assets that expect the coloring feature working won't become black
    gpuObjectsMatrices[at + 3] = float4(asfloat(gpu_objects_ri_pool_id_offset), 0.0, asfloat(0xFFFFFFFF), 0.0);
  }

  void addInstance(float3 pos, float3 direction, float rotate, float scale, int at)
  {

    float3 front;
    if (abs(direction.x) < 0.5)
      front = normalize(float3(0, direction.z, -direction.y)); //cross(direction, (1,0,0))
    else
      front = normalize(float3(-direction.z, 0, direction.x)); //cross(direction, (0,1,0))
    float3 right = normalize(cross(direction, front));

    float rotSin;
    float rotCos;
    sincos(rotate, rotSin, rotCos);
    // rotate along direction
    float3 rotatedRight = right * rotCos + front * rotSin;
    float3 rotatedFront = -right * rotSin + front * rotCos;

    addInstance(pos, float3x3(rotatedRight, direction, rotatedFront), scale, at);
  }
}
endmacro

macro ON_TERRAIN_UTILITY()
hlsl(cs)
{
  float3 get_world_position(const float2 randValues, const float4x4 placer_tm)
  {
    float3 localPos = float3(randValues.x - 0.5f, 0.0f, randValues.y - 0.5f);
    float3 worldPos = mulPointTm(localPos, placer_tm).xyz;
    worldPos.y = getWorldHeight(worldPos.xz);
    return worldPos;
  }
}
endmacro

macro RANDOM_UTILITY()
(cs) {
    noise_128_tex_hash@smp2d = noise_128_tex_hash;
}

hlsl(cs)
{
  float2 get_2d_random_from_placer(uint seed, const float4x4 placer_tm)
  {
    uint textureSize = 128;
    seed %= textureSize * textureSize;
    float2 tc = float2(seed % textureSize, seed / textureSize) / float(textureSize) + frac(float2(placer_tm[3][0], placer_tm[3][2]));
    return tex2Dlod(noise_128_tex_hash, float4(tc, 0.0, 0.0)).rg;
  }

  float3 get_3d_random_from_placer(uint seed, const float4x4 placer_tm)
  {
    float2 randomxy = get_2d_random_from_placer(seed, placer_tm);
    float randomz = frac(sin(dot(randomxy, float2(12.9898,78.233))) * 43758.5453);
    return float3(randomxy, randomz);
  }

  float2 get_2d_random_uniform_from_placer(uint seed, const float4x4 placer_tm)
  {
    seed += uint(frac(placer_tm[3][0]) * 128) + uint(frac(placer_tm[3][2]) * 128 * 128);
    seed %= 128 * 128;
    int2 tci = int2(seed % 128, seed / 128);
    return texelFetch(noise_128_tex_hash, tci, 0).rg;
  }

  float3 get_3d_random_uniform_from_placer(uint seed, const float4x4 placer_tm)
  {
    float2 randomxy = get_2d_random_uniform_from_placer(seed, placer_tm);
    float randomz = frac(sin(dot(randomxy, float2(12.9898,78.233))) * 43758.5453);
    return float3(randomxy, randomz);
  }
}
endmacro

// TODO: optimize the crap out of this!
shader gpu_objects_update_matrices_cs
{
  (cs)
  {
    buf_offset@i1 = gpu_objects_buffer_offset;
    distance_emitter_buf_offset@i1 = gpu_objects_distance_emitter_buffer_offset;
    distance_emitter_decal_buf_offset@i1 = gpu_objects_distance_emitter_decal_buffer_offset;
    count@i1 = gpu_objects_matrices_count;
    scale_from@f3 = gpu_objects_distance_to_scale_from;
    scale_to@f3 = gpu_objects_distance_to_scale_to;
    min_scale@f3 = gpu_objects_distance_to_min_scale;
    max_scale@f3 = gpu_objects_distance_to_max_scale;
    rotation_from@f1 = gpu_objects_distance_to_rotation_from;
    rotation_to@f1 = gpu_objects_distance_to_rotation_to;
    min_rotation@f1 = gpu_objects_distance_to_min_rotation;
    max_rotation@f1 = gpu_objects_distance_to_max_rotation;
    scale_pow@f3 = gpu_objects_distance_to_scale_pow;
    rotation_pow@f1 = gpu_objects_distance_to_rotation_pow;
    range@f1 = gpu_objects_distance_emitter__range;
    entity_position@f3 = gpu_objects_distance_emitter__position;
    out_of_range@i1 = gpu_objects_distance_out_of_range;
  }

  hlsl(cs)
  {
    #include "gpuObjects/gpu_objects_const.hlsli"

    RWStructuredBuffer<float4> gpuObjectsMatrices : register(u0);

    float3 getOriginalPosition(int index)
    {
      return float3(
        gpuObjectsMatrices[index + 0][3],
        gpuObjectsMatrices[index + 1][3],
        gpuObjectsMatrices[index + 2][3]
      );
    }

    float getOriginalScale(int index)
    {
      float3 firstColumn = float3(
        gpuObjectsMatrices[index + 0][0],
        gpuObjectsMatrices[index + 1][0],
        gpuObjectsMatrices[index + 2][0]
      );
      return length(firstColumn);
    }

    float3x3 getOriginalOrientation(int index, float scale)
    {
      float3x3 orientationAndScale = float3x3(
        gpuObjectsMatrices[index + 0].xyz,
        gpuObjectsMatrices[index + 1].xyz,
        gpuObjectsMatrices[index + 2].xyz
      );
      return orientationAndScale / scale;
    }

    float3 getOriginalUpDirection(int index, float originalScale)
    {
      float3 upVector = float3(
        gpuObjectsMatrices[index + 0][1],
        gpuObjectsMatrices[index + 1][1],
        gpuObjectsMatrices[index + 2][1]
      );
      return upVector / originalScale;
    }

    float remap(float value, float fromMin, float fromMax, float toMin, float toMax)
    {
      return toMin + (value - fromMin) * (toMax - toMin) / (fromMax - fromMin);
    }

    float3x3 getScaleMatrix(float3 scale)
    {
      return float3x3(
        scale.x, 0.0f, 0.0f,
        0.0f, scale.y, 0.0f,
        0.0f, 0.0f, scale.z
      );
    }

    float3x3 getScale(float originalScale, float distance)
    {
      float normalizedDistance = 1.0f - min(remap(distance, 0.0f, range, 0.0f, 1.0f), 1.0f);
      float3 normalizedDistanceVector = float3(normalizedDistance, normalizedDistance, normalizedDistance);
      float3 normalizedDistancePowVector = pow(normalizedDistanceVector, scale_pow);
      float3 scaleMultiplier = clamp(lerp(scale_from, scale_to, normalizedDistancePowVector), min_scale, max_scale);
      float3 scale = originalScale * scaleMultiplier;
      return getScaleMatrix(scale);
    }

    float3x3 getOrientation(float4 axisAngle)
    {
      float3x3 result;
      float3 axis = axisAngle.xyz;
      float angle = axisAngle.w;
      float sinAngle;
      float cosAngle;
      sincos(angle, sinAngle, cosAngle);
      float t = 1.0f - cosAngle;
      float x = axis.x;
      float y = axis.y;
      float z = axis.z;
      result[0][0] = cosAngle + x * x * t;
      result[0][1] = x * y * t - z * sinAngle;
      result[0][2] = x * z * t + y * sinAngle;
      result[1][0] = y * x * t + z * sinAngle;
      result[1][1] = cosAngle + y * y * t;
      result[1][2] = y * z * t - x * sinAngle;
      result[2][0] = z * x * t - y * sinAngle;
      result[2][1] = z * y * t + x * sinAngle;
      result[2][2] = cosAngle + z * z * t;
      return result;
    }

    float3x3 getOrientation(int index, float3 gpuObjectToEntity, float gpuObjectToEntityDistance, float originalScale, float3x3 originalOrientation)
    {
      float3 gpuObjectToEntityDirection = gpuObjectToEntity / gpuObjectToEntityDistance;
      float3 originalUpDirection = getOriginalUpDirection(index, originalScale);
      float normalizedDistance = 1.0f - min(remap(gpuObjectToEntityDistance, 0.0f, range, 0.0f, 1.0f), 1.0f);
      float normalizedDistancePow = pow(normalizedDistance, rotation_pow);
      float angle = clamp(lerp(rotation_from, rotation_to, normalizedDistancePow), min_rotation, max_rotation);
      float3 axis = normalize(cross(originalUpDirection, gpuObjectToEntityDirection));
      float4 axisAngle = float4(axis, angle);
      return mul(getOrientation(axisAngle), originalOrientation);
    }

    void setMatrixToOriginal(int originalIndex, int newIndex)
    {
      gpuObjectsMatrices[newIndex + 0] = gpuObjectsMatrices[originalIndex + 0];
      gpuObjectsMatrices[newIndex + 1] = gpuObjectsMatrices[originalIndex + 1];
      gpuObjectsMatrices[newIndex + 2] = gpuObjectsMatrices[originalIndex + 2];
      gpuObjectsMatrices[newIndex + 3] = gpuObjectsMatrices[originalIndex + 3];
    }

    void setMatrix(int originalIndex, int newIndex, float3x3 rotationScale)
    {
      gpuObjectsMatrices[newIndex + 0] = float4(rotationScale[0], gpuObjectsMatrices[originalIndex + 0][3]);
      gpuObjectsMatrices[newIndex + 1] = float4(rotationScale[1], gpuObjectsMatrices[originalIndex + 1][3]);
      gpuObjectsMatrices[newIndex + 2] = float4(rotationScale[2], gpuObjectsMatrices[originalIndex + 2][3]);
      gpuObjectsMatrices[newIndex + 3] = gpuObjectsMatrices[originalIndex + 3];
    }

    [numthreads(DISPATCH_WARP_SIZE, 1, 1)]
    void update_matrices(uint thread_id : SV_DispatchThreadID)
    {
      if (thread_id >= count)
        return;
      int originalIndex = (buf_offset + thread_id) * ROWS_IN_MATRIX;
      int index = (distance_emitter_buf_offset + thread_id) * ROWS_IN_MATRIX;
      int decalIndex = (distance_emitter_decal_buf_offset + thread_id) * ROWS_IN_MATRIX;
      float3 originalPosition = getOriginalPosition(originalIndex);
      float3 gpuObjectToEntity = entity_position - originalPosition;
      float gpuObjectToEntityDistance = length(gpuObjectToEntity);
      if (gpuObjectToEntityDistance <= range)
      {
        float originalScale = getOriginalScale(originalIndex);
        float3x3 scale = getScale(originalScale, gpuObjectToEntityDistance);
        float3x3 originalOrientation = getOriginalOrientation(originalIndex, originalScale);
        float3x3 orientation = getOrientation(originalIndex, gpuObjectToEntity, gpuObjectToEntityDistance, originalScale, originalOrientation);
        float3x3 result = mul(orientation, scale);
        setMatrix(originalIndex, index, result);
        ##if gpu_objects_distance_affect_decal == yes
          setMatrix(originalIndex, decalIndex, mul(originalOrientation, scale));
        ##else
          setMatrixToOriginal(originalIndex, decalIndex);
        ##endif
      }
      else if(out_of_range == 1)
      {
        float originalScale = getOriginalScale(originalIndex);
        float3x3 scale = getScaleMatrix(originalScale * scale_from);
        float3x3 originalOrientation = getOriginalOrientation(originalIndex, originalScale);
        float3x3 result = mul(originalOrientation, scale);
        setMatrix(originalIndex, index, result);
        ##if gpu_objects_distance_affect_decal == yes
          setMatrix(originalIndex, decalIndex, result);
        ##else
          setMatrixToOriginal(originalIndex, decalIndex);
        ##endif
      }
      else
      {
        setMatrixToOriginal(originalIndex, index);
        setMatrixToOriginal(originalIndex, decalIndex);
      }
    }
  }

  compile("cs_5_0", "update_matrices");
}

shader gpu_objects_box_placer_cs
{
  (cs) {
    buf_offset@i1 = (gpu_objects_buffer_offset);
    count@i1 = (gpu_objects_matrices_count);
    scale_range@f2 = (gpu_objects_scale_rotate.x, gpu_objects_scale_rotate.y, 0, 0);
    placer_tm@f44 = gpu_objects_placer_tm;
    up_vector@f3 = gpu_objects_up_vector;
  }
  ADD_INSTANCE()
  RANDOM_UTILITY()
  hlsl(cs) {
    #include "gpuObjects/gpu_objects_const.hlsli"

    [numthreads(DISPATCH_WARP_SIZE, 1, 1)]
    void generate_matrices(uint thread_id : SV_DispatchThreadID)
    {
      if (thread_id >= count)
        return;
      int offset = (buf_offset + thread_id) * ROWS_IN_MATRIX;

      float3 randValues = get_3d_random_from_placer(thread_id, placer_tm);

      float3 localPos = randValues - 0.5;
      float3 worldPos = mul(float4(localPos, 1), placer_tm).xyz;
      float scale = lerp(scale_range.x, scale_range.y, randValues.z);

      float3 direction = dot(up_vector, up_vector) > 0 ? up_vector : float3(0, 1, 0);
      addInstance(worldPos, direction, randValues.z * 2 * PI, scale, offset);
    }
  }
  compile("cs_5_0", "generate_matrices");
}

shader gpu_objects_box_placer_gather_triangles_cs
{
  (cs)
  {
    mesh_offset@i1 = (gpu_objects_mesh_offset);
    max_triangles@i1 = (gpu_objects_max_triangles);
    min_triangle_size2sq@f1 = (gpu_objects_min_gathered_triangle_size * gpu_objects_min_gathered_triangle_size * 4.0, 0, 0, 0);
    up_vector_threshold@f4 = gpu_objects_up_vector;
    placer_tm@f44 = gpu_objects_placer_tm;
    meshes@buf = gpu_objects_geometry_meshes hlsl {
      #include "gpuObjects/gpu_objects_const.hlsli"
      StructuredBuffer<GeometryMesh> meshes@buf;
    }
    cutoff_ratio_sq@f1 = (gpu_objects_cutoff_ratio * gpu_objects_cutoff_ratio, 0, 0, 0);
  }

  ENABLE_ASSERT(cs)

  hlsl(cs) {
    #include "gpuObjects/gpu_objects_const.hlsli"

    RWStructuredBuffer<GeometryTriangle> triangles : register(u0);
    RWByteAddressBuffer counter : register(u1);
    ByteAddressBuffer indexBuf : register(t14);
    ByteAddressBuffer vertexBuf : register(t15);
    groupshared float areaSumDoubled[DISPATCH_WARP_SIZE];

    [numthreads(DISPATCH_WARP_SIZE, 1, 1)]
    void gather_triangles(uint thread_id : SV_GroupThreadID, uint group_id : SV_GroupID)
    {
      uint mesh_id = mesh_offset + group_id;
      uint start_index = structuredBufferAt(meshes, mesh_id).startIndex;
      uint num_faces = structuredBufferAt(meshes, mesh_id).numFaces;
      uint base_vertex = structuredBufferAt(meshes, mesh_id).baseVertex;
      uint stride = structuredBufferAt(meshes, mesh_id).stride;
      float3x4 mesh_tm = { structuredBufferAt(meshes, mesh_id).tmRow0, structuredBufferAt(meshes, mesh_id).tmRow1, structuredBufferAt(meshes, mesh_id).tmRow2 };

      areaSumDoubled[thread_id] = 0.0;
      for (uint face_id = thread_id; face_id < num_faces; face_id += DISPATCH_WARP_SIZE)
      {
        uint3 indexes;
        #define BYTE_PER_INDEX 2
        uint indexes_offset = ((start_index + face_id * 3) * BYTE_PER_INDEX);
        uint2 indexes_mem = loadBuffer2(indexBuf, indexes_offset & ~0x3); //48 bits of need indexes, other 16 not needed
        if (indexes_offset & 0x2) //first 16 not needed
          indexes = uint3(indexes_mem.x >> 16, indexes_mem.y & 0xffff, indexes_mem.y >> 16);
        else //last 16 not needed
          indexes = uint3(indexes_mem.x & 0xffff, indexes_mem.x >> 16, indexes_mem.y & 0xffff);
        indexes = (indexes + base_vertex) * stride; //assumption that stride is multiple by 4

        uint4 v1_n = loadBuffer4(vertexBuf, indexes.x);
        uint4 v2_n = loadBuffer4(vertexBuf, indexes.y);
        uint4 v3_n = loadBuffer4(vertexBuf, indexes.z);
        float3 v1 = asfloat(v1_n.xyz);
        float3 v2 = asfloat(v2_n.xyz);
        float3 v3 = asfloat(v3_n.xyz);

      ##if gpu_objects_cutoff_ratio == use_cutoff_ratio
        float3 v1v2 = v2 - v1;
        float3 v1v3 = v3 - v1;
        float3 v2v3 = v3 - v2;

        float v1v2_dist_sq = dot(v1v2, v1v2);
        float v1v3_dist_sq = dot(v1v3, v1v3);
        float v2v3_dist_sq = dot(v2v3, v2v3);

        float max_dist_sq = max(v1v2_dist_sq, max(v1v3_dist_sq, v2v3_dist_sq));
        float min_dist_sq = min(v1v2_dist_sq, min(v1v3_dist_sq, v2v3_dist_sq));
        if (max_dist_sq > min_dist_sq * cutoff_ratio_sq)
          continue;
      ##endif

        float3 area_vec = cross(v2 - v1, v3 - v1);
        float triangle_size2sq = dot(area_vec, area_vec);
        if (triangle_size2sq < min_triangle_size2sq)
          continue;

        //move vertices to placer bbox space
        v1 = mul(mesh_tm, float4(v1, 1));
        v2 = mul(mesh_tm, float4(v2, 1));
        v3 = mul(mesh_tm, float4(v3, 1));

        float3 e1 = v2 - v1;
        float3 e2 = v3 - v1;

        float3 worldE1 = mul(float4(e1, 0), placer_tm).xyz;
        float3 worldE2 = mul(float4(e2, 0), placer_tm).xyz;
        float3 normal = normalize(cross(worldE1, worldE2));
        float upDotNormal = abs(dot(up_vector_threshold.xyz, normal));
        if (upDotNormal > 1 - up_vector_threshold.w)
         continue;

        //We need to search all suitable X and Y from following inequalities
        // X >= 0, Y >= 0, X + Y <= 1
        // -0.5 <= v1 + X*e1 + Y*e2 <= 0.5 (we have 0.5 from bbox faces)
        //
        //The set of solutions should be a some polygon, and we are interested in it`s vertices

        float2 intersectionPoints[10];
        float2 intersectionPointsNext[10];
        int intersectionPointsNum = 3;
        intersectionPoints[0] = float2(0.0, 0.0);
        intersectionPoints[1] = float2(0.0, 1.0);
        intersectionPoints[2] = float2(1.0, 0.0);
        intersectionPoints[3] = intersectionPoints[0];

        const float EPS = 0.00001;
        e1 += (abs(e1) < EPS) * EPS;
        e2 += (abs(e2) < EPS) * EPS;

        float3 a = e1;
        float3 b = e2;
        float3 v = v1;
        UNROLL
        for (int k = 0; k < 3; ++k) //iterating for .x .y .z components in e1, e2 and v1
        {
          int intersectionPointsNumNext = 0;
          int i;
          for (i = 0; i < intersectionPointsNum; ++i)
          {
            float2 p1 = intersectionPoints[i];
            float2 p2 = intersectionPoints[i + 1];
            float x = p1.x;
            float c = v.x + x * a.x;
            float y1 = (-0.5 - c) / b.x;
            float y2 = (0.5 - c) / b.x;
            float2 d1 = float2(b.x, -a.x);
            float2 d2 = p2 - p1;
            c = d1.x / (d1.x * d2.y - d1.y * d2.x);
            float t1 = (y1 - p1.y) * c;
            float t2 = (y2 - p1.y) * c;
            float tmin = min(t1, t2);
            float tmax = max(t1, t2);

            if (tmax > 0 && tmin < 1)
            {
              float t = max(0.0, tmin);
              intersectionPointsNext[intersectionPointsNumNext] = p1 + d2 * t;
              intersectionPointsNumNext++;
              if (tmax < 1)
              {
                intersectionPointsNext[intersectionPointsNumNext] = p1 + d2 * tmax;
                intersectionPointsNumNext++;
              }
            }
          }
          intersectionPointsNum = 0;
          if (intersectionPointsNumNext > 2)
          {
            for (i = 0; i < intersectionPointsNumNext; ++i)
            {
              intersectionPoints[i] = intersectionPointsNext[i];
            }
            intersectionPointsNum = intersectionPointsNumNext;
            intersectionPoints[intersectionPointsNum] = intersectionPoints[0];
          }
          a = a.yzx;
          b = b.yzx;
          v = v.yzx;
        }

        float2 p = intersectionPoints[0];
        float3 p1 = v1 + p.x * e1 + p.y * e2;
        float3 worldP1 = mulPointTm(p1, placer_tm).xyz;
        int numTriangles = intersectionPointsNum - 2;
        if (numTriangles > 0)
        {
          uint at; counter.InterlockedAdd(TRIANGLES_COUNT * 4, uint(numTriangles), at);
          if (at + numTriangles > max_triangles)
            numTriangles = max_triangles - at;

          p = intersectionPoints[1];
          float3 p2 = v1 + p.x * e1 + p.y * e2;
          float3 p3;
          float3 edge1 = mulPointTm(p2, placer_tm).xyz - worldP1, edge2;
          for (int i = 0; i < numTriangles; ++i)
          {
            p3 = p2;
            edge2 = edge1;
            p = intersectionPoints[i + 2];
            p2 = v1 + p.x * e1 + p.y * e2;
            edge1 = mulPointTm(p2, placer_tm).xyz - worldP1;
            structuredBufferAt(triangles, at + i).v1v2.xyz = f32tof16(p1) | (f32tof16(p2)<<16);
            float area2 = length(cross(edge1, edge2));
            structuredBufferAt(triangles, at + i).areaDoubled = area2;
            structuredBufferAt(triangles, at + i).v3.xyz = f32tof16(p3);
            areaSumDoubled[thread_id] += area2;
          }
        }
      }
      for (uint i = DISPATCH_WARP_SIZE / 2; i > 0; i >>= 1)
      {
        GroupMemoryBarrierWithGroupSync();
        if (thread_id < i)
          areaSumDoubled[thread_id] += areaSumDoubled[thread_id + i];
      }
      if (thread_id == 0)
        counter.InterlockedAdd(TRIANGLES_AREA_SUM * 4, uint(areaSumDoubled[0] * TRIANGLE_AREA_MULTIPLIER));
    }
  }
  compile("cs_5_0", "gather_triangles");
}

shader gpu_objects_compute_terrain_objects_count_cs
{
  (cs)
  {
    placer_tm@f44 = gpu_objects_placer_tm;
    max_instance_count@i1 = gpu_objects_max_on_terrain_instance_count;
    y_min_max@f2 = gpu_objects_bbox_y_min_max;
  }
  hlsl(cs) {
    #define NO_GRADIENTS_IN_SHADER 1
  }
  INIT_WORLD_HEIGHTMAP_BASE(cs)
  USE_HEIGHTMAP_COMMON_BASE(cs)
  ON_TERRAIN_UTILITY()
  RANDOM_UTILITY()
  hlsl(cs)
  {
    #include "gpuObjects/gpu_objects_const.hlsli"

    RWByteAddressBuffer counter : register(u1);

    [numthreads(DISPATCH_WARP_SIZE, 1, 1)]
    void compute_terrain_objects_count(uint dtId : SV_DispatchThreadID)
    {
      if (dtId >= max_instance_count)
        return;

      float2 randValues = get_2d_random_from_placer(dtId, placer_tm);
      float3 worldPos = get_world_position(randValues, placer_tm);

      // this gives an approximate number of objects need to be reserved
      // but since the readback can cause a few frames delay, this check is not the same as during the gpu object filling
      if (y_min_max[0] <= worldPos.y && y_min_max[1] >= worldPos.y)
      {
        uint at;
        counter.InterlockedAdd(TERRAIN_OBJECTS_COUNT * 4, 1, at);
      }
    }
  }
  compile("cs_5_0", "compute_terrain_objects_count");
}

shader gpu_objects_on_terrain_geometry_placer_cs
{
  (cs)
  {
    gpu_objects_buffer_offset@i1 = (gpu_objects_buffer_offset);
    gpu_objects_on_rendinst_geometry_matrices_count@i1 = (gpu_objects_on_rendinst_geometry_matrices_count);
    count@i1 = (gpu_objects_on_terrain_geometry_matrices_count);
    placer_tm@f44 = gpu_objects_placer_tm;
    scale_range@f2 = (gpu_objects_scale_rotate.x, gpu_objects_scale_rotate.y, 0, 0);
    scale_radius@f3 = (gpu_objects_scale_radius.x, gpu_objects_scale_radius.y,
                       1.0 / gpu_objects_scale_radius.z, 0);
    y_min_max@f2 = gpu_objects_bbox_y_min_max;
    max_instance_count@i1 = gpu_objects_max_on_terrain_instance_count;
  }
  hlsl(cs) {
    #define NO_GRADIENTS_IN_SHADER 1
  }
  ADD_INSTANCE()
  INIT_WORLD_HEIGHTMAP_BASE(cs)
  USE_HEIGHTMAP_COMMON_BASE(cs)
  ON_TERRAIN_UTILITY()
  RANDOM_UTILITY()
  hlsl(cs)
  {
    #include "gpuObjects/gpu_objects_const.hlsli"

    RWByteAddressBuffer counter : register(u1);

    [numthreads(DISPATCH_WARP_SIZE, 1, 1)]
    void gather_matrices(uint dtId : SV_DispatchThreadID )
    {
      if (dtId >= uint(max_instance_count))
        return;

      float3 randValues = get_3d_random_from_placer(dtId, placer_tm);
      float3 worldPos = get_world_position(randValues.xy, placer_tm);

      if (y_min_max[0] <= worldPos.y && y_min_max[1] >= worldPos.y)
      {
        uint on_terrain_index;
        counter.InterlockedAdd(TERRAIN_INDEX * 4, 1, on_terrain_index);
        // this guarantees we don't put more objects into the buffer than its reserved area
        // (but we can still fill less than that, so we need to clear the buffer first)
        if (on_terrain_index >= uint(count))
          return;

        float scale = lerp(scale_range.x, scale_range.y, randValues.z);
        float distance = length(worldPos - placer_tm[3].xyz);
        scale *= lerp(scale_radius.x, scale_radius.y, saturate(distance * scale_radius.z));

        int offset = (int(gpu_objects_buffer_offset) + int(gpu_objects_on_rendinst_geometry_matrices_count) + int(on_terrain_index)) * ROWS_IN_MATRIX;
        float3 up = getWorldNormal(worldPos);
        const float EPS = 0.00001;
        uint seed = uint(dtId * (1.0f / (randValues.x + EPS)));
        float3 rndVec = get_3d_random_from_placer(seed, placer_tm);
        rndVec -= 0.5f;
        float3 right = normalize(rndVec - dot(rndVec, up) * up);
        float3 forward = cross(right, up);
        addInstance(worldPos, float3x3(right, up, forward), scale, offset);
      }
    }
  }
  compile("cs_5_0", "gather_matrices");
}

// we need to clear the terrain objects first, since not all of them are guaranteed to be inside the reserved buffer area
shader gpu_objects_clear_terrain_objects_cs
{
  (cs)
  {
    // only need to clear the area reserved strictly for terrain objects
    gpu_objects_buffer_offset@i1 = (gpu_objects_buffer_offset);
    gpu_objects_on_rendinst_geometry_matrices_count@i1 = (gpu_objects_on_rendinst_geometry_matrices_count);
    count@i1 = (gpu_objects_on_terrain_geometry_matrices_count);
  }
  ADD_INSTANCE()
  hlsl(cs)
  {
    #include "gpuObjects/gpu_objects_const.hlsli"

    [numthreads(DISPATCH_WARP_SIZE, 1, 1)]
    void clear_objects(uint dtId : SV_DispatchThreadID)
    {
      if (dtId >= uint(count))
        return;

      int offset = (int(gpu_objects_buffer_offset) + int(gpu_objects_on_rendinst_geometry_matrices_count) + int(dtId)) * ROWS_IN_MATRIX;
      addInstance((float3)NaN, (float3x3)NaN, NaN, offset);
    }
  }
  compile("cs_5_0", "clear_objects");
}

shader gpu_objects_remove_objects_cs
{
  (cs) {
    buf_offset@i1 = (gpu_objects_buffer_offset);
    count@i1 = (gpu_objects_on_terrain_geometry_matrices_count);
    rendinst_count@i1 = (gpu_objects_on_rendinst_geometry_matrices_count);
    box_min@f3 = gpu_objects_remove_box_min.xyz;
    box_max@f3 = gpu_objects_remove_box_max.xyz;
  }
  ADD_INSTANCE()
  hlsl(cs) {
    #include "gpuObjects/gpu_objects_const.hlsli"

    float3 getPosition(int index)
    {
      return float3(
        gpuObjectsMatrices[index + 0][3],
        gpuObjectsMatrices[index + 1][3],
        gpuObjectsMatrices[index + 2][3]
      );
    }

    bool testBbox(float3 v, float3 bottomLeft, float3 topRight)
    {
      const float EPS = 0.00001;
      float3 s = clamp(v, bottomLeft, topRight);
      return all(s-v < EPS);
    }

    [numthreads(DISPATCH_WARP_SIZE, 1, 1)]
    void remove_objects(uint thread_id : SV_DispatchThreadID)
    {
      if (thread_id >= uint(count+rendinst_count))
        return;

      const float3 extreme_pos = float3(-666666, -666666, -666666);

      int offset = (buf_offset + thread_id) * ROWS_IN_MATRIX;
      float3 position = getPosition(offset);
      if (testBbox(position, box_min, box_max))
        addInstance(extreme_pos, (float3x3)NaN, NaN, offset);
    }
  }
  compile("cs_5_0", "remove_objects");
}

shader gpu_objects_on_rendinst_geometry_placer_cs
{
  (cs) {
    buf_offset@i1 = (gpu_objects_buffer_offset);
    count@i1 = (gpu_objects_on_rendinst_geometry_matrices_count);
    max_triangles@i1 = (gpu_objects_max_triangles);
    placer_tm@f44 = gpu_objects_placer_tm;
    scale_range@f2 = (gpu_objects_scale_rotate.x, gpu_objects_scale_rotate.y, 0, 0);
    scale_radius@f3 = (gpu_objects_scale_radius.x, gpu_objects_scale_radius.y,
                       1.0 / gpu_objects_scale_radius.z, 0);
    up_vector@f3 = gpu_objects_up_vector;
    triangles@buf = gpu_objects_gathered_triangles hlsl {
      #include "gpuObjects/gpu_objects_const.hlsli"
      StructuredBuffer<GeometryTriangle> triangles@buf;
    }
    counter@buf = gpu_objects_counter hlsl { ByteAddressBuffer counter@buf; }
  }
  ENABLE_ASSERT(cs)
  ADD_INSTANCE()
  RANDOM_UTILITY()
  hlsl(cs) {
    [numthreads(DISPATCH_WARP_SIZE, 1, 1)]
    void gather_matrices(uint thread_id : SV_DispatchThreadID)
    {
      if (thread_id >= count)
        return;
      int offset = (buf_offset + thread_id) * ROWS_IN_MATRIX;

      float3 randValues = get_3d_random_uniform_from_placer(thread_id, placer_tm);

      uint num_faces = min((uint)max_triangles, loadBuffer(counter, TRIANGLES_COUNT * 4));
      float targetArea = structuredBufferAt(triangles, num_faces - 1).areaDoubled * randValues.z;
      uint left = 0, right = num_faces - 1;
      int numIterations = ceil(log2(num_faces));
      for (int i = 0; i < numIterations; ++i) //same as `while (left < right)`, but want avoid looping for sure
      {
        uint middle = (left + right) >> 1;
        float area = structuredBufferAt(triangles, middle).areaDoubled;
        if (area > targetArea)
          right = middle;
        else
          left = middle + 1;
      }
      uint face_id = left;

      float3 v1 = mulPointTm(f16tof32(structuredBufferAt(triangles, face_id).v1v2.xyz), placer_tm).xyz;
      float3 v2 = mulPointTm(f16tof32(structuredBufferAt(triangles, face_id).v1v2.xyz >> 16), placer_tm).xyz;
      float3 v3 = mulPointTm(f16tof32(structuredBufferAt(triangles, face_id).v3.xyz), placer_tm).xyz;

      float2 clippedRand = dot(randValues.xy, 1) > 1 ? 1 - randValues.xy : randValues.xy;
      float3 worldPos = (1 - dot(clippedRand, 1)) * v1 + clippedRand.x * v2 + clippedRand.y * v3;
      float3 normal = normalize(cross(v2 - v1, v3 - v1));
      const float EPS = 0.00001;
      randValues.xy = get_2d_random_uniform_from_placer(thread_id * (1.0f / (randValues.x + EPS)), placer_tm);
      float scale = lerp(scale_range.x, scale_range.y, randValues.x);
      float distance = length(worldPos - placer_tm[3].xyz);
      scale *= lerp(scale_radius.x, scale_radius.y, saturate(distance * scale_radius.z));

      bool use_up_vector = dot(up_vector, up_vector) > 0;
      if (!use_up_vector)
      {
        addInstance(worldPos, normal, randValues.y * 2 * PI, scale, offset);
      }
      else
      {
        float3 up = up_vector;
        float3 front = normalize(cross(up, normal));
        float3 right = cross(front, up);
        addInstance(worldPos, float3x3(right, up, -front), scale, offset);
      }

    }
  }
  compile("cs_5_0", "gather_matrices");
}

shader gpu_object_placer_draw_geometry_debug
{
  ENABLE_ASSERT(ps)
  z_test = false;
  z_write = false;
  blend_src = sa; blend_dst = isa;
  blend_asrc = 0; blend_adst = 1;
  hlsl {
    struct VsOutput
    {
      VS_OUT_POSITION(pos)
    };
  }
  (vs) {
    placer_tm@f44 = gpu_objects_placer_tm;
    max_triangles@i1 = (gpu_objects_max_triangles);
    viewProjTm@f44 = viewprojtm;
    triangles@buf = gpu_objects_gathered_triangles hlsl {
      #include "gpuObjects/gpu_objects_const.hlsli"
      StructuredBuffer<GeometryTriangle> triangles@buf;
    }
    counter@buf = gpu_objects_counter hlsl { ByteAddressBuffer counter@buf; }
  }
  (ps) { color@f4 = gpu_objects_debug_color }
  hlsl(vs) {

    VsOutput simple_vs(uint vertex_id : SV_VertexID)
    {
      VsOutput output;
      float3 localPos = 0;
      uint face_id = vertex_id / 3;
      if (face_id < min(loadBuffer(counter, TRIANGLES_COUNT * 4), (uint)max_triangles))
      {
        if (vertex_id % 3 == 0)
        {
          localPos = f16tof32(triangles[face_id].v1v2.xyz);
        }
        if (vertex_id % 3 == 1)
        {
          localPos = f16tof32(triangles[face_id].v1v2.xyz >> 16);
        }
        if (vertex_id % 3 == 2)
        {
          localPos = f16tof32(triangles[face_id].v3.xyz);
        }
      }
      float3 worldPos = mulPointTm(localPos, placer_tm).xyz;
      output.pos = mulPointTm(worldPos, viewProjTm);
      return output;
    }
  }
  compile("target_vs", "simple_vs");
  hlsl(ps) {
    float4 debug_ps(VsOutput input) : SV_Target0
    {
      return color;
    }
  }
  compile("target_ps", "debug_ps");
}