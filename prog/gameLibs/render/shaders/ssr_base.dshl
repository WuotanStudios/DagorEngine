include "shader_global.dshl"
include "reprojected_motion_vectors.dshl"
include "gbuffer.dshl"
include "viewVecVS.dshl"
include "monteCarlo.dshl"
include "ssr_common.dshl"
include "frustum.dshl"
include "alternate_reflections.dshl"
include "ssr_inc.dshl"
include "force_ignore_history.dshl"
include "hero_matrix_inc.dshl"
include "halfres_close_depth_with_normals.dshl"
include "motion_vectors_type.dshl"
include "ssr_common_use.dshl"
include_optional "ssr_env_resolve.dshl"

int ssr_quality = 1;
interval ssr_quality : low<1, medium<2, high<3, highest;

int ssr_alternate_reflections = 0;
interval ssr_alternate_reflections : no<1, yes;

texture ssr_target;
texture ssr_prev_target;
texture prev_downsampled_close_depth_tex;
texture prev_downsampled_normals;

float ssr_clamping_gamma = 1.0;
float ssr_neighborhood_bias_tight = 0.0;
float ssr_neighborhood_bias_wide = 0.05;
float ssr_neighborhood_velocity_difference_scale = 100;

float4 analytic_light_sphere_pos_r=(0,0,0,0);
float4 analytic_light_sphere_color=(1,0,0,1);

define_macro_if_not_defined SSR_ENV_RESOLVE(code)
  dont_render;
endmacro

define_macro_if_not_defined GET_TRANSLUCENT_ALTERNATE_REFLECTIONS(code)
  hlsl(code) {
    float4 get_translucent_alternate_reflections(float3 cameraToPoint, float3 R, float reflectionDistance) {return 0;}
  }
endmacro

define_macro_if_not_defined GET_PLANAR_REFLECTIONS(code)
hlsl(code) {
  void get_planar_reflections(inout half4 newTarget, inout float precision, float3 worldPos, float3 normal, float2 screenTC) {}
}
endmacro

macro INIT_TEXTURES(code)
  if (ssr_resolution == halfres) {
    INIT_HALF_RES_CLOSE_DEPTH(code)
    INIT_HALF_RES_CLOSE_DEPTH_NORMALS_TEX(code)
    hlsl(code) {
      #define src_depth_tex half_res_close_depth
      #define src_depth_tex_samplerstate half_res_close_depth_samplerstate
      #define src_normals_tex half_res_close_depth_normals

      #define ssr_depth half_res_close_depth
      #define ssr_depth_samplerstate half_res_close_depth_samplerstate

      #define downsampled_close_depth_tex half_res_close_depth
      #define downsampled_close_depth_tex_samplerstate half_res_close_depth_samplerstate
    }
  } else {
    (code) { normal_gbuf_read@tex2d = normal_gbuf; }
    INIT_READ_DEPTH_GBUFFER_BASE(code)
    INIT_READ_GBUFFER_MATERIAL(code)
    hlsl(code) {
      #define src_depth_tex depth_gbuf_read
      #define src_depth_tex_samplerstate depth_gbuf_read_samplerstate
      #define src_normals_tex normal_gbuf_read

      #define ssr_depth depth_gbuf_read
      #define ssr_depth_samplerstate depth_gbuf_read_samplerstate

      #define downsampled_close_depth_tex depth_gbuf_read
      #define downsampled_close_depth_tex_samplerstate depth_gbuf_read_samplerstate
    }
  }
  hlsl(code) {
    void unpack_material(uint2 texcoord, out half3 normal, out half linear_roughness, out half smoothness)
    {
      half4 normal_smoothness = texture2DAt(src_normals_tex, texcoord);
      normal = normalize(normal_smoothness.xyz * 2 - 1);
##if ssr_resolution == halfres
      smoothness = normal_smoothness.w;
##else
      smoothness = (half)texture2DAt(material_gbuf_read, texcoord).x;
##endif
      linear_roughness = linearSmoothnessToLinearRoughness(smoothness);
    }
  }
endmacro

float4 move_world_view_pos;
float ssr_camera_move_scale_for_miss_reprojection = 200.0;
float static_pixel_miss_reprojection_weight = 0.5;

macro SSR_BASE(code)
  (code) {
    prev_globtm_no_ofs_psf@f44 = { prev_globtm_no_ofs_psf_0, prev_globtm_no_ofs_psf_1, prev_globtm_no_ofs_psf_2, prev_globtm_no_ofs_psf_3 };
    world_view_pos@f4 = world_view_pos;
    ssr_world_view_pos@f4 = ssr_world_view_pos;
    SSRParams@f4 = (SSRParams.x, SSRParams.y, ssr_frameNo.z, ssr_frameNo.y);
    ssr_target_size@f4 = ssr_target_size;
  }
endmacro

macro SSR_REPROJECTION(code)
  hlsl(code) {
    ##if prev_downsampled_close_depth_tex != NULL
      #define USE_PREV_DOWNSAMPLED_CLOSE_DEPTH 1
      ##if prev_downsampled_normals != NULL
        #define USE_PREV_DOWNSAMPLED_NORMALS 1
      ##endif
    ##endif
  }
  //VIEW_VEC_OPTIMIZED(code)
  INIT_HERO_MATRIX(code)
  USE_HERO_MATRIX(code)
  INIT_REPROJECTED_MOTION_VECTORS(code)
  USE_REPROJECTED_MOTION_VECTORS(code)
  MOTION_VECTORS_TYPE(code)
  USE_IGNORE_HISTORY(code)
  local float4 downsampled_close_depth_tex_dim = get_dimensions(downsampled_close_depth_tex, 0);
  local float4 prev_downsampled_close_depth_tex_dim = get_dimensions(prev_downsampled_close_depth_tex, 0);

  (code) {
    ssr_prev_target@smp2d = ssr_prev_target;

    prev_camera_translation@f1 = (move_world_view_pos.w);

    prev_downsampled_close_depth_tex@smp2d = prev_downsampled_close_depth_tex;
    prev_downsampled_normals@tex2d = prev_downsampled_normals;
    prev_downsampled_close_depth_tex_target_size@f4 = (prev_downsampled_close_depth_tex_dim.x, prev_downsampled_close_depth_tex_dim.y, 1/max(1, prev_downsampled_close_depth_tex_dim.x), 1/max(1, prev_downsampled_close_depth_tex_dim.y));
    scaled_prev_camera_translation@f1 = (move_world_view_pos.w * ssr_camera_move_scale_for_miss_reprojection);
    static_pixel_miss_reprojection_weight@f2 = (static_pixel_miss_reprojection_weight, 1.0 - static_pixel_miss_reprojection_weight);
  }
  hlsl(code) {
    #ifndef MOTION_VECTORS_TEXTURE
      #define MOTION_VECTORS_TEXTURE motion_gbuf
    #endif
    #ifndef CHECK_VALID_MOTION_VECTOR
      #define CHECK_VALID_MOTION_VECTOR(a) (a.x != 0)
    #endif
  }
endmacro

macro SSR_COMMON(code)
  ENABLE_ASSERT(code)
  SETUP_SSR(code)
  VIEW_VEC_OPTIMIZED(code)
  INIT_TEXTURES(code)
  SSR_BASE(code)
  SSR_REPROJECTION(code)
  GET_PLANAR_REFLECTIONS(code)

  (code) {
    prev_frame_tex@smp2d = prev_frame_tex;

    //prev_zn_zfar@f4 = (prev_zn_zfar.x, prev_zn_zfar.y, 1/prev_zn_zfar.y, (prev_zn_zfar.y-prev_zn_zfar.x)/(prev_zn_zfar.x * prev_zn_zfar.y));
    globtm_no_ofs_psf@f44 = { globtm_no_ofs_psf_0, globtm_no_ofs_psf_1, globtm_no_ofs_psf_2, globtm_no_ofs_psf_3 };

    water_level@f1 = water_level;
    linearize_z_bias_threshold@f1 = (zn_zfar.x*0.01/(zn_zfar.y-zn_zfar.x),0,0,0);

    encode_depth@f4 = (-zn_zfar.x/(zn_zfar.y-zn_zfar.x), zn_zfar.x * zn_zfar.y/(zn_zfar.y-zn_zfar.x),
                      zn_zfar.x/(zn_zfar.x * zn_zfar.y), (zn_zfar.y-zn_zfar.x)/(zn_zfar.x * zn_zfar.y));

    analytic_light_sphere_pos_r@f4 = analytic_light_sphere_pos_r;
    analytic_light_sphere_color@f4 = analytic_light_sphere_color;
    downsampled_depth_mip_count@f1 = (downsampled_close_depth_tex_dim.w);
    lowres_rt_params@f2 = downsampled_close_depth_tex_dim; //Far and Close depth are the same size
  }

  hlsl(code) {
    #define HAS_linear_biased_comparison_of_rawdepth 1
    bool linear_biased_comparison_of_rawdepth(float position_z, float surface_z)
    {
      return (surface_z - 1.01*position_z) > linearize_z_bias_threshold;
    }
    ##if ssr_quality == highest
      #define SSR_QUALITY 3
    ##elif ssr_quality == high
      #define SSR_QUALITY 2
    ##else
      #define SSR_QUALITY 1
    ##endif

    ##if ssr_quality != low
      #define SSR_FFX
      #define FFX_SSSR_INVERTED_DEPTH_RANGE
      #include "../../../3rdPartyLibs/ssr/ffx_sssr.h"
    ##endif

    #define PREV_HERO_SPHERE 1
  }
endmacro


macro SSR_DISOCCLUSION(code)
  hlsl(code) {
    #include <smootherstep.hlsl>
    half get_ssr_disocclusion_weight_sample(half3 current_normal, half current_roughness, float2 historyUV, float prev_linear_depth, inout half4 historySample)
    {
      #if USE_PREV_DOWNSAMPLED_CLOSE_DEPTH
        // instead of exact uv = floor(historyCrdf)/prev_downsampled_close_depth_tex_target_size.xy
        // we rely on prev_downsampled_close_depth_tex_samplerstate being point sample
        float2 uv = historyUV;
        float2 historyCrdf = historyUV*prev_downsampled_close_depth_tex_target_size.xy - 0.5;
        float2 floorCrd = floor(historyCrdf);
        float2 gatherUV = floorCrd*prev_downsampled_close_depth_tex_target_size.zw + prev_downsampled_close_depth_tex_target_size.zw;
        float2 fractCrd = historyCrdf - floorCrd;
        float4 depths = prev_downsampled_close_depth_tex.GatherRed(prev_downsampled_close_depth_tex_samplerstate, gatherUV).wzxy;
        //uv = uv - 0.5*prev_downsampled_close_depth_tex_target_size.zw;// re-center uv
        float4 linearDepths = linearize_z4(depths, prev_zn_zfar.zw);
        float4 depthDiff = abs(linearDepths - prev_linear_depth);
        float threshold = 0.1*prev_linear_depth;
        half4 weights = depthDiff < threshold;
        if (any(abs(historyUV*2-1) >= 1) || !any(weights)) // bilinear filtering is valid
        {
          historySample = 0;
          return 0;
        }
        half4 lowResR = ssr_prev_target.GatherRed(prev_downsampled_close_depth_tex_samplerstate, gatherUV).wzxy;
        half4 lowResG = ssr_prev_target.GatherGreen(prev_downsampled_close_depth_tex_samplerstate, gatherUV).wzxy;
        half4 lowResB = ssr_prev_target.GatherBlue(prev_downsampled_close_depth_tex_samplerstate, gatherUV).wzxy;
        half4 lowResA = ssr_prev_target.GatherAlpha(prev_downsampled_close_depth_tex_samplerstate, gatherUV).wzxy;
        #if USE_PREV_DOWNSAMPLED_NORMALS
          //ssr there was not computed
          half4 lowresSmoothness = prev_downsampled_normals.GatherAlpha(prev_downsampled_close_depth_tex_samplerstate, gatherUV).wzxy;
          weights *= lowresSmoothness > half(CALC_SSR_SMOOTHNESS_THRESHOLD);
        #endif

        //half weight = saturate(dot(weights, 1)); // ignore bilateral weights
        #ifdef MOTION_TO_PREV_JITTERED_UV_OFS
          fractCrd = saturate(fractCrd - MOTION_TO_PREV_JITTERED_UV_OFS*prev_downsampled_close_depth_tex_target_size.xy);
        #endif

        half4 bil;
        bil.xy = fractCrd;
        bil.zw = 1.h - bil.xy;
        weights *= half4(bil.zx*bil.w, bil.zx*bil.y) + 1e-4h;
        weights *= exp2(depthDiff*(-5.f/threshold));
        half sumWeight = dot(weights, 1.h);
        weights *= rcp(sumWeight);
        bool weight = sumWeight > 1e-8h;
        historySample = weight ? half4(dot(lowResR, weights), dot(lowResG, weights), dot(lowResB, weights), dot(lowResA, weights)) : 0;
        return weight;
      #else
        historySample = tex2Dlod(ssr_prev_target, float4(historyUV, 0, 0));
        return 1;
      #endif
    }
    #if USE_PREV_DOWNSAMPLED_NORMALS && USE_PREV_DOWNSAMPLED_CLOSE_DEPTH
    half4 unpack_normal_roughness(half4 packed_normal)
    {
      packed_normal.xyz = (packed_normal.xyz*2 - 1);
      packed_normal.xyz = normalize(packed_normal.xyz);
      packed_normal.w = linearSmoothnessToLinearRoughness(packed_normal.w);
      return packed_normal;
    }
    half historyNormalWeight(half4 sample_normal_roughness, half3 normal, half roughness)
    {
      //we can use higher smoothness history in lower smoothness (to a certain degree), but not visa verse
      return sample_normal_roughness.w < half(CALC_SSR_ROUGHNESS_THRESHOLD) ? pow2(dot(normal, sample_normal_roughness.xyz)*saturate(1.0 - abs(roughness - sample_normal_roughness.w))) : 0;
      //return pow2(dot(normal, sample_normal_smoothness.xyz)*saturate(1.0 - (sample_normal_smoothness.w - smoothness)));
    }
    half4 historyNormalWeights(half4 normalW, half roughness)
    {
      float sigma = lerp(0, -150, (1 - roughness));
      half4 w = exp2(sigma*saturate(1.0 - normalW));
      const float threshold = 0.2;
      return saturate(w*(1./(1-threshold)) - threshold*(1./(1-threshold)));
    }
    half get_ssr_disocclusion_weight_sample_virtual(half3 current_normal, half current_roughness, float2 historyUV, float prev_linear_depth, inout half4 historySample)
    {
      // instead of exact uv = floor(historyCrdf)/prev_downsampled_close_depth_tex_target_size.xy
      // we rely on prev_downsampled_close_depth_tex_samplerstate being point sample
      float2 uv = historyUV;
      float2 historyCrdf = historyUV*prev_downsampled_close_depth_tex_target_size.xy - 0.5;
      float2 floorCrd = floor(historyCrdf);
      float2 gatherUV = floorCrd*prev_downsampled_close_depth_tex_target_size.zw + prev_downsampled_close_depth_tex_target_size.zw;
      float2 fractCrd = historyCrdf - floorCrd;
      float4 depths = prev_downsampled_close_depth_tex.GatherRed(prev_downsampled_close_depth_tex_samplerstate, gatherUV).wzxy;
      //uv = uv - 0.5*prev_downsampled_close_depth_tex_target_size.zw;// re-center uv
      float4 linearDepths = linearize_z4(depths, prev_zn_zfar.zw);
      float4 depthDiff = abs(linearDepths - prev_linear_depth);
      float threshold = 0.1*prev_linear_depth;
      half4 mask = depthDiff < threshold;
      historySample = 0;
      if (any(abs(historyUV*2-1) >= 1) || !any(mask)) // bilinear filtering is valid
        return 0;
      half4 weights = mask;
      half4 normalslt = unpack_normal_roughness(prev_downsampled_normals.SampleLevel(prev_downsampled_close_depth_tex_samplerstate, gatherUV, 0));
      half4 normalsrt = unpack_normal_roughness(prev_downsampled_normals.SampleLevel(prev_downsampled_close_depth_tex_samplerstate, gatherUV, 0, int2(1,0)));
      half4 normalslb = unpack_normal_roughness(prev_downsampled_normals.SampleLevel(prev_downsampled_close_depth_tex_samplerstate, gatherUV, 0, int2(0,1)));
      half4 normalsrb = unpack_normal_roughness(prev_downsampled_normals.SampleLevel(prev_downsampled_close_depth_tex_samplerstate, gatherUV, 0, int2(1,1)));
      half4 normalW = half4(historyNormalWeight(normalslt, current_normal, current_roughness), historyNormalWeight(normalsrt, current_normal, current_roughness), historyNormalWeight(normalslb, current_normal, current_roughness), historyNormalWeight(normalsrb, current_normal, current_roughness));
      normalW = historyNormalWeights(normalW, current_roughness);
      weights *= normalW;
      half weight = saturate(dot(weights, 1)); // ignore bilateral weights

      half4 bil;
      #ifdef MOTION_TO_PREV_JITTERED_UV_OFS
        fractCrd = saturate(fractCrd - MOTION_TO_PREV_JITTERED_UV_OFS*prev_downsampled_close_depth_tex_target_size.xy);
      #endif
      bil.xy = fractCrd;
      bil.zw = 1.h - bil.xy;
      weights *= half4(bil.zx*bil.w, bil.zx*bil.y) + 1e-4h;
      weights *= exp2(depthDiff*(-5.f/threshold));
      float sumW = dot(weights, 1.h);
      if (sumW <= 1e-6)
        return 0;
      weights /= sumW;

      half4 lowResR = ssr_prev_target.GatherRed(prev_downsampled_close_depth_tex_samplerstate, gatherUV).wzxy;
      half4 lowResG = ssr_prev_target.GatherGreen(prev_downsampled_close_depth_tex_samplerstate, gatherUV).wzxy;
      half4 lowResB = ssr_prev_target.GatherBlue(prev_downsampled_close_depth_tex_samplerstate, gatherUV).wzxy;
      half4 lowResA = ssr_prev_target.GatherAlpha(prev_downsampled_close_depth_tex_samplerstate, gatherUV).wzxy;
      historySample = float4(dot(lowResR, weights), dot(lowResG, weights), dot(lowResB, weights), dot(lowResA, weights));
      return weight;
    }
    #endif

    half get_ssr_disocclusion_weight_sample_duo(half rough_virtual_weight, half inf_refl_virtual_weight, half3 current_normal, half current_roughness, float2 historyVirtualUV, float prev_linear_depth, inout half4 historySample, inout half historyWeight)
    {
      #if 0
        #if USE_PREV_DOWNSAMPLED_NORMALS && USE_PREV_DOWNSAMPLED_CLOSE_DEPTH
          //virtualWeight = 0;
          //return get_ssr_disocclusion_weight_sample(reproject_alphaScale, currentAlpha, current_normal, current_roughness, historyVirtualUV, prev_linear_depth, historySample);
          return historyWeight = get_ssr_disocclusion_weight_sample_virtual(current_normal, current_roughness, historyVirtualUV, prev_linear_depth, historySample);
        #else
          return 0;
        #endif
      #else
      #if USE_PREV_DOWNSAMPLED_NORMALS && USE_PREV_DOWNSAMPLED_CLOSE_DEPTH
      half4 historyVirtualSample;
      half virtualWeight = get_ssr_disocclusion_weight_sample_virtual(current_normal, current_roughness, historyVirtualUV, prev_linear_depth, historyVirtualSample);
      //virtualWeight = virtualWeight > 0.01;
      virtualWeight *= rough_virtual_weight;
      historyWeight *= (1.0-pow4(virtualWeight));
      //virtualWeight *= inf_refl_virtual_weight;
      half totalW = historyWeight + virtualWeight;
      half invTotalW = rcp(max(1e-6h, totalW));
      half ret = max(virtualWeight, historyWeight);
      historyWeight *= invTotalW;
      virtualWeight *= invTotalW;
      historySample = historySample*historyWeight + historyVirtualSample*virtualWeight;
      historyWeight = ret;
      return virtualWeight;
      #else
      return 0;
      #endif
      #endif
    }
    //old code
    bool get_ssr_disocclusion_weight_sample(half3 current_normal, half current_roughness, float2 historyUV, float prev_linear_depth, bool validate_normal, inout half4 historySample)
    {
    #if USE_PREV_DOWNSAMPLED_NORMALS && USE_PREV_DOWNSAMPLED_CLOSE_DEPTH
      if (validate_normal)
        return get_ssr_disocclusion_weight_sample_virtual(current_normal, current_roughness, historyUV, prev_linear_depth, historySample) > 0;
      else
    #endif
        return get_ssr_disocclusion_weight_sample(current_normal, current_roughness, historyUV, prev_linear_depth, historySample) > 0;

    }
  }
endmacro

macro SSR_GET_TEMPORAL_REPROJECTION_DUO(code)
  SSR_DISOCCLUSION(code)
  hlsl(code) {
    half get_ssr_reprojection_with_weight(inout half relativePixelTranslation, inout half neighboorhoodVariance, float3 cameraToPoint, float2 curViewTc, half3 normal, half linear_roughness, float reflectionDistance, float w, inout half4 prevFrame, out half virtualWeight)
    {
      relativePixelTranslation = saturate(scaled_prev_camera_translation/w);
      float disocclusionWeightAtten = 1;
      float3 prevViewVec = cameraToPoint;

      #if SSR_MOTIONREPROJ != 1
        bool isHero = apply_hero_matrix(curViewTc, prevViewVec);
      #endif

      float4 prevClipExactPos = mul(float4(prevViewVec, 1), prev_globtm_no_ofs_psf);
      float3 prevScreenExact = prevClipExactPos.w > 1e-6 ? prevClipExactPos.xyz/prevClipExactPos.w : float3(2,2,0);
      float2 oldExactUV = prevScreenExact.xy*float2(0.5,-0.5) + float2(0.5,0.5);
      float3 oldExactUVZ = float3(oldExactUV, clamp(linearize_z(prevScreenExact.z, prev_zn_zfar.zw), prev_zn_zfar.x, prev_zn_zfar.y));

      float rayLength = length(cameraToPoint);
      half linearRoughnessIsRoughW = get_is_rough_surface_param(linear_roughness);
      float reflectionDistanceUse = lerp(reflectionDistance, 0, linearRoughnessIsRoughW);
      float4 prevReflClip = mul(float4(prevViewVec*(reflectionDistanceUse + rayLength)/rayLength, 1), prev_globtm_no_ofs_psf);
      float3 prevReflScreen = prevReflClip.w > 1e-6 ? prevReflClip.xyz/prevReflClip.w : float3(2,2,0);
      float2 prevVirtualUV = prevReflScreen.xy*float2(0.5,-0.5) + float2(0.5,0.5);
      float3 prevVirtualUVZ = float3(prevVirtualUV, clamp(linearize_z(prevReflScreen.z, prev_zn_zfar.zw), prev_zn_zfar.x, prev_zn_zfar.y));


      float weight = 1;
      float3 reflecting_surface_3d_motion;

      #if SSR_MOTIONREPROJ == 1
        motion_type surface_motion = tex2Dlod(MOTION_VECTORS_TEXTURE, float4(curViewTc,0,0)).motion_attr;
        #ifdef MOTION_TO_PREV_JITTERED_UV_OFS
          surface_motion.xy += MOTION_TO_PREV_JITTERED_UV_OFS;
        #endif
        #if MOTION_VECTORS_3D
          reflecting_surface_3d_motion = surface_motion;
        #else
          reflecting_surface_3d_motion = float3(surface_motion, oldExactUVZ.z - w);
        #endif
        if (!CHECK_VALID_MOTION_VECTOR(reflecting_surface_3d_motion))
          reflecting_surface_3d_motion = oldExactUVZ - float3(curViewTc, w);

        //motion_type reflect_motion = tex2Dlod(MOTION_VECTORS_TEXTURE, float4(cameraHitUVZ.xy,0,0)).motion_attr;
        //if (CHECK_VALID_MOTION_VECTOR(reflect_motion) && all(abs(cameraHitUVZ.xy*2-1) < 1))
        //  prevUVZ = cameraHitUVZ + reflect_motion;
        bool staticPixel = all(abs(curViewTc + reflecting_surface_3d_motion.xy - oldExactUVZ.xy) < 0.5*ssr_target_size.zw);
      #else
        reflecting_surface_3d_motion = oldExactUVZ - float3(curViewTc, w);
        bool staticPixel = !isHero;
        if (isHero)
          reflecting_surface_3d_motion.z = 0;
      #endif
      float2 useUV = curViewTc + reflecting_surface_3d_motion.xy;
      float currentPosToPrevW = w + reflecting_surface_3d_motion.z;
      {

        //&& any(abs(prevVirtualUV.xy - useUV.xy) > ssr_target_size.zw)
        weight = get_ssr_disocclusion_weight_sample(normal, linear_roughness, useUV, currentPosToPrevW, prevFrame);
        virtualWeight = 0;
        float invDepth = rcp(w);
        half scaledMovement = saturate(scaled_prev_camera_translation*invDepth);
        half virtualMulW = (1-linearRoughnessIsRoughW)*(1-neighboorhoodVariance)*scaledMovement;
        half virtualMulPostW = lerp(1, exp2(-reflectionDistance*invDepth), virtualMulW);

        if (staticPixel && virtualMulW > 1e-4 && all(abs(prevVirtualUV.xy*2-1) < 1))
        {
          virtualWeight = get_ssr_disocclusion_weight_sample_duo(virtualMulW, virtualMulPostW, normal, linear_roughness, prevVirtualUV.xy, currentPosToPrevW, prevFrame, weight);
        }
        relativePixelTranslation = staticPixel ? relativePixelTranslation : relativePixelTranslation*saturate(length(reflecting_surface_3d_motion.xy)*100);
      }
      neighboorhoodVariance = lerp(1, neighboorhoodVariance, weight);
      return weight;
    }
  }
endmacro
