include "shader_global.dshl"
include "viewVecVS.dshl"
include "gbuffer.dshl"
include "contact_shadows.dshl"
include "ssao_use.dshl"
include "get_additional_shadows.dshl"
include "get_additional_ao.dshl"
include "ssao_reprojection.dshl"
include "halfres_close_depth_with_normals.dshl"

float gtao_cutoff_radius_mul = 1.68;
float gtao_cutoff_smoothness = 0.8;
float gtao_world_radius = 1.666;
float gtao_screen_radius = 0; // Portion of screen height. 0 by default to preserve old behavior (world space constant radius).
float gtao_max_pixel_radius = 64;
float gtao_half_hfov_tan = 1.0;
float gtao_temporal_directions = 0;
float gtao_temporal_offset = 0;
int4 temporal_shadow_frame;
float4 hero_cockpit_vec = (0, 0, 0, 0);
texture raw_gtao_tex;
texture gtao_tex;
texture gtao_prev_tex;
float4 globtm_no_ofs_psf_0;
float4 globtm_no_ofs_psf_1;
float4 globtm_no_ofs_psf_2;
float4 globtm_no_ofs_psf_3;

float contact_shadow_min_len = 0.25;

hlsl{
  float decode_depth(float depth, float2 decode_depth)
  {
    return linearize_z(depth,decode_depth);
  }
}

int gtao_tex_size;
interval gtao_tex_size: low<300, mid<400, high;

macro GTAO_MAIN_CORE(code)
  supports none;
  supports global_const_block;

  local float4 halfResTexSize = get_dimensions(downsampled_close_depth_tex, 0);
  local float pixelToTan = 2.0 * gtao_half_hfov_tan / halfResTexSize.x;
  local float gtaoSamples = 4;
  (code) {
    world_view_pos@f3 = world_view_pos;
    gtao_texel_size@f4 = (1.0 / max(1, halfResTexSize.x), 1.0 / max(1, halfResTexSize.y), halfResTexSize.xy);
    gtao_temporal_directions@f1 = (gtao_temporal_directions);
    gtao_temporal_offset@f1 = (gtao_temporal_offset);
    gtao_half_fov_tan_xy@f2 = (gtao_half_hfov_tan, gtao_half_hfov_tan * halfResTexSize.y / max(1, halfResTexSize.x));
    hero_cockpit_vec@f4 = hero_cockpit_vec;

    local_view_x@f3 = local_view_x;
    local_view_y@f3 = local_view_y;
    local_view_z@f3 = local_view_z;

    shadow_frame@f1 = temporal_shadow_frame.x;
    contact_shadow_len@f1 = contact_shadow_len;
    contact_shadow_min_len@f1 = contact_shadow_min_len;
    contact_shadow_step_offset@f1 = contact_shadow_step_offset;

    viewProjectionMatrixNoOfs@f44 = { globtm_no_ofs_psf_0, globtm_no_ofs_psf_1, globtm_no_ofs_psf_2, globtm_no_ofs_psf_3 };

    encode_depth@f4 = (-zn_zfar.x / (zn_zfar.y - zn_zfar.x), zn_zfar.x * zn_zfar.y / (zn_zfar.y - zn_zfar.x),
      zn_zfar.x / (zn_zfar.x * zn_zfar.y), (zn_zfar.y - zn_zfar.x) / (zn_zfar.x * zn_zfar.y));

    gtao_cutoff_radius_mul@f1 = gtao_cutoff_radius_mul;
    gtao_cutoff_smoothness@f1 = gtao_cutoff_smoothness;
    gtao_world_radius@f1 = gtao_world_radius;

    tan_to_stride@f1 = 1.0 / (pixelToTan * gtaoSamples);
    depth_to_radius_limit_max_pixel_radius@f1 = gtao_max_pixel_radius * pixelToTan;
    depth_to_radius_limit_min_screen_radius@f1 = gtao_screen_radius * halfResTexSize.y * pixelToTan;
  }

  INIT_HALF_RES_CLOSE_DEPTH(code)
  INIT_HALF_RES_CLOSE_DEPTH_NORMALS(code)
  INIT_ZNZFAR_STAGE(code)

  CONTACT_SHADOWS_BASE(code)
  APPLY_ADDITIONAL_AO(code)
  APPLY_ADDITIONAL_SHADOWS(code)
  USE_PACK_SSAO_BASE(code)
  INIT_READ_IS_HERO_COCKPIT(code)
  USE_READ_IS_HERO_COCKPIT(code)
  ENABLE_ASSERT(code)

  hlsl(code) {

    half3 GetCameraVec(half2 uv)
    {
      return half3(half2(uv.x * -2.0 + 1.0, uv.y * 2.0 - 1.0) * gtao_half_fov_tan_xy, 1.0);
    }

    half3 GetPosition(half2 uv)
    {
      float sceneDepth = decode_depth(tex2Dlod(half_res_close_depth, float4(uv.xy, 0, 0)).x, zn_zfar.zw);
      return GetCameraVec(uv) * sceneDepth;
    }

    inline half GTAO_Offsets(half2 uv)
    {
      int2 position = (int2)(uv * gtao_texel_size.zw);
      return 0.25 * (half)((position.y - position.x) & 3);
    }

    inline half GTAO_Directions(half2 uv)
    {
      // directions use a 4x4 pattern that contains a full rotation in each row and is shifted left/right between rows
      int2 position = (int2)(uv * gtao_texel_size.zw);
      return (1.0 / 16.0) * ((((position.x + position.y) & 3) << 2) + (position.x & 3));
    }

    #define SSAO_SAMPLES 4
    #define SSAO_THICKNESSMIX 0.2
    #define PI_HALF 1.5707963267948966192313216916398

    void SliceSample(half2 tc_base, half2 aoDir, int i, float targetMip, half3 ray, half3 v,
      float cutoff_radius, float inv_falloff_range, inout float closest)
    {
      half2 uv = clamp(tc_base + aoDir * i,float2(0.001,0.001),float2(0.999,0.999));
      float rawDepth = tex2Dlod(half_res_close_depth, float4(uv.xy, 0, targetMip)).x;

      ##if (maybe(screen_mask_enabled))
        if (rawDepth >= 1)
          return;
      ##endif

      float depth = decode_depth(rawDepth, zn_zfar.zw);
      // Vector from current pixel to current slice sample
      half3 p = GetCameraVec(uv) * depth - ray;
      float pLen = length(p);
      // Cosine of the horizon angle of the current sample
      float current = dot(v, p) / pLen;
      // Linear falloff for samples that are too far away from current pixel
      float falloff = saturate((cutoff_radius - pLen) * inv_falloff_range);
      FLATTEN
      if (current > closest)
        closest = lerp(closest, current, falloff);
      // Helps avoid overdarkening from thin objects
      closest = lerp(closest, current, SSAO_THICKNESSMIX * falloff);
    }

    float GTAOFastAcos(float x)
    {
      float res = -0.156583 * abs(x) + PI_HALF;
      res *= sqrt(1.0 - abs(x));
      return x >= 0 ? res : PI - res;
    }

    float IntegrateArc(float h1, float h2, float n)
    {
      float cosN = cos(n);
      float sinN = sin(n);
      return 0.25 * (-cos(2.0 * h1 - n) + cosN + 2.0 * h1 * sinN - cos(2.0 * h2 - n) + cosN + 2.0 * h2 * sinN);
    }

    half gtao(half2 tc_original, half3 worldNormal)
    {

      // Vector from camera to the current pixel's position
      float sceneDepth = decode_depth(tex2Dlod(half_res_close_depth, float4(tc_original.xy, 0, 0)).x, zn_zfar.zw);
      half3 ray = GetCameraVec(tc_original) * sceneDepth;

      float3 normal = normalize(float3(
        -dot(local_view_x, worldNormal),
        -dot(local_view_y, worldNormal),
         dot(local_view_z, worldNormal)
      ));

      float worldRadiusLimitMaxPixelRadius = sceneDepth * depth_to_radius_limit_max_pixel_radius;
      float worldRadiusLimitMinScreenRadius = sceneDepth * depth_to_radius_limit_min_screen_radius;

      // World space radius is limited below by screen-constant radius (avoid AO disappearing on far objects, if needed)
      // and above by max-stride-related one to not thrash GPU cache
      float worldRadius = min(worldRadiusLimitMaxPixelRadius, max(gtao_world_radius, worldRadiusLimitMinScreenRadius));
      float stride = worldRadius / sceneDepth * tan_to_stride;

      // Compute cutoff relative to world space radius at current depth
      float cutoffRadius = max(gtao_world_radius, worldRadiusLimitMinScreenRadius) * gtao_cutoff_radius_mul;
      float invFalloffRange = 1.0 / (cutoffRadius * gtao_cutoff_smoothness);
      half2 dirMult = gtao_texel_size.xy * stride;

      // Get the view vector (normalized vector from pixel to camera)
      half3 v = normalize(-ray);

      // Calculate slice direction from pixel's position
      float noiseDirection = GTAO_Directions(tc_original);
      float angle = (noiseDirection + gtao_temporal_directions) * PI * 2;
      half2 aoDir = dirMult * half2(sin(angle), cos(angle));

      // Project world space normal to the slice plane
      half3 toDir = GetCameraVec(tc_original + aoDir);
      half3 planeNormal = normalize(cross(v, -toDir));
      half3 projectedNormal = normal - planeNormal * dot(normal, planeNormal);

      // Calculate angle n between view vector and projected normal vector
      half3 projectedDir = normalize(normalize(toDir) + v);
      float n = GTAOFastAcos(dot(-projectedDir, normalize(projectedNormal))) - PI_HALF;

      // Init variables
      float c1 = -1.0;
      float c2 = -1.0;

      half noiseOffset = GTAO_Offsets(tc_original) + gtao_temporal_offset;
      half2 tc_base = tc_original + aoDir * (0.125 * noiseOffset - 0.375);

      // Mipmapping is disabled as it is causing severe visual errors. See https://youtrack.gaijin.ru/issue/38-7328
      const float targetMip = 0.0;

      // Find horizons of the slice
      int i;
      for (i = -1; i >= -SSAO_SAMPLES; i--)
      {
        SliceSample(tc_base, aoDir, i, targetMip, ray, v, cutoffRadius, invFalloffRange, c1);
      }
      for (i = 1; i <= SSAO_SAMPLES; i++)
      {
        SliceSample(tc_base, aoDir, i, targetMip, ray, v, cutoffRadius, invFalloffRange, c2);
      }

      // Finalize
      float h1a = -GTAOFastAcos(c1);
      float h2a = GTAOFastAcos(c2);

      // Clamp horizons to the normal hemisphere
      float h1 = n + max(h1a - n, -PI_HALF);
      float h2 = n + min(h2a - n, PI_HALF);

      float visibility = IntegrateArc(h1, h2, n) * length(projectedNormal);

      return visibility;
    }

    SSAO_TYPE gtao_resolve(float2 screenpos, float2 texcoord, float3 viewVect)
    {
      SSAO_TYPE gtao_value;
      #if _HARDWARE_METAL && !SHADER_COMPILER_DXC
        #define GTAO_VALUE_X gtao_value
      #else
        #define GTAO_VALUE_X gtao_value.x
      #endif
      float rawDepth = tex2Dlod(half_res_close_depth, float4(texcoord, 0, 0)).x;
      BRANCH
      if (rawDepth <= 0 || rawDepth >= 1)//why not just rawDepth <= 0
        return 1;

      float depth1 = decode_depth(rawDepth, zn_zfar.zw);
      half3 wsNormal = normalize(tex2Dlod(half_res_close_depth_normals, float4(texcoord, 0, 0)).xyz * 2 - 1);
      float3 cameraToPoint = depth1 * viewVect;
      float w = depth1;
      float3 pixelPos = cameraToPoint + world_view_pos;

      GTAO_VALUE_X = gtao(texcoord, wsNormal);
      GTAO_VALUE_X = getAdditionalAmbientOcclusion(float(GTAO_VALUE_X), pixelPos, wsNormal, texcoord);

      ##if maybe(ssao_contact_shadows)
      {
        ##if gtao_tex_size == low
          #define shadow_steps 8
        ##elif gtao_tex_size == mid
          #define shadow_steps 16
        ##else
          #define shadow_steps 24
        ##endif

        float dither = interleavedGradientNoiseFramed(screenpos, shadow_frame);//if we have temporal aa
        float2 hitUV;
        half shadow_strength = pow2(saturate(dot(wsNormal, from_sun_direction.xyz)*-2 + sqrt(0.5)));
        BRANCH
        if (shadow_strength>0)
        {
          gtao_value.CONTACT_SHADOWS_ATTR = contactShadowRayCast(
            half_res_close_depth, half_res_close_depth_samplerstate,
            cameraToPoint, -from_sun_direction,
            max(w * contact_shadow_len, min(contact_shadow_min_len, w)),
            shadow_steps, dither + contact_shadow_step_offset * saturate(pow2(dot(wsNormal, -from_sun_direction))),
            projectionMatrix, w, viewProjectionMatrixNoOfs, hitUV
          );

          gtao_value.CONTACT_SHADOWS_ATTR = lerp (1, gtao_value.CONTACT_SHADOWS_ATTR, shadow_strength);
        }
        else
          gtao_value.CONTACT_SHADOWS_ATTR = 1;

        gtao_value.CONTACT_SHADOWS_ATTR = getAdditionalShadow(gtao_value.CONTACT_SHADOWS_ATTR, cameraToPoint, wsNormal, texcoord, w);
      }
      ##endif


      ##if gbuffer_has_hero_cockpit
        BRANCH
        if (isGbufferHeroCockpit(texcoord))
        {
          float fade = saturate(dot(float4(pixelPos, 1), hero_cockpit_vec));
          GTAO_VALUE_X = lerp(GTAO_VALUE_X, 1.0f, fade);
          ##if maybe(ssao_contact_shadows)
            gtao_value.CONTACT_SHADOWS_ATTR = lerp(gtao_value.CONTACT_SHADOWS_ATTR, 1.0f, fade);
          ##endif
        }
      ##endif

      ##if maybe(ssao_wsao)
        gtao_value.WSAO_ATTR = getWsao(cameraToPoint + world_view_pos, wsNormal);
      ##endif
      return setSSAO(gtao_value);
    }
  }
endmacro

shader gtao_main
{
  z_write = false;
  z_test = false;
  cull_mode = none;
  color_write = rgb;

  USE_AND_INIT_VIEW_VEC_VS()
  POSTFX_VS_TEXCOORD_VIEWVEC(0, texcoord, viewVect)

  GTAO_MAIN_CORE(ps)

  hlsl(ps) {
    SSAO_TYPE gtao_resolve_ps(VsOutput input HW_USE_SCREEN_POS) : SV_Target0
    {
      return gtao_resolve(GET_SCREEN_POS(input.pos).xy, input.texcoord.xy, input.viewVect.xyz);
    }
  }
  compile("target_ps", "gtao_resolve_ps");
}

shader gtao_main_cs
{
  hlsl {
    #define NO_GRADIENTS_IN_SHADER 1
  }

  ENABLE_ASSERT(cs)
  USE_AND_INIT_VIEW_VEC_CS()
  GTAO_MAIN_CORE(cs)

  hlsl(cs) {
    RWTexture2D<SSAO_TYPE> gtao_target : register(u0);

    [numthreads( 8, 8, 1 )]
    void gtao_resolve_cs(uint3 DTid : SV_DispatchThreadID)
    {
      if (any(DTid.xy >= gtao_texel_size.zw))
        return;

      float2 pixelCenter = DTid.xy + 0.5;
      float2 texcoord    = pixelCenter * gtao_texel_size.xy;
      float3 worldDir    = lerp_view_vec(texcoord);
      SSAO_TYPE ao = gtao_resolve(pixelCenter, texcoord, worldDir);
      texture2DAt(gtao_target, DTid.xy) = ao;
    }
  }
  compile("target_cs", "gtao_resolve_cs");
}

macro GTAO_SPATIAL_CORE(code)
  supports none;

  INIT_ZNZFAR_STAGE(code)
  INIT_HALF_RES_CLOSE_DEPTH(code)
  INIT_VIEW_VEC_STAGE(code)
  USE_VIEW_VEC_STAGE(code)
  ENABLE_ASSERT(code)

  local float4 halfResTexSize = get_dimensions(raw_gtao_tex, 0);
  (code) {
    raw_gtao_tex@smp2d = raw_gtao_tex;
    gtao_texel_size@f4 = (1.0 / halfResTexSize.xy, halfResTexSize.xy);
  }

  hlsl(code) {

    SSAO_TYPE gtao_spatial(float2 texcoord)
    {
      // Get the depth of the "center" sample - this reference depth is used to weight the other samples
      float rawDepth = tex2Dlod(half_res_close_depth, float4(texcoord, 0, 0)).r;

      BRANCH
      if (rawDepth >= 1 || rawDepth <= 0)
        return 1;

      float depth = decode_depth(rawDepth, zn_zfar.zw);
      float weightsSpatial = 0.0;
      SSAO_TYPE ao = 0.0;

      UNROLL
      for (int y = 0; y < 4; y++)
      {
        UNROLL
        for (int x = 0; x < 4; x++)
        {
          // Weight each sample by its distance from the refrence depth - but also scale the weight by 1/10 of the
          // reference depth so that the further from the camera the samples are, the higher the tolerance for depth
          // differences is.
          float2 uv = texcoord + float2(x - 2, y - 2) * gtao_texel_size.xy;
          float localDepth = decode_depth(tex2Dlod(half_res_close_depth, float4(uv, 0, 0)).r, zn_zfar.zw);
          float localWeight = max(0.0, 1.0 - abs(localDepth - depth) / (depth * 0.1));
          weightsSpatial += localWeight;
          ao += tex2Dlod(raw_gtao_tex, float4(uv, 0, 0)).SSAO_ATTRS * localWeight;
        }
      }
      ao /= weightsSpatial;

      return ao;
    }
  }
endmacro

shader gtao_spatial
{
  z_write = false;
  z_test = false;
  cull_mode = none;
  color_write = rgb;

  POSTFX_VS_TEXCOORD(0, texcoord)
  GTAO_SPATIAL_CORE(ps)

  hlsl(ps) {

    SSAO_TYPE gtao_spatial_ps(VsOutput input) : SV_Target0
    {
      return gtao_spatial(input.texcoord);
    }
  }

  compile("target_ps", "gtao_spatial_ps");
}

shader gtao_spatial_cs
{
  ENABLE_ASSERT(cs)
  GTAO_SPATIAL_CORE(cs)

  hlsl(cs) {
    RWTexture2D<SSAO_TYPE> gtao_target : register(u0);

    [numthreads( 8, 8, 1 )]
    void gtao_spatial_cs(uint3 DTid : SV_DispatchThreadID)
    {
      if (any(DTid.xy >= gtao_texel_size.zw))
        return;

      float2 pixelCenter = DTid.xy + 0.5;
      float2 texcoord    = pixelCenter * gtao_texel_size.xy;
      SSAO_TYPE ao = gtao_spatial(texcoord);
      texture2DAt(gtao_target, DTid.xy) = ao;
    }
  }

  compile("target_cs", "gtao_spatial_cs");
}

macro GTAO_TEMPORAL_CORE(code)
  supports none;

  INIT_ZNZFAR_STAGE(code)
  SSAO_REPROJECTION(code, gtao_prev_tex)
  INIT_HALF_RES_CLOSE_DEPTH(code)
  INIT_VIEW_VEC_STAGE(code)
  USE_VIEW_VEC_STAGE(code)
  ENABLE_ASSERT(code)

  local float4 halfResTexSize = get_dimensions(gtao_tex, 0);
  (code) {
    gtao_tex@smp2d = gtao_tex;
    gtao_texel_size@f4 = (1.0 / halfResTexSize.xy, halfResTexSize.xy);
  }

  hlsl(code) {

    SSAO_TYPE gtao_temporal(int2 pixel)
    {
      // Reconstruct position from depth
      // Note that the position is relative to the camera position (not an absolute world space position)
      float3 viewVec = lerp_view_vec((pixel.xy + 0.5) * gtao_texel_size.xy);
      float rawDepth = texelFetch(half_res_close_depth, pixel, 0).r;
      float2 texcoord  = (pixel.xy + 0.4999) * gtao_texel_size.xy;

      BRANCH
      if (rawDepth >= 1 || rawDepth <= 0)
        return 1;

      float depth = decode_depth(rawDepth, zn_zfar.zw);
      float3 cameraToPoint = viewVec * depth;
      float neighborWeights = 0;

      SSAO_TYPE ao = tex2Dlod(gtao_tex, float4(texcoord, 0, 0)).SSAO_ATTRS;

      // Get neighborhood
      SSAO_TYPE minAo = ao, maxAo = ao;
      UNROLL for (int y = -1; y <= 1; y++)
      {
        UNROLL for (int x = -1; x <= 1; x++)
        {
          if (x != 0 || y != 0)
          {
            // Sample neighbor AO
            SSAO_TYPE neighborAo = gtao_tex.SampleLevel(half_res_close_depth_samplerstate, texcoord, 0, int2(x, y)).SSAO_ATTRS;

            // Blend neighbor AO to center AO if neighbor depth is too different from center depth
            float neighborDepth = decode_depth(half_res_close_depth.SampleLevel(half_res_close_depth_samplerstate, texcoord, 0, int2(x,y)).r, zn_zfar.zw);
            //float neighborDepth = decode_depth(texelFetch(half_res_close_depth, pixel + int2(x,y), 0).r, zn_zfar.zw);
            float neighborWeight = saturate(1.0 - abs(neighborDepth - depth) / (depth * 0.1));
            neighborWeights += neighborWeight;
            neighborAo = lerp(ao, neighborAo, neighborWeight);

            // Adjust min and max values found in neighborhood
            minAo = min(minAo, neighborAo);
            maxAo = max(maxAo, neighborAo);
          }
        }
      }
      neighborWeights = neighborWeights*1./8;
      minAo = lerp(0, minAo, neighborWeights);
      maxAo = lerp(1, maxAo, neighborWeights);

      reproject_ssao_with_neighborhood(ao, minAo, maxAo, cameraToPoint, texcoord, rawDepth);

      return ao;
    }
  }
endmacro

shader gtao_temporal
{
  z_write = false;
  z_test = false;
  cull_mode = none;
  color_write = rgb;

  POSTFX_VS(0)
  GTAO_TEMPORAL_CORE(ps)

  hlsl(ps) {

    SSAO_TYPE gtao_temporal_ps(VsOutput input HW_USE_SCREEN_POS) : SV_Target0
    {
      float4 pos = GET_SCREEN_POS(input.pos);
      return gtao_temporal(int2(pos.xy));
    }
  }

  compile("target_ps", "gtao_temporal_ps");
}

shader gtao_temporal_cs
{
  ENABLE_ASSERT(cs)
  GTAO_TEMPORAL_CORE(cs)

  hlsl(cs) {
    RWTexture2D<SSAO_TYPE> gtao_target : register(u0);

    [numthreads( 8, 8, 1 )]
    void gtao_temporal_cs(uint3 DTid : SV_DispatchThreadID)
    {
      if (any(DTid.xy >= gtao_texel_size.zw))
        return;

      SSAO_TYPE ao = gtao_temporal(DTid.xy);
      texture2DAt(gtao_target, DTid.xy) = ao;
    }
  }

  compile("target_cs", "gtao_temporal_cs");
}
