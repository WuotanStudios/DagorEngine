include "taa_inc.dshl"
include "ssao_use.dshl"
include "reprojected_motion_vectors.dshl"
include "force_ignore_history.dshl"
include "motion_vector_access.dshl"

texture prev_downsampled_motion_vectors_tex;

float ssao_reprojection_neighborhood_bias_tight = 0.0;
float ssao_reprojection_neighborhood_bias_wide = 0.05;
float ssao_dissocclusion_depth_threshold = 0.05;
float ssao_reprojection_neighborhood_velocity_difference_scale = 100;
texture prev_downsampled_close_depth_tex;

macro SSAO_REPROJECTION(stage, prev_tex_name)
local float4 prev_downsampled_close_depth_tex_dim = get_dimensions(prev_downsampled_close_depth_tex, 0);
(stage) {
  ssao_prev_tex@smp2d = prev_tex_name;
  prev_downsampled_close_depth_tex@smp2d = prev_downsampled_close_depth_tex;
  prev_downsampled_motion_vectors_tex@smp2d = prev_downsampled_motion_vectors_tex;

  ssao_dissocclusion_depth_threshold@f1 = ssao_dissocclusion_depth_threshold;
  prev_downsampled_close_depth_tex_target_size@f4 = (prev_downsampled_close_depth_tex_dim.x, prev_downsampled_close_depth_tex_dim.y, 1/max(1, prev_downsampled_close_depth_tex_dim.x), 1/max(1, prev_downsampled_close_depth_tex_dim.y));
  neighborhood_params@f3 = (ssao_reprojection_neighborhood_bias_tight,
                            ssao_reprojection_neighborhood_bias_wide,
                            ssao_reprojection_neighborhood_velocity_difference_scale,
                            0);
}


hlsl(stage) {
  #define neighborhood_bias_tight neighborhood_params.x
  #define neighborhood_bias_wide neighborhood_params.y
  #define neighborhood_velocity_difference_scale neighborhood_params.z
}

INIT_REPROJECTED_MOTION_VECTORS(stage)
INIT_FETCH_MOTION_VECTOR(stage, downsampled)
USE_FETCH_MOTION_VECTOR(stage, downsampled)

USE_IGNORE_HISTORY(stage)

hlsl(stage) {
##if in_editor_assume == yes
#define FIX_DISCONTINUTIES 0
##else
#define FIX_DISCONTINUTIES 1
#define DIFFERENCE_CLAMPING 1
##endif
}

hlsl(stage) {
  #include <fp16_aware_lerp.hlsl>

  void get_ssao_disocclusion_weight(float3 historyUVZ, inout SSAO_TYPE historySample, inout float newFrameWeight)
  {
#if FIX_DISCONTINUTIES
    float2 historyCrdf = historyUVZ.xy * prev_downsampled_close_depth_tex_target_size.xy - 0.5;
    float2 floorCrd = floor(historyCrdf);
    float2 gatherUV = floorCrd*prev_downsampled_close_depth_tex_target_size.zw + prev_downsampled_close_depth_tex_target_size.zw;
    float2 fractCrd = historyCrdf - floorCrd;
    float4 depths = prev_downsampled_close_depth_tex.GatherRed(prev_downsampled_close_depth_tex_samplerstate, gatherUV).wzxy;
    float4 linearDepths = linearize_z4(depths, prev_zn_zfar.zw);
    float4 depthDiff = abs(linearDepths - historyUVZ.z);
    float threshold = ssao_dissocclusion_depth_threshold*historyUVZ.z;
    bool4 mask = depthDiff < threshold;

    if (!any(mask))
    {
      newFrameWeight = 1;
      return;
    }

    float4 bil = float4(fractCrd, 1 - fractCrd);
    float4 upsampleWeights = float4(bil.zx * bil.w, bil.zx * bil.y);
    float4 spatialWeights = exp(-depthDiff * (5.0 / threshold));
    float4 weights = (spatialWeights * upsampleWeights + 1e-4) * float4(mask);
    weights /= dot(weights, 1.0);

    //float2 uv = (floor(historyCrdf) + 0.5)*prev_downsampled_close_depth_tex_target_size.zw;//todo: one madd
    //we need to use same sampler and same uv, otherwise they can diverge
    float2 uv = gatherUV;
    historySample.x = dot(ssao_prev_tex.GatherRed(prev_downsampled_close_depth_tex_samplerstate, uv).wzxy, weights);

    #if SSAO_HAS_GREEN
    historySample.y = dot(ssao_prev_tex.GatherGreen(prev_downsampled_close_depth_tex_samplerstate, uv).wzxy, weights);
    #endif

    #if SSAO_HAS_BLUE
    historySample.z = dot(ssao_prev_tex.GatherBlue(prev_downsampled_close_depth_tex_samplerstate, uv).wzxy, weights);
    #endif
#else
    historySample = tex2Dlod(ssao_prev_tex, float4(historyUVZ.xy, 0, 0)).SSAO_ATTRS;
#endif
  }

  void reproject_ssao(inout SSAO_TYPE ssao, float3 cameraToOrigin, float2 screenTC, float depth)
  {
    float3 motionVector = fetch_motion_vector(screenTC, depth);
    float3 historyUVZ = float3(screenTC, linearize_z(depth, zn_zfar.zw)) + motionVector;

    float newFrameWeight = 0.07;
    SSAO_TYPE ssaoHistory = 1;
    get_ssao_disocclusion_weight(historyUVZ, ssaoHistory, newFrameWeight);

    //if previous history is invalid or current pixel is inside safe margin (filter) and previous was not
    newFrameWeight = any(abs(historyUVZ.xy * 2 - 1) >= 1) ? 1 : newFrameWeight;
    newFrameWeight = any(abs(screenTC * 2 - 1) < 0.99 && abs(historyUVZ.xy * 2 - 1) >= 0.99) ? saturate(newFrameWeight + 0.5) : newFrameWeight;


#if DIFFERENCE_CLAMPING
    #define VALUE_CLAMP_RANGE 0.5f
    #define VALUE_CLAMP_OFFSET 0.5f
    SSAO_TYPE diff = ssao - ssaoHistory;
    SSAO_TYPE valueClampFactor = saturate(diff * (1.0f / VALUE_CLAMP_RANGE) - VALUE_CLAMP_OFFSET);
    SSAO_TYPE newFrameWeightSSAO = newFrameWeight;
    newFrameWeightSSAO = 1 - (1.0f - valueClampFactor)*(1-newFrameWeightSSAO);
#else
    float newFrameWeightSSAO = newFrameWeight;
#endif
    ssao = fp16_aware_lerp(ssaoHistory, ssao, newFrameWeightSSAO, 1/0.03);
    //ssao = lerp(ssao, historySample, historyWeight);
  }

  float get_velocity_weight(float2 current_velocity, float2 history_velocity)
  {
    float2 diff = current_velocity - history_velocity;
    return saturate((abs(diff.x) + abs(diff.y)) * neighborhood_velocity_difference_scale);
  }

  void reproject_ssao_with_neighborhood(inout SSAO_TYPE ssao, SSAO_TYPE min_ao, SSAO_TYPE max_ao, float3 eye_to_point, float2 uv, float depth)
  {
    if (force_ignore_history == 1)
      return;

    float3 mv = fetch_motion_vector(uv, depth);
    float3 historyUVZ = float3(uv, linearize_z(depth, zn_zfar.zw)) + mv;
    //historyUV = uv;

    SSAO_TYPE ssaoHistory = 1;
    float newFrameWeight = 0;
    get_ssao_disocclusion_weight(historyUVZ, ssaoHistory, newFrameWeight);

    newFrameWeight = any(abs(historyUVZ.xy * 2 - 1) >= 1) ? 1 : newFrameWeight;
    newFrameWeight = any(abs(uv * 2 - 1) < 0.99 && abs(historyUVZ.xy * 2 - 1) >= 0.99) ? saturate(newFrameWeight + 0.5) : newFrameWeight;

    // Neighborhood clamp
    {
      ##if prev_downsampled_motion_vectors_tex != NULL
        // Velocity weighting if motion vectors history is available
        float2 currentVelocity = mv.xy;
        float2 rawHistoryVelocity = tex2Dlod(prev_downsampled_motion_vectors_tex, float4(historyUVZ.xy, 0, 0)).rg;
        float2 historyVelocity = rawHistoryVelocity;
        float velocityWeight = get_velocity_weight(currentVelocity, historyVelocity);
        float neighborhoodBiasWeight = velocityWeight;
      ##else
        // Use disocclusion for neighborhood tightening if motion vectors history is not available
        float neighborhoodBiasWeight = newFrameWeight;
      ##endif
      float neighborhoodBias = lerp(neighborhood_bias_wide, neighborhood_bias_tight, neighborhoodBiasWeight);
      min_ao = saturate(min_ao - neighborhoodBias);
      max_ao = saturate(max_ao + neighborhoodBias);
      ssaoHistory = clamp(ssaoHistory, min_ao, max_ao);
    }

    ssao = fp16_aware_lerp(ssaoHistory, ssao, saturate(newFrameWeight + 0.07), 1/0.03);
  }
}
endmacro