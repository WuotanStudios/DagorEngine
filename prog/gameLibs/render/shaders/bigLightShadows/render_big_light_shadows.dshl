include "shader_global.dshl"
include "viewVecVS.dshl"
include "gbuffer.dshl"
include "contact_shadows.dshl"
include "depth_above.dshl"
include "dagi_reflections.dshl"
include "motion_vector_access.dshl"


float4 globtm_no_ofs_psf_0;
float4 globtm_no_ofs_psf_1;
float4 globtm_no_ofs_psf_2;
float4 globtm_no_ofs_psf_3;
float4 big_light_pos_rad_0;
float4 big_light_pos_rad_1;
float4 big_light_pos_rad_2;
float4 big_light_pos_rad_3;

float big_light_min_shadow_len = 1.5;

float4 prev_view_vecLT;
float4 prev_view_vecRT;
float4 prev_view_vecLB;
float4 move_world_view_pos;

texture prev_downsampled_close_depth_tex;
texture ssao_prev_tex;

shader render_big_light_shadows
{
  supports none;
  z_write = false;
  z_test = false;
  cull_mode = none;

  USE_AND_INIT_VIEW_VEC_VS()
  POSTFX_VS_TEXCOORD_VIEWVEC(0, texcoord, viewVect)
  INIT_DEPTH_ABOVE(ps, blurred_depth)
  USE_DEPTH_ABOVE_TC(ps)
  //GET_REFLECTIONS_FROM_GI(ps)
  RAY_CAST_VOXELS_CASCADE(ps)

  (ps) {
    world_view_pos@f3 = world_view_pos;
    downsampled_close_depth_tex@smp2d = downsampled_close_depth_tex;//downsampled_close_depth_tex;
    //downsampled_normals@smp2d = downsampled_normals;
    //blurred_depth@smp2d = blurred_depth;

    shadow_frame@f1 = shadow_frame;
    contact_shadow_len@f1 = contact_shadow_len;

    viewProjectionMatrixNoOfs@f44 = { globtm_no_ofs_psf_0, globtm_no_ofs_psf_1, globtm_no_ofs_psf_2, globtm_no_ofs_psf_3 };

    big_light_pos_rads@f4[] = {
      big_light_pos_rad_0,
      big_light_pos_rad_1,
      big_light_pos_rad_2,
      big_light_pos_rad_3
    };

    big_light_min_shadow_len@f1 = big_light_min_shadow_len;
  }

  INIT_ZNZFAR()
  hlsl(ps) {
    #define OMNI_CONTACT_SHADOWS 1
  }

  CONTACT_SHADOWS()

  hlsl(ps) {
    ##if scene_voxels_alpha != NULL
    void voxel_conesampled_shadow_cascade(uint cascade, inout half result, inout float3 worldPos, float3 wdir, inout float len, float maxDist, float threshold=0.05)
    {
      float2 dd = get_box_intersect_cascade(cascade, worldPos, wdir);
      float cascadeSize = 2.*getSceneVoxelSize(cascade).x;
      if (dd.x >= -cascadeSize || dd.y < cascadeSize)//either outside cascade or not intersect it
        return;
      float cStep = getSceneVoxelStep(cascade);//getSceneVoxelSize(cascade).x*0.95;//todo: mul can be removed
      wdir *= cStep;
      float3 coordF = sceneWorldPosToCoordF(worldPos, cascade);
      float3 coordStepF = sceneWorldPosToCoordMoveF(wdir, cascade);

      //float lenTo = min(dd.y+len, maxDist);
      //for (; len < lenTo; len += cStep)
      int to = int(min(dd.y-cascadeSize, maxDist-len)/cStep), i = 0;
      for (; i<to; ++i)//for(int) loops seem to perform faster, than while loops
      {
        //if (any(coordF<0) || any(coordF>=VOXEL_RESOLUTION))
        //  return false;
        float3 wrappedTc = sceneVoxelsCoordToTc(coordF, cascade);
        half alpha = sampleVoxelsAlpha(wrappedTc, 0);
        result *= 1-alpha;
        BRANCH
        if (result<threshold)
          break;
        coordF += coordStepF;
      }
      worldPos = sceneCoordFToWorldPos(coordF, cascade);
      len += cStep*i;
    }
    float voxel_conesampled_shadow(float3 worldPos, float3 wdir, inout float len, float maxLen, float threshold=0.02)
    {
      uint minCascade = 0;
      float minCascadeSize = getSceneVoxelSize(minCascade).x;
      //float3 startPos = worldPos + worldNormal*minCascadeSize*3 + minCascadeSize*wdir;//skip 3 voxels + step out 1 voxel from normal
      float3 startPos = worldPos + (2*minCascadeSize+0.4)*wdir;//skip 2 voxels + fixed offset
      float shadow  = 1;
      voxel_conesampled_shadow_cascade(minCascade, shadow, startPos, wdir, len, max(maxLen/16, 2), threshold);
      if (shadow > threshold)
      {
        minCascade = 1;
        float cascadeSize = 2*getSceneVoxelSize(minCascade).x;
        if (len < cascadeSize)
          startPos += cascadeSize*wdir;
        voxel_conesampled_shadow_cascade(minCascade, shadow, startPos, wdir, len, maxLen/4, threshold);
        if (shadow > threshold)
        {
          minCascade = 2;
          float cascadeSize = 2*getSceneVoxelSize(minCascade).x;
          if (len < cascadeSize)
            startPos += cascadeSize*wdir;
          voxel_conesampled_shadow_cascade(minCascade, shadow, startPos, wdir, len, maxLen, threshold);
        }
      }
      shadow*=shadow;
      return shadow;
    }
    ##else
    float voxel_conesampled_shadow(float3 worldPos, float3 wdir, inout float len, float maxLen, float threshold=0.02){return 1;}
    ##endif

    float get_big_light_shadow(float2 scrpos, float3 viewVect, float w, float3 cameraToPoint, float3 worldPos, float3 worldNormal, float3 lightPos, float light_radius)
    {
      float3 lightToPoint = lightPos - worldPos;
      float distToLight = length(lightToPoint);
      if (distToLight > light_radius)
        return 0;//?? no light, but not nesessarily shadow
      float3 lightDir = lightToPoint*max(1e-6, rcp(distToLight));
      float2 hitUV;
      float dither = interleavedGradientNoiseFramed(scrpos.xy, floor(shadow_frame));//if we have temporal aa
      float shadow = 1;
      float len = 0, maxLen = 32;
      shadow = voxel_conesampled_shadow(worldPos, lightDir, len, maxLen);
      if (lightDir.y > 0 && shadow>0.01)
      {
        uint hsteps = 16;
        float stepSize = clamp(distToLight/hsteps,0.25,2);
        float dist = stepSize*0.5+dither;
        float3 rayDir = lightDir;
        float3 startPos = worldPos + len*rayDir;
        rayDir = normalize(rayDir + float3(0.01*((floor(scrpos.xy)%2)*2-1),0).xzy);
        //startPos.xz += 0.03*((floor(scrpos.xy)%2)*2-1);///world_to_depth_ao.x;
        for (uint i = 0; i < hsteps; ++i, dist+=stepSize, stepSize*=1.15)
        {
          float3 rayPos = startPos + dist*rayDir;
          float vignette_effect;
          float3 tc = getWorldBlurredDepthTC(rayPos, vignette_effect);
          float rayHeightmap = decode_depth_above(tex3Dlod(blurred_depth, float4(tc, 0)).x);
          if (vignette_effect<0.99 && rayHeightmap - 0.25/dist > rayPos.y)// && rayHeightmap < rayPos.y + 2 + dist)//disocclusion
          {
            //shadow *= exp2(-0.1*dist);
            shadow *= exp2(4*(rayPos.y - (rayHeightmap - 0.25/dist)));
            //shadow *= 1-exp2(min(0, 0.05*rcp(lightDir.y)*((rayPos.y + 1 + dist)-rayHeightmap)));//disocclusion
            if (shadow < 0.01)
            {
              shadow = 0;
              break;
            }
          }
        }
      }
      float contactShadow = 1;
      if (shadow>0.01)
        contactShadow = contactShadowRayCast(
            downsampled_close_depth_tex, downsampled_close_depth_tex_samplerstate,
            cameraToPoint,
            lightDir, max(w*0.3, big_light_min_shadow_len), 20, dither-0.5, projectionMatrix, w, viewProjectionMatrixNoOfs, hitUV);
      return shadow*contactShadow;
    }

    float4 big_lights_render(VsOutput input HW_USE_SCREEN_POS) : SV_Target0
    {
      float4 scrpos = GET_SCREEN_POS(input.pos);
      float2 tc = input.texcoord.xy;
      float rawDepth = tex2Dlod(downsampled_close_depth_tex, float4(tc, 0, 0)).x;
      if (rawDepth == 0)
        return 1;
      float w = linearize_z(rawDepth, zn_zfar.zw);
      float3 viewVect = input.viewVect;
      float4 ret;
      float3 cameraPos = w * viewVect;
      //float3 normal = tex2Dlod(downsampled_normals, float4(tc, 0,0)).xyz*2-1;
      float3 normal = normalize(cross(ddx(cameraPos), ddy(cameraPos)));
      ret.x=get_big_light_shadow(scrpos.xy, input.viewVect, w, cameraPos, cameraPos + world_view_pos, normal, big_light_pos_rads[0].xyz, big_light_pos_rads[0].w);
      ret.y=get_big_light_shadow(scrpos.xy, input.viewVect, w, cameraPos, cameraPos + world_view_pos, normal, big_light_pos_rads[1].xyz, big_light_pos_rads[1].w);
      ret.z=get_big_light_shadow(scrpos.xy, input.viewVect, w, cameraPos, cameraPos + world_view_pos, normal, big_light_pos_rads[2].xyz, big_light_pos_rads[2].w);
      ret.w=get_big_light_shadow(scrpos.xy, input.viewVect, w, cameraPos, cameraPos + world_view_pos, normal, big_light_pos_rads[3].xyz, big_light_pos_rads[3].w);
      return ret;
    }
  }
  compile("target_ps", "big_lights_render");
}

texture big_shadows_tex;
texture big_shadows_prev_tex;

int big_shadows_cnt;
interval big_shadows_cnt:one<2, two < 3, four;

shader temporal_big_light_shadows
{
  supports none;
  z_write = false;
  z_test = false;
  cull_mode = none;

  USE_AND_INIT_VIEW_VEC_VS()
  POSTFX_VS_TEXCOORD_VIEWVEC(0, texcoord, viewVect)
  INIT_DEPTH_ABOVE(ps, depth_around)
  USE_DEPTH_ABOVE_TC(ps)
  (ps) {
    world_view_pos@f3 = world_view_pos;
    downsampled_close_depth_tex@smp2d = downsampled_close_depth_tex;//downsampled_close_dept\h_tex;
    big_shadows_tex@smp2d = big_shadows_tex;
    //big_shadows_prev_tex@smp2d = big_shadows_prev_tex;
    big_light_pos_rads2@f4[] = {big_light_pos_rad_0, big_light_pos_rad_1, big_light_pos_rad_2, big_light_pos_rad_3};
    viewProjectionMatrixNoOfs@f44 = { globtm_no_ofs_psf_0, globtm_no_ofs_psf_1, globtm_no_ofs_psf_2, globtm_no_ofs_psf_3 };

    prev_view_vecLT@f3 = prev_view_vecLT;
    prev_view_vecRT_minus_view_vecLT@f3 = (prev_view_vecRT-prev_view_vecLT);
    prev_view_vecLB_minus_view_vecLT@f3 = (prev_view_vecLB-prev_view_vecLT);
    prev_move_world_view_pos@f3= (-move_world_view_pos.xyz,0);
    prev_downsampled_close_depth_tex@smp2d = prev_downsampled_close_depth_tex;
    ssao_prev_tex@smp2d = ssao_prev_tex;
  }
  hlsl {
    ##if big_shadows_cnt == one
    #define SHADOWS_CNT 1
    ##elif big_shadows_cnt == two
    #define SHADOWS_CNT 2
    ##elif big_shadows_cnt == four
    #define SHADOWS_CNT 4
    ##endif
    ##if prev_downsampled_close_depth_tex == NULL
      #define VALIDATE_HISTORY_UV 0
    ##endif
  }

  INIT_FETCH_MOTION_VECTOR(ps, downsampled)
  USE_FETCH_MOTION_VECTOR(ps, downsampled)

  INIT_ZNZFAR()

  hlsl(ps) {
    #include <fp16_aware_lerp.hlsl>

    float3 getPrevViewVecOptimized(float2 tc)
    {
      return prev_view_vecLT + prev_view_vecRT_minus_view_vecLT*tc.x + prev_view_vecLB_minus_view_vecLT*tc.y;
    }

    float4 get_weight(float viewVecLen, float invRadius, float linearW, float4 ldepth)
    {
      float4 distRadist = viewVecLen*abs(ldepth - linearW.xxxx);
      return saturate(1 - distRadist*invRadius);
    }

    float4 big_lights_blur_and_temporal(VsOutput input HW_USE_SCREEN_POS) : SV_Target0
    {
      /*
      float ret = tex2Dlod(big_shadows_tex, float4(input.texcoord.xy,0,0));
      float rawDepth = tex2Dlod(downsampled_close_depth_tex, float4(input.texcoord.xy,0,0));
      float w = linearize_z(rawDepth, zn_zfar.zw);
      /*/
      float2 dim;
      big_shadows_tex.GetDimensions(dim.x, dim.y);//todo: make constant
      float2 idim = rcp(dim);
      float2 screenSize = dim, screenSizeInverse = idim;

      float2 ltc = input.texcoord.xy-0.5*idim;
      float4 depthLT = downsampled_close_depth_tex.GatherRed(downsampled_close_depth_tex_samplerstate, ltc).wzxy;//.wzxy;
      float rawDepth = depthLT.w;
      if (rawDepth == 0)
        return 1;
      float viewVecLen = length(input.viewVect);
      float w = linearize_z(rawDepth, zn_zfar.zw);
      float3 worldPos = input.viewVect*w + world_view_pos;
      float linearDepth = w*viewVecLen;
      float minRadiusInMeters = 0.25, minRadiusRelToDist = 0.05;//25 cm or 5% of distance to point
      float invRadius = rcp(max(minRadiusInMeters, linearDepth*minRadiusRelToDist));
      float4 retV = 0;
      float4 toptc = float4(ltc, ltc + float2(idim.x*2, 0)),
             bottc = float4(ltc + float2(0, idim.y*2), ltc + 2 * idim);
      float2 tc = ltc;
      float4 depthRT = downsampled_close_depth_tex.GatherRed(downsampled_close_depth_tex_samplerstate, toptc.zw).wzxy;
      float4 depthLB = downsampled_close_depth_tex.GatherRed(downsampled_close_depth_tex_samplerstate, bottc.xy).wzxy;
      float4 depthRB = downsampled_close_depth_tex.GatherRed(downsampled_close_depth_tex_samplerstate, bottc.zw).wzxy;
      depthLT = linearize_z4(depthLT, zn_zfar.zw);
      float4 wLT = get_weight(viewVecLen, invRadius, w, depthLT);
      depthRT = linearize_z4(depthRT, zn_zfar.zw);
      float4 wRT = get_weight(viewVecLen, invRadius, w, depthRT);
      depthLB = linearize_z4(depthLB, zn_zfar.zw);
      float4 wLB = get_weight(viewVecLen, invRadius, w, depthLB);
      depthRB = linearize_z4(depthRB, zn_zfar.zw);
      float4 wRB = get_weight(viewVecLen, invRadius, w, depthRB);
      float totalWeight = dot(wLT,1)+ dot(wRT,1)+dot(wLB,1)+dot(wRB,1);

      float4 minColor=0, maxColor=1;
      #define ADD_CHANNEL(GatherChannel, chan)\
      {\
        float4 cColor4;\
        cColor4 = big_shadows_tex.GatherChannel(big_shadows_tex_samplerstate, toptc.xy).wzxy;\
        minColor. chan = min(min(cColor4.x, cColor4.y), min(cColor4.z, cColor4.w));\
        maxColor. chan = max(max(cColor4.x, cColor4.y), max(cColor4.z, cColor4.w));\
        retV. chan += dot(cColor4, wLT);\
        cColor4 = big_shadows_tex.GatherChannel(big_shadows_tex_samplerstate, toptc.zw).wzxy;\
        retV. chan += dot(cColor4, wRT);\
        minColor. chan = min3(cColor4.x, cColor4.z, minColor. chan);maxColor. chan = max3(cColor4.x, cColor4.z, maxColor. chan);\
        cColor4 = big_shadows_tex.GatherChannel(big_shadows_tex_samplerstate, bottc.xy).wzxy;\
        minColor. chan = min3(cColor4.x, cColor4.y, minColor. chan);maxColor. chan = max3(cColor4.x, cColor4.y, maxColor. chan);\
        retV. chan += dot(cColor4, wLB);\
        cColor4 = big_shadows_tex.GatherChannel(big_shadows_tex_samplerstate, bottc.zw).wzxy;\
        minColor. chan = min(cColor4.x, minColor. chan);maxColor. chan = max(cColor4.x, maxColor. chan);\
        retV. chan += dot(cColor4, wRB);\
      }
      if (lengthSq(big_light_pos_rads2[0].xyz - worldPos) < big_light_pos_rads2[0].w*abs(big_light_pos_rads2[0].w))
      {
        ADD_CHANNEL(GatherRed, r)
      }

      #if SHADOWS_CNT > 1
      if (lengthSq(big_light_pos_rads2[1].xyz - worldPos) < big_light_pos_rads2[1].w*abs(big_light_pos_rads2[1].w))
      {
        ADD_CHANNEL(GatherGreen, g)
      }
      #endif
      #if SHADOWS_CNT > 2
        if (lengthSq(big_light_pos_rads2[2].xyz - worldPos) < big_light_pos_rads2[2].w*abs(big_light_pos_rads2[2].w))
        {
          ADD_CHANNEL(GatherBlue, b)
        }
        if (lengthSq(big_light_pos_rads2[3].xyz - worldPos) < big_light_pos_rads2[3].w*abs(big_light_pos_rads2[3].w))
        {
          ADD_CHANNEL(GatherAlpha, a)
        }
      #endif

      //return retV/retW;
      float4 ret = retV*rcp(max(totalWeight,1e-6));
      //ret = tex2Dlod(big_shadows_tex, float4(input.texcoord.xy,0,0));
      float2 screenTC = input.texcoord.xy;
      float2 motionVector = fetch_motion_vector(screenTC, rawDepth).xy;
      float2 historyUV = screenTC + motionVector;
      bool bOffscreen = abs(historyUV.x*2-1) >= 1 || abs(historyUV.y*2-1) >= 1;

      //validate history
      float3 cameraPos = input.viewVect*w, prevCameraPos = cameraPos;
      #ifndef VALIDATE_HISTORY_UV
      #define VALIDATE_HISTORY_UV 1
      #endif
      #if VALIDATE_HISTORY_UV
      {
        float2 histCrd = historyUV*screenSize - 0.5;//should be 0.5, but for some reason it is not
        float2 histCrdFloored = floor(histCrd);
        float2 histTCBilinear = histCrdFloored*screenSizeInverse + screenSizeInverse;
        float2 wght = histCrd - histCrdFloored;
        float4 rawHistoryDepth4 = prev_downsampled_close_depth_tex.GatherRed(prev_downsampled_close_depth_tex_samplerstate, histTCBilinear).wzxy;

        float4 linearHistoryDepth4W = linearize_z4(rawHistoryDepth4, zn_zfar.zw);
        float3 prevViewVect = getPrevViewVecOptimized(historyUV);

        prevCameraPos = dot(linearHistoryDepth4W, 0.5)*prevViewVect + prev_move_world_view_pos;
        float prevViewVectLenSq = dot(prevViewVect, prevViewVect);
        float prevWorldViewPosLenSq = dot(prev_move_world_view_pos, prev_move_world_view_pos);
        float prevView_worldPos_dot = dot(prevViewVect, prev_move_world_view_pos) * 2;
        float4 linearHistoryDepth4 = sqrt(
          pow2(linearHistoryDepth4W) * prevViewVectLenSq
          + linearHistoryDepth4W * prevView_worldPos_dot
          + prevWorldViewPosLenSq);

        float4 difference = abs(linearHistoryDepth4 - linearDepth.xxxx);
        float acceptanceThreshold = 0.05*linearDepth;

        bool4 cornerWeights = bool4(wght<0.999, wght>0.001);
        float4 maxDifference = difference * float4(cornerWeights.x&&cornerWeights.y, cornerWeights.z&&cornerWeights.y,
                                                   cornerWeights.x&&cornerWeights.w, cornerWeights.z&&cornerWeights.w);


        //if there is discontinuity between history and current depth
        if (max(max(maxDifference.x, maxDifference.y), max(maxDifference.z, maxDifference.w)) > acceptanceThreshold)
        {
          //difference += 0.02*linearDepth*float4(wght.x + wght.y, (1-wght.x + wght.y), wght.x + 1-wght.y, 2-wght.x-wght.y);//add some bilinear weights
          float minDiff = min(min(difference.x, difference.y), min(difference.z, difference.w));
          #if !TAA_DONT_ALLOW_LINES_HISTORY_LERP
          if (max(difference.x, difference.y) < acceptanceThreshold)//horizonatal linear interpolations
            wght.y = 0;
          else if (max(difference.z, difference.w) < acceptanceThreshold)//horizonatal linear interpolations
            wght.y = 1;
          else if (max(difference.x, difference.z) < acceptanceThreshold)//vertical linear interpolations
            wght.x = 0;
          else if (max(difference.y, difference.w) < acceptanceThreshold)//vertical linear interpolations
            wght.x = 1;
          else
          #endif
          {
            //select one best corner
            wght = minDiff == difference.x ? float2(0,0) : (minDiff == difference.y ? float2(1,0) : (minDiff == difference.z ? float2(0,1) : float2(1,1)));
          }
          historyUV = (histCrdFloored + wght + 0.5)*screenSizeInverse;
          motionVector = historyUV-screenTC;
          FLATTEN
          if (minDiff > acceptanceThreshold)
            bOffscreen = true;
          float cornerDepth = minDiff == difference.x ? linearHistoryDepth4W.x : (minDiff == difference.y ? linearHistoryDepth4W.y : (minDiff == difference.z ? linearHistoryDepth4W.z : linearHistoryDepth4W.w));
          prevCameraPos = getPrevViewVecOptimized(historyUV)*cornerDepth + prev_move_world_view_pos;
        }
      }
      #endif
      //

      float4 historySample = tex2Dlod(ssao_prev_tex, float4(historyUV, 0, 0));//big_shadows_prev_tex
      //todo: add discontiniuity validation
      float motionTolerance = max(saturate(1-length(motionVector*screenSize)), saturate(1-length(prevCameraPos - cameraPos)*invRadius*4))*0.25;

      minColor = saturate(minColor - motionTolerance.xxxx); maxColor = saturate(maxColor + motionTolerance.xxxx);
      historySample = clamp(historySample, minColor, maxColor);
      //ret = tex2Dlod(big_shadows_tex, float4(input.texcoord.xy,0,0));
      ret = fp16_aware_lerp(historySample, ret, bOffscreen ? 1 : 0.05, 1./0.1);
      //if (bOffscreen)
      //return float4(0,1,1,1);
      return ret;
    }
  }
  compile("ps_5_0", "big_lights_blur_and_temporal");//5.0 required due to gather red. can be replaced
}
