include "rendinst_rotation_palette.dshl"

int baked_impostor_multisample = 0;
interval baked_impostor_multisample: no < 1, yes;

int baked_impostor_preshadows = 1 always_referenced;
interval baked_impostor_preshadows: preshadow_off < 1, preshadow_dynamic < 2, preshadow_on;

float4 impostor_options = float4(1, 1, 0, 0);
float4 impostor_scale = float4(1, 1, 0, 0);
float4 impostor_bounding_sphere = float4(0, 0, 0, 1);

macro INIT_BAKED_IMPOSTOR_STATIC_TEX()
  static texture impostor_albedo_alpha = 0;
  static texture impostor_normal_translucency = 0;
  static texture impostor_ao_smoothness = 0;
  static texture impostor_preshadow = 0;

  (ps) {
    impostor_albedo_alpha@static = impostor_albedo_alpha;
    impostor_normal_translucency@static = impostor_normal_translucency;
    impostor_ao_smoothness@static = impostor_ao_smoothness;
    impostor_preshadow@staticTexArray = impostor_preshadow;
  }
endmacro

macro INIT_BAKED_IMPOSTOR_VARS(shader_var_type) // shader_var_type: dynamic or static
  hlsl
  {
    #define MAX_SLICE_HASH 15
  }
  hlsl(vs)
  {
    #include <rendInst/rotation_palette_consts.hlsli>


    float4 get_impostor_scale(int impostor_data_offset)
    {
      return impostor_data_buffer[impostor_data_offset+IMPOSTOR_DATA_SCALE];
    }

    float get_impostor_bounding_sphere_y(int impostor_data_offset)
    {
      uint index = impostor_data_offset + IMPOSTOR_DATA_BSP_Y__PRESHADOW__BOT_GRADIENT;
      // This check is required to avoid a mysterious crash on RX 7700 XT (RE-1178).
  ##if hardware.dx12
      uint dim = 0;
      impostor_data_buffer.GetDimensions(dim);
      ##assert(index < dim, "[%s:%.f] Out of bounds: Buffer `impostor_data_buffer` has size %d, but access to %d", _FILE_, __LINE__, dim, index);
      if (index >= dim)
        return 0;
  ##endif
      return impostor_data_buffer[index].x;
    }

    float get_bottom_gradient(int impostor_data_offset)
    {
      return impostor_data_buffer[impostor_data_offset+IMPOSTOR_DATA_BSP_Y__PRESHADOW__BOT_GRADIENT].z;
    }

    float2 get_impostor_vertex_offset(int impostor_data_offset, int vertex_id)
    {
      float4 offsets = impostor_data_buffer[impostor_data_offset+IMPOSTOR_DATA_VERTEX_OFFSET+(vertex_id>>1)];
      return (vertex_id&1) ? offsets.zw : offsets.xy;
    }

    bool has_impostor_preshadow(int impostor_data_offset)
    {
##if baked_impostor_preshadows == preshadow_off
      return false;
##elif baked_impostor_preshadows == preshadow_dynamic
      return impostor_data_buffer[impostor_data_offset+IMPOSTOR_DATA_BSP_Y__PRESHADOW__BOT_GRADIENT].y > 0;
##else
      return true;
##endif
    }

    float get_vertex_scaling(float cos_phi)
    {
      return 1 - cos_phi;
    }

    //z will store unscaled height
    float3 get_vertex_offset_hemisphere(int impostor_data_offset, float2 inpos, float3 view_dir, float3 up, float2 side_scale, float2 top_scale)
    {
      uint offsetId = 0;
      float flip = 1;
      offsetId += inpos.x < 0 ? 4 : 0;
      flip = inpos.x < 0 ? -1 : 1;

      offsetId += inpos.y * flip < 0 ? 2 : 0;
      flip = inpos.y * flip < 0 ? -1 : 1;

      offsetId += abs(inpos.x)*flip > abs(inpos.y)*flip ? 1 : 0;

      float2 vertexOffset = get_impostor_vertex_offset(impostor_data_offset, offsetId);
      float offsetFactor = get_vertex_scaling(max(0, dot(-view_dir, up)));
      return float3(lerp(inpos*top_scale, vertexOffset*side_scale, offsetFactor), vertexOffset.y);
    }

    float2 get_vertex_offset_sphere(int impostor_data_offset, float2 inpos, float3 view_dir, float3 up, float2 side_scale, float2 top_scale)
    {
      uint offsetId = 0;
      float flip = 1;
      offsetId += inpos.x < 0 ? 4 : 0;
      flip = inpos.x < 0 ? -1 : 1;

      offsetId += inpos.y * flip < 0 ? 2 : 0;
      flip = inpos.y * flip < 0 ? -1 : 1;

      offsetId += abs(inpos.x)*flip > abs(inpos.y)*flip ? 1 : 0;
      float2 vertexOffset = get_impostor_vertex_offset(impostor_data_offset, offsetId);
      float offsetFactor = get_vertex_scaling(abs(dot(view_dir, up)));
      return lerp(inpos*top_scale, vertexOffset*side_scale, offsetFactor);
    }
  }
endmacro

macro INIT_RUNTIME_IMPOSTORS()
  hlsl
  {
  }

  hlsl(ps)
  {
    #define IMPOSTOR_TEXTURE_TYPE sampler2D
  }
endmacro

macro INIT_BAKED_IMPOSTORS()
  hlsl
  {
  ##if rendinst_render_pass == rendinst_render_pass_depth || rendinst_render_pass == rendinst_render_pass_normal
    // Baked billboard impostors always have 9 slices
    #define MULTISLICE_COUNT 9
    ##if baked_impostor_multisample == yes
      #define USE_MULTISLICED 1
    ##endif
  ##endif
  }
endmacro

macro USE_IMPOSTORS_COMMON()
  hlsl
  {
    #define IMP_SIDE_INDEX_THRESHOLD 7.9
    float get_slices_det( float4 v )
    {
      float w0 = v.z;
      float w1 = v.w;
      float dc = v.x < IMP_SIDE_INDEX_THRESHOLD ? 0.7071067811 : 0;
      float det = w1 / w0 - dc;
      det *= 0.5f / ( 1.f - dc );
      return det;
    }
  }

  hlsl(ps)
  {
    half4 blend_slices( float4 v0, float4 v1, float det )
    {
      return lerp( v0, v1, det );
    }

    half4 blend_slices_norm( float4 v0, float4 v1, float det )
    {
      // we cant blend normals directly, bc one of the slice can be black in that texel
      half4 l = lerp( v0, v1, det );
      return l;
      half3 n = l.xyz * 2.f - 1.f;
      half k = dot( n, n );
      return lerp( max(v0, v1), l, saturate( k * 100.f ) );
    }
  }
endmacro

macro USE_IMPOSTORS_COMMON2()
  hlsl
  {
    void get_impostor_view(
      float3 view_x, float3 view_y,
      float2 modelToWorld,
      float3 view_dir_norm,
      uint2 slice_idx,
      float2 slice_d,
      out float3 out_x, out float3 out_y )
    {
      float above_k = pow2( view_dir_norm.y );

#if USE_MULTISLICED && IMPOSTOR_ADAPTIVE_SLICES
      // orient plane to origin's slice
      slice_idx.xy = min(slice_idx.xy, uint2(8, 8));
      float s = get_slices_det( float4( slice_idx, slice_d ) );
      out_x = lerp( view_dirs[slice_idx.x], view_dirs[slice_idx.y], s );
      out_x = normalize( out_x );
      out_x = float3(
        modelToWorld.x * out_x.x - modelToWorld.y * out_x.z,
        out_x.y,
        modelToWorld.y * out_x.x + modelToWorld.x * out_x.z);

      // but get it more straighten-up if we looking from above to reduce 'warping'
      out_x = lerp( out_x, view_x, above_k );
#else
      out_x = view_x;
#endif

      // ground-air impostors transition
      out_x = normalize( lerp( out_x, view_x, above_k ) );

    out_y = normalize( lerp( float3( 0, 1, 0 ), view_y, above_k ) );
    }

    float2 get_shadow_impostor_size(int palette_id, float4 s01, float4 s23, float4 s45, float4 s67)
    {
      float2 sizes[8] = { s01.xy, s01.zw, s23.xy, s23.zw, s45.xy, s45.zw, s67.xy, s67.zw };
      uint id = min(uint(palette_id + 0.5), 7u);

      return sizes[id];
    }

#if MULTISLICE_COUNT

    void get_impostor_slices( float3 ray_dir_norm, out uint2 slice_idx, out float2 slice_d )
    {
      slice_idx = 0;
      slice_d = 0;

      //with d moved out of loop scope,
      //compiler will reduce dot ops & make loop unrolling
      float d[MULTISLICE_COUNT];
      //for proper compilation on -O1 we must make a hint to compiler
      UNROLL
      for ( uint i = 0 ; i < MULTISLICE_COUNT ; ++i )
        d[i] = dot( imp_dirs[i], -ray_dir_norm );

      for ( uint j = 0 ; j < MULTISLICE_COUNT ; ++j )
      {
        if ( d[j] > slice_d.x )
        {
          slice_idx.y = slice_idx.x;
          slice_d.y = slice_d.x;

          slice_idx.x = j;
          slice_d.x = d[j];
        }
        else if ( d[j] > slice_d.y )
        {
          slice_idx.y = j;
          slice_d.y = d[j];
        }
      }
    }

#endif
  }

  hlsl
  {
    #if IMPOSTOR_SLICE_DEBUG
    float3 get_slice_dbg_color( float s )
    {
      if ( s < 0.9 )
        return float3( 0, 0, 0 );
      else if ( s < 1.9 )
        return float3( 1, 0, 0 );
      else if ( s < 2.9 )
        return float3( 0, 1, 0 );
      else if ( s < 3.9 )
        return float3( 0, 0, 1 );
      else if ( s < 4.9 )
        return float3( 1, 0, 1 );
      else if ( s < 6.9 )
        return float3( 1, 1, 0 );
      else if ( s < 7.9 )
        return float3( 0, 1, 1 );
      else
        return float3( 1, 1, 1 );
    }
    void apply_slice_dbg( in out float4 diff, float2 slices, float slice_det )
    {
      diff.rgb += lerp( get_slice_dbg_color( slices.x ), get_slice_dbg_color( slices.y ), slice_det );
      diff.a = 1;
    }
    #endif
  }

endmacro

macro USE_BAKED_IMPOSTORS()
  USE_IMPOSTORS_COMMON()
  hlsl(vs)
  {
    #include <rendInst/rotation_palette_consts.hlsli>
    float4 get_impostor_slice_tc_tm(uint impostor_data_offset, uint slice_id)
    {
      return impostor_data_buffer[impostor_data_offset+IMPOSTOR_DATA_SLICE_DATA_OFFSET + slice_id*IMPOSTOR_DATA_ENTRIES_PER_SLICE];
    }
    float4 get_impostor_slice_clipping_lines(uint impostor_data_offset, uint slice_id)
    {
      return impostor_data_buffer[impostor_data_offset+IMPOSTOR_DATA_SLICE_DATA_OFFSET + slice_id*IMPOSTOR_DATA_ENTRIES_PER_SLICE + 1];
    }
    // (transform * tc.xy, clipping_info.xy)
    float4 apply_slice_data(uint impostor_data_offset, uint slice_id, float2 tc)
    {
      float4 tcTm  = get_impostor_slice_tc_tm(impostor_data_offset, slice_id);
      float4 lines = get_impostor_slice_clipping_lines(impostor_data_offset, slice_id);

      float2 outTc = tcTm.xy * tc + tcTm.zw;

      float2 xClipping = lines.xy*outTc.y + lines.zw;

      // linear function that checks if tc.x is in the [xClipping.x,xClipping.y] interval
      // clippingInfo.x / clippingInfo.y corresponds to (tc.x-xClipping.x)/(xClipping.y-xClipping.x) * 2 - 1
      // in other words, the [-1, 1] normalized position of tc.x within the range
      // abs(clippingInfo.x / clippingInfo.y) > 1 <=> abs(clippingInfo.x) > abs(clippingInfo.y)
      float2 clippingInfo = float2(2*outTc.x-(xClipping.y+xClipping.x), (xClipping.y-xClipping.x));

      return float4(outTc, clippingInfo);
    }
  }
  hlsl(ps)
  {
    bool need_clip_impostor(float2 clipping_info)
    {
      return abs(clipping_info.x) > abs(clipping_info.y);
    }

    #define impostor_tex_slice(tx, tc) \
      tex2DBindless(tx, tc)
    #define impostor_tex_slice_shadow(tx, tc, z) \
      tex2DBindless(tx, float3(tc, z))


    #if USE_MULTISLICED
      #define sample_impostor_tex(tx,tc1,tc2,ds) \
            (ds.x*impostor_tex_slice( tx, tc1 )+\
            ds.y*impostor_tex_slice( tx, tc2 ))

      #define sample_impostor_tex_norm(tx,tc1,tc2,ds) \
        blend_slices_norm(\
          impostor_tex_slice( tx, tc1 ),\
          impostor_tex_slice( tx, tc2 ), ds.y)

      #define sample_impostor_tex_shadow(tx,tc1,tc2,z,ds) \
          (ds.x*impostor_tex_slice_shadow( tx, tc1, z )+\
          ds.y*impostor_tex_slice_shadow( tx, tc2, z ))
    #else
      #define sample_impostor_tex(tx,tc1,tc2,ds) \
            (impostor_tex_slice( tx, tc1 ))

      #define sample_impostor_tex_norm(tx,tc1,tc2,ds) \
          (impostor_tex_slice( tx, tc1 ))

      #define sample_impostor_tex_shadow(tx,tc1,tc2,z,ds) \
          (impostor_tex_slice_shadow( tx, tc1, z ))
    #endif

  }

  hlsl
  {
    #include <rendinst_impostor_dirs.hlsli>

    #define imp_dirs IMPOSTOR_SLICE_DIRS
    #define view_dirs IMPOSTOR_VIEW_DIRS
  }
  USE_IMPOSTORS_COMMON2()
endmacro

macro USE_RUNTIME_IMPOSTORS()
  USE_IMPOSTORS_COMMON()
  hlsl(ps)
  {
    #define impostor_tex_slice(tx, tc, s) \
        h4tex3D(tx, float3(tc, s))

    #if MULTISLICE_COUNT == 9

      #define sample_impostor_tex(tx,tc,s,d) \
          blend_slices(\
            impostor_tex_slice( tx, s.x < IMP_SIDE_INDEX_THRESHOLD ? tc.xy : tc.zw, s.x ),\
            impostor_tex_slice( tx, s.y < IMP_SIDE_INDEX_THRESHOLD ? tc.xy : tc.zw, s.y ), d )

      #define sample_impostor_tex_norm(tx,tc,s,d) \
        blend_slices_norm(\
          impostor_tex_slice( tx, s.x < IMP_SIDE_INDEX_THRESHOLD ? tc.xy : tc.zw, s.x ),\
          impostor_tex_slice( tx, s.y < IMP_SIDE_INDEX_THRESHOLD ? tc.xy : tc.zw, s.y ), d )

      #define sample_impostor_tex_shadow(tx,tc,z,s,d) \
          blend_slices(\
            impostor_tex_slice_shadow( tx, s.x < IMP_SIDE_INDEX_THRESHOLD ? tc.xy : tc.zw, z, s.x ),\
            impostor_tex_slice_shadow( tx, s.y < IMP_SIDE_INDEX_THRESHOLD ? tc.xy : tc.zw, z, s.y ), d )

    #else

      #define sample_impostor_tex(tx,tc,s,d) h4tex2D( tx, tc.xy )
      #define sample_impostor_tex_norm(tx,tc,s,d) sample_impostor_tex(tx,tc,s,d)
      #define sample_impostor_tex_shadow(tx,tc,z,s,d)
    #endif
  }
  hlsl
  {
    static const float imp_dd = 0.7071067811;
    static const float3 imp_dirs[9] =
    {
      float3( 1, 0, 0 ), float3( -1, 0, 0 ),
      float3( 0, 0, 1 ), float3( 0, 0, -1 ),
      float3( imp_dd, 0, imp_dd ), float3( -imp_dd, 0, -imp_dd ),
      float3( -imp_dd, 0, imp_dd ), float3( imp_dd, 0, -imp_dd ),
      float3( 0, -1, 0 )
    };

    static const float3 view_dirs[9] =
    {
      float3( 0, 0, -1 ), float3( 0, 0, 1 ),
      float3( 1, 0, 0 ), float3( -1, 0, 0 ),
      float3( imp_dd, 0, -imp_dd ), float3( -imp_dd, 0, imp_dd ),
      float3( imp_dd, 0, imp_dd ), float3( -imp_dd, 0, -imp_dd ),
      float3( 0, 0, 0 )
    };
  }
  USE_IMPOSTORS_COMMON2()
endmacro

macro OCTAHEDRAL_UTILS()
  hlsl {
    float2 dir_to_tex(float3 pointToEye)
    {
      pointToEye.y = max(0, pointToEye.y);
      pointToEye /= dot(half3(1, 1, 1), abs(pointToEye));
      { // upper hemisphere only
        // pointToEye.xy = [[1, -1], [1, 1]] * pointToEye.xz
        // This is the inverse of the transformation applied in ImpostorBaker
        pointToEye.y = pointToEye.x + pointToEye.z;
        pointToEye.x = pointToEye.x - pointToEye.z;
      }

      return pointToEye.xy * 0.5 + 0.5;
    }

    float2 get_texture_offset(float2 tc)
    {
      tc = tc*impostor_options.xy;
      float2 impostorTc = clamp(floor(tc), float2(0, 0), impostor_options.xy-1);
      return impostorTc * impostor_options.zw;
    }

    float2 correct_spherical_tc(float2 tc)
    {
      float2 options = impostor_options.zw;
      FLATTEN
      if (tc.x < 0)
        tc = float2(0, 1) - (tc + options);
      else if(tc.x > 1 - options.x)
        tc = float2(2, 1) - (tc + options);
      FLATTEN
      if (tc.y < 0)
        tc = float2(1, 0) - (tc + options);
      else if(tc.y > 1 - options.y)
        tc = float2(1, 2) - (tc + options);
      return tc;
    }

    void get_texture_offsets(float2 tc, out float2 tex1, out float w1, out float2 tex2, out float w2, out float2 tex3, out float w3)
    {
      tc = tc*impostor_options.xy - 0.5; // the samples are centered at the middle of texels
      float2 impostorTc = clamp(floor(tc), float2(0, 0), impostor_options.xy-1);
      tc = clamp(tc - impostorTc, 0, 1); // local texcoord
      tex1 = impostorTc * impostor_options.zw;
      tex2 = tex1 + (tc.x > tc.y
        ? float2(impostor_options.zw.x, 0)
        : float2(0, impostor_options.zw.y));
      tex3 = tex1 + impostor_options.zw;
      w1 = 1 - max(tc.x, tc.y);
      w3 = min(tc.x, tc.y);
      w2 = 1 - (w1+w3);
    }

    float3 get_point_to_eye(float2 tc)
    {
      // transform [0, 1) to [-1, 1)
      float2 uv = tc*2 + impostor_options.zw - 1; // Sample is at the middle of the texture

      { // upper hemisphere only
        // Transformation: rotation about 45 degrees and scaling by 1/sqrt(2)
        // The top half of the octahedron is mapped to a square, defined by connecting the
        // middle point of the sides of the rectangle (-1,-1):(1,1)
        // this transformation transforms this rectangle to the rectangle of the upper half
        uv = float2((uv.x + uv.y) * 0.5, (uv.y - uv.x) * 0.5);
      }
      uv = clamp(uv, float2(-1, -1), float2(1, 1));

      return float3(uv.x, 1.0f - (abs(uv.x) + abs(uv.y)), uv.y);
    }
  }
  hlsl(ps)
  {
    float3 get_texture_offset_tr(float2 tc, float4 slice_shift)
    {
      tc = tc*impostor_options.xy;
      float2 delta = tc - floor(tc);
      float slice_hash = slice_shift.x - frac(slice_shift.x);
      slice_shift = 2*(frac(slice_shift)) - 1;

      return float3(slice_shift.xy + slice_shift.zw*delta, slice_hash/MAX_SLICE_HASH);
    }
  }

endmacro

macro INIT_IMPOSTOR_PROPERTIES()
  hlsl (ps)
  {
    struct ImpostorProperties
    {
      float4 normal_translucency;
      float ao;
      float invsmoothness;
      float shadowing;
      float depthSq;
    };
  }
endmacro

macro INIT_AND_USE_RUNTIME_IMPOSTOR_PROPERTIES()
  INIT_IMPOSTOR_PROPERTIES()
  hlsl (ps)
  {
    ImpostorProperties read_impostor_properties(float4 tc_1_2, float2 slices, float slice_det)
    {
      ImpostorProperties ret;
      ret.normal_translucency = sample_impostor_tex(normal_tex, tc_1_2, slices, slice_det);
      half4 ao_shadowing = sample_impostor_tex(ao_shadowing_tex, tc_1_2, slices, slice_det);
      ret.ao = ao_shadowing.x;
      ret.invsmoothness = ao_shadowing.y;
      ret.shadowing = ao_shadowing.z;
      ret.depthSq = 10*ao_shadowing.w;
      return ret;
    }
  }
endmacro
macro INIT_AND_USE_BAKED_IMPOSTOR_PROPERTIES()
  INIT_IMPOSTOR_PROPERTIES()
  hlsl (vs)
  {
    float encode_impostor_vertex_output(uint palette_id, bool has_preshadow)
    {
      float value = palette_id + 1;
      if (!has_preshadow)
        value = -value;
      return value;
    }
  }
  hlsl (ps)
  {
    void decode_impostor_vertex_output(float value, out uint palette_id, out bool has_preshadow)
    {
      palette_id = (uint)abs(value) - 1;
      has_preshadow = value > 0;
    }

    ImpostorProperties read_impostor_properties(float2 tc1, float2 tc2, float2 ds, float impostor_data)
    {
      ImpostorProperties ret;
      ret.normal_translucency = sample_impostor_tex_norm(get_impostor_normal_translucency(), tc1, tc2, ds);
      float2 ao_smoothness = sample_impostor_tex(get_impostor_ao_smoothness(), tc1, tc2, ds).xy;
      ret.ao = ao_smoothness.x;
      ret.invsmoothness = ao_smoothness.y;
      uint paletteId;
      bool hasPreshadow;
      decode_impostor_vertex_output(impostor_data, paletteId, hasPreshadow);
##if baked_impostor_preshadows == preshadow_off
      ret.shadowing = 1;
##elif baked_impostor_preshadows == preshadow_dynamic
      BRANCH
      if (hasPreshadow)
        ret.shadowing = (sample_impostor_tex_shadow(get_impostor_preshadow(), tc1, tc2, paletteId, ds)).r;
      else
        ret.shadowing = 1;
##else
      ret.shadowing = (sample_impostor_tex_shadow(get_impostor_preshadow(), tc1, tc2, paletteId, ds)).r;
##endif
      ret.depthSq = 0;
      return ret;
    }
  }
endmacro

macro INIT_AND_USE_BAKED_IMPOSTOR()
  INIT_BAKED_IMPOSTORS()
  INIT_BAKED_IMPOSTOR_STATIC_TEX()
  INIT_BAKED_IMPOSTOR_VARS(static)
  INIT_BAKED_IMPOSTOR_TEXTURES()
  ROTATION_PALETTE()
  USE_BAKED_IMPOSTORS()
endmacro
macro INIT_AND_USE_RUNTIME_IMPOSTOR()
  INIT_RUNTIME_IMPOSTORS()
  INIT_RUNTIME_IMPOSTOR_TEXTURES()
  ROTATION_PALETTE_STUB()
  USE_RUNTIME_IMPOSTORS()
endmacro
macro INIT_AND_USE_IMPOSTOR_PROPERTIES()
  if (shader == rendinst_baked_impostor)
  {
    INIT_AND_USE_BAKED_IMPOSTOR_PROPERTIES()
  }
  else
  {
    INIT_AND_USE_RUNTIME_IMPOSTOR_PROPERTIES()
  }
endmacro