include "shader_global.dshl"
include "use_downsampled_checkerboard_depth_tex.dshl"
include "gbuffer.dshl"

int4 upscale_gbuffer_offset;

macro UPSCALE_SAMPLING_CORE(code)
  ENABLE_ASSERT(code)
  USE_DECODE_DEPTH_STAGE(code)
  INIT_ZNZFAR_STAGE(code)
  INIT_LOAD_DEPTH_GBUFFER_BASE(code)
  USE_LOAD_DEPTH_GBUFFER_BASE(code)
  local float4 lowres_size = get_dimensions(downsampled_checkerboard_depth_tex, 0);
  local float4 gbuffer_size = get_dimensions(depth_gbuf, 0);

  (code) {
    lowres_size@f2 = lowres_size;
    gbuffer_size@f2 = gbuffer_size;
    inv_gbuffer_size@f2 = (0.5/max(1,lowres_size.x), 0.5/max(1,lowres_size.y),0,0);
    // todo: we actually need to use this:
    //inv_gbuffer_size@f2 = (1./max(1,gbuffer_size.x), 1./max(1,gbuffer_size.y),0,0);
    // but there is something called "gbuffer_view_size" ?
    upscale_gbuffer_offset@i2 = upscale_gbuffer_offset;
  }
  (code) {
    downsampled_checkerboard_depth_tex@smp2d = downsampled_checkerboard_depth_tex;
    downsampled_close_depth_tex@smp2d = downsampled_close_depth_tex;
    downsampled_normals@smp2d = downsampled_normals;
  }

  hlsl(code) {
    uint encodeMask(float threshold, float linear_depth, float4 halfResLinearDepth)
    {
      float4 depthDiff = abs(halfResLinearDepth - linear_depth);
      uint4 depthMatched = depthDiff < threshold * linear_depth;
      depthMatched = all(depthMatched == 0) ? uint4(depthDiff == min4(depthDiff.x, depthDiff.y, depthDiff.z, depthDiff.w)) : depthMatched;
      return depthMatched.w | (depthMatched.z<<1) | (depthMatched.y<<2) | (depthMatched.x<<3);
    }

    uint upscale_sampling(float2 screenpos)
    {
      // Assumes lowres = floor(highres/2).
      const float BASE_THRESHOLD = 0.02;
      float rawDepth = loadGbufferDepth(int2(screenpos) + upscale_gbuffer_offset);
      float linearDepth = linearize_z(rawDepth, zn_zfar.zw);
      float2 tc = screenpos * inv_gbuffer_size.xy;

      uint checker = encodeMask(BASE_THRESHOLD, linearDepth, linearize_z4(downsampled_checkerboard_depth_tex.GatherRed(downsampled_checkerboard_depth_tex_samplerstate, tc)));
      uint close = encodeMask(BASE_THRESHOLD, linearDepth, linearize_z4(downsampled_close_depth_tex.GatherRed(downsampled_close_depth_tex_samplerstate, tc)));
      return checker | (close<<4);
    }
  }
endmacro

shader upscale_sampling
{
  cull_mode  = none;
  z_test = false;
  z_write = false;

  POSTFX_VS(0)
  UPSCALE_SAMPLING_CORE(ps)

  hlsl(ps) {
  ##if hardware.ps4 || hardware.ps5
    #pragma PSSL_target_output_format (default FMT_32_R)  // compatible with uint targets
  ##endif

    uint upscale_sampling_ps(VsOutput input HW_USE_SCREEN_POS) : SV_Target0
    {
      return upscale_sampling(GET_SCREEN_POS(input.pos).xy);
    }
  }

  compile("target_ps", "upscale_sampling_ps");
}

shader upscale_sampling_cs
{
  UPSCALE_SAMPLING_CORE(cs)

  hlsl(cs) {
    RWTexture2D<uint> target : register(u0);

    [numthreads( 8, 8, 1 )]
    void upscale_sampling_cs(uint3 DTid : SV_DispatchThreadID)
    {
      if (any(DTid.xy >= gbuffer_size.xy))
        return;

      texture2DAt(target, DTid.xy) = upscale_sampling(DTid.xy + 0.5);
    }
  }

  compile("target_cs", "upscale_sampling_cs");
}
