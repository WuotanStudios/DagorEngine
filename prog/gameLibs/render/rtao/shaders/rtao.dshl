include "shader_global.dshl"
include "gbuffer.dshl"
include "viewVecVS.dshl"
include "bvh.dshl"

float4x4 inv_proj_tm;

texture rtao_target;

int rtao_frame_index;

float4 rtao_hit_dist_params;
int4 rtao_resolutionI = (1,1,1,1);
int rtao_res_mul = 1;

interval rtao_res_mul: off<2, on;

define_macro_if_not_defined USE_EMISSION_DECODE_COLOR_MAP(code)
endmacro

shader rt_ao
{
  if (compatibility_mode == compatibility_mode_on || !use_hw_raytracing)
  {
    dont_render;
  }
  ENABLE_ASSERT(cs)

  (cs) {
    inv_proj_tm@f44 = inv_proj_tm;
    world_view_pos@f3 = world_view_pos;
    resolution@u2 = rtao_resolutionI.xy;
    inv_aligned_resolution@f2 = (rtao_res_mul*screen_pos_to_texcoord.xy);
    hit_dist_params@f4 = rtao_hit_dist_params;
    frame_index@i1 = rtao_frame_index;
    output@uav = rtao_target hlsl { RWTexture2D<float> output@uav; };
  }

  hlsl(cs) {
    #define DISABLE_TOONSHADING 1

    #include <Include/NRDEncoding.hlsli>
    #include <Include/NRD.hlsli>
  }

  USE_AND_INIT_VIEW_VEC_CS()
  INIT_ZNZFAR_STAGE(cs)
  INIT_LOAD_DEPTH_GBUFFER_BASE(cs)
  USE_LOAD_DEPTH_GBUFFER_BASE(cs)
  USE_EMISSION_DECODE_COLOR_MAP(cs)
  INIT_LOAD_GBUFFER_BASE(cs)
  INIT_LOAD_BVH_FLAGS_BASE(cs)
  USE_LOAD_GBUFFER_BASE(cs, true)
  INIT_BVH(cs, 0, true)
  USE_BVH_FOR_AO(cs)

  USE_CALC_GEOMETRY_NORMAL(cs)

  INIT_BVH_WATER_FADE(cs)
  USE_BVH_WATER_FADE(cs)

  hlsl(cs)
  {
    #define MAX_ACCUM_DENOISE_FRAMES 30

    float2 hash2(inout float seed)
    {
      float s1 = seed += 1;
      float s2 = seed += 1;
      return float2( frac( sin( float2( s1, s2 ) ) * float2( 43758.5453123,22578.1459123 ) ) );
    }

    float3 cosine_sample_hemisphere(float3 n, inout float seed, float scale = 1)
    {
      float2 u     = hash2(seed);
      float  r     = half(sqrt(u.x)) * scale;
      float  theta = half(2.0 * PI * u.y);
      float3 B     = normalize(cross(n, half3(0.0, 1.0, 1.0)));
      float3 T     = cross(B, n);
      return normalize(r * sin(theta) * B + sqrt(1.0 - u.x) * n + r * cos(theta) * T);
    }

    float calc_output_value(float t, float view_z, float roughness)
    {
      return REBLUR_FrontEnd_GetNormHitDist(t, view_z, hit_dist_params, roughness);
    }

    RT_GROUP_SIZE
    void rt_ao_cs(uint2 dtid : SV_DispatchThreadID)
    {
      uint2 rayIndex    = dtid;
      uint2 outputIndex = rayIndex;

      rayIndex.x *= 2;

      bool evenFrame = ( frame_index & 1 ) == 0;
      bool evenLine  = ( rayIndex.y & 1 ) == 0;

      if ( evenFrame == evenLine )
        ++rayIndex.x;

      if (any(rayIndex >= resolution))
        return;

      ##if rtao_res_mul == on
        UnpackedGbuffer gbuffer = unpackGbuffer(loadPackedGbuffer(rayIndex * 2));
        float rawDepth = texture2DAt(half_res_depth_tex, rayIndex).r;
      ##else
        UnpackedGbuffer gbuffer = unpackGbuffer(loadPackedGbuffer(rayIndex));
        float rawDepth = loadGbufferDepth(rayIndex);
      ##endif
      float roughness = linearSmoothnessToLinearRoughness(gbuffer.smoothness);

      BRANCH
      if (rawDepth <= 0)
      {
        texture2DAt(output, outputIndex) = calc_output_value(NRD_FP16_MAX, NRD_FP16_MAX, 0);
        return;
      }

      float w = linearize_z(rawDepth, zn_zfar.zw);
      float underwaterFade = calc_underwater_fade(w, rayIndex, inv_aligned_resolution, world_view_pos);

      BRANCH
      if (underwaterFade == 0)
      {
        texture2DAt(output, outputIndex) = calc_output_value(NRD_FP16_MAX, NRD_FP16_MAX, 0);
        return;
      }

      bool isImpostor = gbuffer.impostorMask > 0.5;
      bool isGrass = gbuffer.isGrass;

      float seed = outputIndex.x + outputIndex.y * 3.43121412313 + frac(1.12345314312 * (frame_index % MAX_ACCUM_DENOISE_FRAMES));
      float3 relPos = calc_camera_relative_pos(rayIndex, w, inv_aligned_resolution);
      float3 normal = gbuffer.normal;
      if (!isGrass)
      {
        ##if rtao_res_mul == on
          normal = calc_geometry_normal_half(rayIndex, inv_aligned_resolution, resolution);
        ##else
          normal = calc_geometry_normal(rayIndex, inv_aligned_resolution, resolution);
        ##endif
      }
      float3 sampleDir = cosine_sample_hemisphere(normal, seed);

      float bias = gbuffer.isTwoSided ? 0.002 : 0.0;

      uint groupMask = bvhGroupAO;
      if (isImpostor)
        groupMask &= ~bvhGroupImpostor;
      else if (isGrass)
        groupMask &= ~bvhGroupGrass;

      float aoDistance = hit_dist_params.x;

      if (gbuffer.isTwoSided)
        relPos += normal * (gbuffer.isUnstable ? 0.2 : 0.001);

      HitInfo hitInfo;

      bool isHit = trace_ray(bvhMain, relPos, sampleDir, bias, aoDistance, w, groupMask, hitInfo);
      if (isHit)
        texture2DAt(output, outputIndex.xy) = calc_output_value(hitInfo.t, w, roughness);
      else
        texture2DAt(output, outputIndex.xy) = calc_output_value(NRD_FP16_MAX, w, roughness);
    }
  }

  compile("cs_6_5", "rt_ao_cs");
}
