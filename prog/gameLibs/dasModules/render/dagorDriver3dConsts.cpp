// Copyright (C) Gaijin Games KFT.  All rights reserved.

#include <dasModules/aotDagorDriver3d.h>
#include <dasModules/dagorTexture3d.h>

void bind_driver_consts(das::Module &module)
{
#define BIND_INT_CONST(name) das::addConstant<int>(module, #name, name);

#define BIND_UINT_CONST(name) das::addConstant<uint32_t>(module, #name, name);


  BIND_INT_CONST(CLEAR_TARGET);
  BIND_INT_CONST(CLEAR_ZBUFFER);
  BIND_INT_CONST(CLEAR_STENCIL);
  BIND_INT_CONST(CLEAR_DISCARD_TARGET);
  BIND_INT_CONST(CLEAR_DISCARD_ZBUFFER);
  BIND_INT_CONST(CLEAR_DISCARD_STENCIL);
  BIND_INT_CONST(CLEAR_DISCARD);

  BIND_INT_CONST(PRIM_POINTLIST);
  BIND_INT_CONST(PRIM_LINELIST);
  BIND_INT_CONST(PRIM_LINESTRIP);
  BIND_INT_CONST(PRIM_TRILIST);
  BIND_INT_CONST(PRIM_TRISTRIP);
  BIND_INT_CONST(PRIM_TRIFAN);
#if _TARGET_XBOX
  BIND_INT_CONST(PRIM_QUADLIST);
#endif
  BIND_INT_CONST(PRIM_4_CONTROL_POINTS);
  BIND_INT_CONST(PRIM_COUNT);


  // enum WriteMask
  BIND_UINT_CONST(WRITEMASK_RED0)
  BIND_UINT_CONST(WRITEMASK_RED1)
  BIND_UINT_CONST(WRITEMASK_RED2)
  BIND_UINT_CONST(WRITEMASK_RED3)
  BIND_UINT_CONST(WRITEMASK_RED4)
  BIND_UINT_CONST(WRITEMASK_RED5)
  BIND_UINT_CONST(WRITEMASK_RED6)
  BIND_UINT_CONST(WRITEMASK_RED7)
  BIND_UINT_CONST(WRITEMASK_GREEN0)
  BIND_UINT_CONST(WRITEMASK_GREEN1)
  BIND_UINT_CONST(WRITEMASK_GREEN2)
  BIND_UINT_CONST(WRITEMASK_GREEN3)
  BIND_UINT_CONST(WRITEMASK_GREEN4)
  BIND_UINT_CONST(WRITEMASK_GREEN5)
  BIND_UINT_CONST(WRITEMASK_GREEN6)
  BIND_UINT_CONST(WRITEMASK_GREEN7)
  BIND_UINT_CONST(WRITEMASK_BLUE0)
  BIND_UINT_CONST(WRITEMASK_BLUE1)
  BIND_UINT_CONST(WRITEMASK_BLUE2)
  BIND_UINT_CONST(WRITEMASK_BLUE3)
  BIND_UINT_CONST(WRITEMASK_BLUE4)
  BIND_UINT_CONST(WRITEMASK_BLUE5)
  BIND_UINT_CONST(WRITEMASK_BLUE6)
  BIND_UINT_CONST(WRITEMASK_BLUE7)
  BIND_UINT_CONST(WRITEMASK_ALPHA0)
  BIND_UINT_CONST(WRITEMASK_ALPHA1)
  BIND_UINT_CONST(WRITEMASK_ALPHA2)
  BIND_UINT_CONST(WRITEMASK_ALPHA3)
  BIND_UINT_CONST(WRITEMASK_ALPHA4)
  BIND_UINT_CONST(WRITEMASK_ALPHA5)
  BIND_UINT_CONST(WRITEMASK_ALPHA6)
  BIND_UINT_CONST(WRITEMASK_ALPHA7)
  BIND_UINT_CONST(WRITEMASK_RED)
  BIND_UINT_CONST(WRITEMASK_GREEN)
  BIND_UINT_CONST(WRITEMASK_BLUE)
  BIND_UINT_CONST(WRITEMASK_ALPHA)
  BIND_UINT_CONST(WRITEMASK_RGB)
  BIND_UINT_CONST(WRITEMASK_ALL)

  // enum ShaderStage
  BIND_UINT_CONST(STAGE_CS)
  BIND_UINT_CONST(STAGE_PS)
  BIND_UINT_CONST(STAGE_VS)

  // bitfield BufferFlag
  BIND_UINT_CONST(SBCF_DYNAMIC)
  BIND_UINT_CONST(SBCF_ZEROMEM)
  BIND_UINT_CONST(SBCF_INDEX32)
  BIND_UINT_CONST(SBCF_FRAMEMEM)
  BIND_UINT_CONST(SBCF_USAGE_READ_BACK)
  BIND_UINT_CONST(SBCF_CPU_ACCESS_MASK)
  BIND_UINT_CONST(SBCF_CPU_ACCESS_WRITE)
  BIND_UINT_CONST(SBCF_CPU_ACCESS_READ)
  BIND_UINT_CONST(SBCF_BIND_MASK)
  BIND_UINT_CONST(SBCF_BIND_VERTEX)
  BIND_UINT_CONST(SBCF_BIND_INDEX)
  BIND_UINT_CONST(SBCF_BIND_CONSTANT)
  BIND_UINT_CONST(SBCF_BIND_SHADER_RES)
  BIND_UINT_CONST(SBCF_BIND_UNORDERED)
  BIND_UINT_CONST(SBCF_MISC_MASK)
  BIND_UINT_CONST(SBCF_MISC_DRAWINDIRECT)
  BIND_UINT_CONST(SBCF_MISC_ALLOW_RAW)
  BIND_UINT_CONST(SBCF_MISC_STRUCTURED)
  BIND_UINT_CONST(SBCF_MISC_ESRAM_ONLY)
  BIND_UINT_CONST(SBCF_CB_PERSISTENT)
  BIND_UINT_CONST(SBCF_CB_ONE_FRAME)
  BIND_UINT_CONST(SBCF_UA_SR_BYTE_ADDRESS)
  BIND_UINT_CONST(SBCF_UA_SR_STRUCTURED)
  BIND_UINT_CONST(SBCF_UA_BYTE_ADDRESS_READBACK)
  BIND_UINT_CONST(SBCF_UA_STRUCTURED_READBACK)
  BIND_UINT_CONST(SBCF_UA_INDIRECT)

  // unum/bitfield? ResourceBarrier
  BIND_UINT_CONST(RB_NONE)
  BIND_UINT_CONST(RB_RW_RENDER_TARGET)
  BIND_UINT_CONST(RB_RW_UAV)
  BIND_UINT_CONST(RB_RW_COPY_DEST)
  BIND_UINT_CONST(RB_RW_BLIT_DEST)
  BIND_UINT_CONST(RB_RO_SRV)
  BIND_UINT_CONST(RB_RO_CONSTANT_BUFFER)
  BIND_UINT_CONST(RB_RO_VERTEX_BUFFER)
  BIND_UINT_CONST(RB_RO_INDEX_BUFFER)
  BIND_UINT_CONST(RB_RO_INDIRECT_BUFFER)
  BIND_UINT_CONST(RB_RO_VARIABLE_RATE_SHADING_TEXTURE)
  BIND_UINT_CONST(RB_RO_COPY_SOURCE)
  BIND_UINT_CONST(RB_RO_BLIT_SOURCE)
  BIND_UINT_CONST(RB_RO_RAYTRACE_ACCELERATION_BUILD_SOURCE)
  BIND_UINT_CONST(RB_FLAG_RELEASE_PIPELINE_OWNERSHIP)
  BIND_UINT_CONST(RB_FLAG_ACQUIRE_PIPELINE_OWNERSHIP)
  BIND_UINT_CONST(RB_FLAG_SPLIT_BARRIER_BEGIN)
  BIND_UINT_CONST(RB_FLAG_SPLIT_BARRIER_END)
  BIND_UINT_CONST(RB_STAGE_VERTEX)
  BIND_UINT_CONST(RB_STAGE_PIXEL)
  BIND_UINT_CONST(RB_STAGE_COMPUTE)
  BIND_UINT_CONST(RB_STAGE_RAYTRACE)
  BIND_UINT_CONST(RB_FLUSH_UAV)
  BIND_UINT_CONST(RB_FLAG_DONT_PRESERVE_CONTENT)
  BIND_UINT_CONST(RB_SOURCE_STAGE_VERTEX)
  BIND_UINT_CONST(RB_SOURCE_STAGE_PIXEL)
  BIND_UINT_CONST(RB_SOURCE_STAGE_COMPUTE)
  BIND_UINT_CONST(RB_SOURCE_STAGE_RAYTRACE)
  BIND_UINT_CONST(RB_ALIAS_FROM)
  BIND_UINT_CONST(RB_ALIAS_TO)
  // combinations of prev flags
  BIND_UINT_CONST(RB_ALIAS_TO_AND_DISCARD)
  BIND_UINT_CONST(RB_ALIAS_ALL)
  BIND_UINT_CONST(RB_SOURCE_STAGE_ALL_GRAPHICS)
  BIND_UINT_CONST(RB_SOURCE_STAGE_ALL_SHADERS)
  BIND_UINT_CONST(RB_RW_DEPTH_STENCIL_TARGET)
  BIND_UINT_CONST(RB_RO_CONSTANT_DEPTH_STENCIL_TARGET)
  BIND_UINT_CONST(RB_RO_GENERIC_READ_BUFFER)
  BIND_UINT_CONST(RB_RO_GENERIC_READ_TEXTURE)
  BIND_UINT_CONST(RB_STAGE_ALL_SHADERS)
  BIND_UINT_CONST(RB_STAGE_ALL_GRAPHICS)

  // unum/bitfield? RenderPassTargetAction
  BIND_UINT_CONST(RP_TA_NONE)
  BIND_UINT_CONST(RP_TA_LOAD_READ)
  BIND_UINT_CONST(RP_TA_LOAD_CLEAR)
  BIND_UINT_CONST(RP_TA_LOAD_NO_CARE)
  BIND_UINT_CONST(RP_TA_LOAD_MASK)
  BIND_UINT_CONST(RP_TA_SUBPASS_READ)
  BIND_UINT_CONST(RP_TA_SUBPASS_RESOLVE)
  BIND_UINT_CONST(RP_TA_SUBPASS_WRITE)
  BIND_UINT_CONST(RP_TA_SUBPASS_KEEP)
  BIND_UINT_CONST(RP_TA_STORE_WRITE)
  BIND_UINT_CONST(RP_TA_STORE_NONE)
  BIND_UINT_CONST(RP_TA_STORE_NO_CARE)
  BIND_UINT_CONST(RP_TA_STORE_MASK)


  // BufferLock
  BIND_UINT_CONST(VBLOCK_READONLY)
  BIND_UINT_CONST(VBLOCK_WRITEONLY)
  BIND_UINT_CONST(VBLOCK_NOSYSLOCK)
  BIND_UINT_CONST(VBLOCK_DISCARD)
  BIND_UINT_CONST(VBLOCK_NOOVERWRITE)


  // BlendType
  BIND_UINT_CONST(BLEND_ZERO)
  BIND_UINT_CONST(BLEND_ONE)
  BIND_UINT_CONST(BLEND_SRCCOLOR)
  BIND_UINT_CONST(BLEND_INVSRCCOLOR)
  BIND_UINT_CONST(BLEND_SRCALPHA)
  BIND_UINT_CONST(BLEND_INVSRCALPHA)
  BIND_UINT_CONST(BLEND_DESTALPHA)
  BIND_UINT_CONST(BLEND_INVDESTALPHA)
  BIND_UINT_CONST(BLEND_DESTCOLOR)
  BIND_UINT_CONST(BLEND_INVDESTCOLOR)
  BIND_UINT_CONST(BLEND_SRCALPHASAT)
  BIND_UINT_CONST(BLEND_BOTHINVSRCALPHA)
  BIND_UINT_CONST(BLEND_BLENDFACTOR)
  BIND_UINT_CONST(BLEND_INVBLENDFACTOR)

  // BlendOperation
  BIND_UINT_CONST(BLENDOP_ADD)
  BIND_UINT_CONST(BLENDOP_SUBTRACT)
  BIND_UINT_CONST(BLENDOP_REVSUBTRACT)
  BIND_UINT_CONST(BLENDOP_MIN)
  BIND_UINT_CONST(BLENDOP_MAX)

  // CompareFunction
  BIND_UINT_CONST(CMPF_NEVER)
  BIND_UINT_CONST(CMPF_LESS)
  BIND_UINT_CONST(CMPF_EQUAL)
  BIND_UINT_CONST(CMPF_LESSEQUAL)
  BIND_UINT_CONST(CMPF_GREATER)
  BIND_UINT_CONST(CMPF_NOTEQUAL)
  BIND_UINT_CONST(CMPF_GREATEREQUAL)
  BIND_UINT_CONST(CMPF_ALWAYS)

  // CullMode
  BIND_UINT_CONST(CULL_NONE)
  BIND_UINT_CONST(CULL_CW)
  BIND_UINT_CONST(CULL_CCW)

  // StencilOpeartion
  BIND_UINT_CONST(STNCLOP_KEEP)
  BIND_UINT_CONST(STNCLOP_ZERO)
  BIND_UINT_CONST(STNCLOP_REPLACE)
  BIND_UINT_CONST(STNCLOP_INCRSAT)
  BIND_UINT_CONST(STNCLOP_DECRSAT)
  BIND_UINT_CONST(STNCLOP_INVERT)
  BIND_UINT_CONST(STNCLOP_INCR)
  BIND_UINT_CONST(STNCLOP_DECR)

  // TextureWrapMode
  BIND_UINT_CONST(TEXADDR_WRAP)
  BIND_UINT_CONST(TEXADDR_MIRROR)
  BIND_UINT_CONST(TEXADDR_CLAMP)
  BIND_UINT_CONST(TEXADDR_BORDER)
  BIND_UINT_CONST(TEXADDR_MIRRORONCE)

  // TextureFilterMode
  BIND_UINT_CONST(TEXFILTER_DEFAULT)
  BIND_UINT_CONST(TEXFILTER_POINT)
  BIND_UINT_CONST(TEXFILTER_LINEAR)
  BIND_UINT_CONST(TEXFILTER_BEST)
  BIND_UINT_CONST(TEXFILTER_COMPARE)
  BIND_UINT_CONST(TEXFILTER_NONE)

  // TEXCF
  BIND_UINT_CONST(TEXCF_RGB)
  BIND_UINT_CONST(TEXCF_RTARGET)
  BIND_UINT_CONST(TEXCF_TYPEMASK)
  BIND_UINT_CONST(TEXCF_UNORDERED)
  BIND_UINT_CONST(TEXCF_VARIABLE_RATE)
  BIND_UINT_CONST(TEXCF_SYSTEXCOPY)
  BIND_UINT_CONST(TEXCF_DYNAMIC)
  BIND_UINT_CONST(TEXCF_READABLE)
  BIND_UINT_CONST(TEXCF_READONLY)
  BIND_UINT_CONST(TEXCF_WRITEONLY)
  BIND_UINT_CONST(TEXCF_LOADONCE)
  BIND_UINT_CONST(TEXCF_MAYBELOST)
  BIND_UINT_CONST(TEXCF_STREAMING)
  BIND_UINT_CONST(TEXCF_SYSMEM)
  BIND_UINT_CONST(TEXCF_SAMPLECOUNT_2)
  BIND_UINT_CONST(TEXCF_SAMPLECOUNT_4)
  BIND_UINT_CONST(TEXCF_SAMPLECOUNT_8)
  BIND_UINT_CONST(TEXCF_CPU_CACHED_MEMORY)
  BIND_UINT_CONST(TEXCF_LINEAR_LAYOUT)
  BIND_UINT_CONST(TEXCF_ESRAM_ONLY)
  BIND_UINT_CONST(TEXCF_MOVABLE_ESRAM)
  BIND_UINT_CONST(TEXCF_SIMULTANEOUS_MULTI_QUEUE_USE)
  BIND_UINT_CONST(TEXCF_SRGBWRITE)
  BIND_UINT_CONST(TEXCF_SRGBREAD)
  BIND_UINT_CONST(TEXCF_GENERATEMIPS)
  BIND_UINT_CONST(TEXCF_CLEAR_ON_CREATE)
  BIND_UINT_CONST(TEXCF_TILED_RESOURCE)
  BIND_UINT_CONST(TEXCF_TRANSIENT)

  // TEXFMT
  BIND_UINT_CONST(TEXFMT_DEFAULT)
  BIND_UINT_CONST(TEXFMT_A8R8G8B8)
  BIND_UINT_CONST(TEXFMT_A2R10G10B10)
  BIND_UINT_CONST(TEXFMT_A2B10G10R10)
  BIND_UINT_CONST(TEXFMT_A16B16G16R16)
  BIND_UINT_CONST(TEXFMT_A16B16G16R16F)
  BIND_UINT_CONST(TEXFMT_A32B32G32R32F)
  BIND_UINT_CONST(TEXFMT_G16R16)
  BIND_UINT_CONST(TEXFMT_G16R16F)
  BIND_UINT_CONST(TEXFMT_G32R32F)
  BIND_UINT_CONST(TEXFMT_R16F)
  BIND_UINT_CONST(TEXFMT_R32F)
  BIND_UINT_CONST(TEXFMT_DXT1)
  BIND_UINT_CONST(TEXFMT_DXT3)
  BIND_UINT_CONST(TEXFMT_DXT5)
  BIND_UINT_CONST(TEXFMT_R32G32UI)
  BIND_UINT_CONST(TEXFMT_L16)
  BIND_UINT_CONST(TEXFMT_A8)
  BIND_UINT_CONST(TEXFMT_R8)
  BIND_UINT_CONST(TEXFMT_A1R5G5B5)
  BIND_UINT_CONST(TEXFMT_A4R4G4B4)
  BIND_UINT_CONST(TEXFMT_R5G6B5)
  BIND_UINT_CONST(TEXFMT_A16B16G16R16S)
  BIND_UINT_CONST(TEXFMT_A16B16G16R16UI)
  BIND_UINT_CONST(TEXFMT_A32B32G32R32UI)
  BIND_UINT_CONST(TEXFMT_ATI1N)
  BIND_UINT_CONST(TEXFMT_ATI2N)
  BIND_UINT_CONST(TEXFMT_R8G8B8A8)
  BIND_UINT_CONST(TEXFMT_R32UI)
  BIND_UINT_CONST(TEXFMT_R11G11B10F)
  BIND_UINT_CONST(TEXFMT_R8G8)
  BIND_UINT_CONST(TEXFMT_R8G8S)
  BIND_UINT_CONST(TEXFMT_BC6H)
  BIND_UINT_CONST(TEXFMT_BC7)
  BIND_UINT_CONST(TEXFMT_R8UI)

  // depth
  BIND_UINT_CONST(TEXFMT_DEPTH24)
  BIND_UINT_CONST(TEXFMT_DEPTH16)
  BIND_UINT_CONST(TEXFMT_DEPTH32)
  BIND_UINT_CONST(TEXFMT_DEPTH32_S8)


#undef BIND_INT_CONST
#undef BIND_UINT_CONST
}