include "sky_shader_global.dshl"
include "viewVecVS.dshl"
include "frustum.dshl"
include "gbuffer.dshl"
include "dagi_volmap_gi.dshl"
include "dagi_scene_voxels_common.dshl"

hlsl {
  #include "dagi_common_types.hlsli"
}

int create_debug_render_cs_frustum_visible_ambient_voxels_count_const_no = 1;
int create_debug_render_cs_drawIndirectBuffer_uav_no = 0;

shader create_debug_render_cs
{
  ENABLE_ASSERT(cs)

  (cs) {
    frustum_visible_ambient_voxels_count@buf : register(create_debug_render_cs_frustum_visible_ambient_voxels_count_const_no) hlsl {
      StructuredBuffer<uint> frustum_visible_ambient_voxels_count@buf;
    };
    drawIndirectBuffer@uav : register(create_debug_render_cs_drawIndirectBuffer_uav_no) hlsl {
      RWByteAddressBuffer drawIndirectBuffer@uav;
    };
  }

  hlsl(cs) {
    [numthreads(1, 1, 1)]
    void create_debug_render_cs()
    {
      storeBuffer(drawIndirectBuffer, 0 * 4, 36);//nverts
      storeBuffer(drawIndirectBuffer, 1 * 4, structuredBufferAt(frustum_visible_ambient_voxels_count, 0));//instances
      storeBuffer(drawIndirectBuffer, 2 * 4, 0);//start index
      storeBuffer(drawIndirectBuffer, 3 * 4, 0);//base vertex
      storeBuffer(drawIndirectBuffer, 4 * 4, 0);//base instance
    }
  }
  compile("cs_5_0", "create_debug_render_cs");
}

int debug_volmap_type = 0;
//interval debug_volmap_type: frustum<4, temporal_age<5, random_point_selected<6, selected<8, all;
int debug_cascade = 1;
buffer frustum_visible_ambient_voxels;

shader debug_render_volmap
{
  no_ablend;

  (vs) {
    globtm@f44 = globtm;
    debug_volmap_type@f2 = (debug_volmap_type, debug_cascade, 0, 0);
    world_view_pos@f3 = world_view_pos;
    frustum_visible_ambient_voxels@buf = frustum_visible_ambient_voxels hlsl {
      StructuredBuffer<uint> frustum_visible_ambient_voxels@buf;
    }
  }

  SSGI_USE_VOLMAP_GI_COORD(vs)
  SSGI_USE_VOLMAP_GI(ps)
  ENABLE_ASSERT(ps)

  hlsl {
    struct VsOutput
    {
      VS_OUT_POSITION(pos)
      float3 norm:  TEXCOORD1;
      float3 centerPos:  TEXCOORD2;
      uint4 coord: TEXCOORD3;
      //float3 cy:  TEXCOORD3;
      //float3 cz:  TEXCOORD4;
    };
  }
  hlsl(vs) {

    VsOutput test_vs(uint iId : SV_InstanceID, uint vertId : SV_VertexID)
    {
      VsOutput output;
      uint cascadeId = debug_volmap_type.y;

      uint voxel_id = frustum_visible_ambient_voxels[iId];
      uint bin;
      uint3 coord = decode_voxel_coord_safe(voxel_id, bin);

      output.coord = uint4(coord, cascadeId);
      float3 center = ambientCoordToWorldPos(coord, cascadeId);

      float size_scale = 0.1;
      float3 probeSize = ssgi_ambient_volmap_crd_to_world0_xyz(cascadeId);
      float3 cornerPos = float3(vertId&1 ? 1 : 0, vertId&2 ? 1 : 0, vertId&4 ? 1 : 0);//generate
      //float3 cornerPos = float3(vertId&1 ? 1 : 0, vertId&2 ? 1 : 0, vertId&4 ? (1-inside) : inside);//generate
      output.centerPos.xyz = center;

      float3 worldPos = center + (cornerPos*2-float3(1,1,1))*(0.5*size_scale)*ssgi_ambient_volmap_crd_to_world0_xyz(cascadeId);
      output.pos = mul(float4(worldPos, 1), globtm);
      output.norm = normalize(cornerPos*float3(2,2,2)-float3(1,1,1));
      if (debug_volmap_type.x==2 && bin!=0)
        output.pos = 2;
      else if (debug_volmap_type.x==3 && bin!=1)
        output.pos = 2;
      return output;
    }
  }

  hlsl(ps) {
    float3 test_ps(VsOutput input HW_USE_SCREEN_POS):SV_Target0
    {
      float4 screenpos = GET_SCREEN_POS(input.pos);
      //float3 normal = normalize(cross(ddx_fine(input.pointToEye), ddy_fine(input.pointToEye)));
      float3 absnorm = abs(input.norm);
      float maxn = max(max(absnorm.x, absnorm.y), absnorm.z);
      float3 w = pow2_vec3(1-saturate(maxn.xxx-absnorm));
      w = pow2_vec3(w); w = pow2_vec3(w); w = pow2_vec3(w);w = pow2_vec3(w);

      float3 dirNormal = normalize(input.norm * w);
      uint cascade = input.coord.w;
      //float3 dirNormalSq = dirNormal*dirNormal;
      //float3 color = dirNormalSq.x*input.cx + dirNormalSq.y*input.cy + dirNormalSq.z*input.cz;
      half3 ambient = half3(1,0,1);
      get_ambient(input.centerPos.xyz, dirNormal, 1, ambient);
      return ambient;
    }
  }
  //*/
  compile("target_vs", "test_vs");
  compile("target_ps", "test_ps");
}

shader debug_render_all_volmap
{
  (vs) {
    globtm@f44 = globtm;
    debug_volmap_type@f2 = (debug_volmap_type, debug_cascade, 0, 0);
    world_view_pos@f3 = world_view_pos;
  }
  INIT_VOXELS(ps)
  USE_VOXELS(ps)
  SAMPLE_VOXELS(ps)
  SSGI_USE_VOLMAP_GI_COORD(vs)
  SSGI_USE_VOLMAP_GI(ps)
  GI_USE_AMBIENT_VOLMAP(ps)

  hlsl {
    #include "spheres_vertices.hlsl"
    struct VsOutput
    {
      VS_OUT_POSITION(pos)
      float3 norm:  TEXCOORD1;
      float4 centerPos:  TEXCOORD2;
      nointerpolation uint4 coord: TEXCOORD3;
      //float3 cy:  TEXCOORD3;
      //float3 cz:  TEXCOORD4;
    };
  }

  hlsl(vs) {
    VsOutput test_vs(uint iId : SV_InstanceID, uint vertId : SV_VertexID)
    {
      VsOutput output;
      uint cascadeId = debug_volmap_type.y;

      uint3 coord = uint3( (iId%(volmap_xz_dim(cascadeId)*volmap_xz_dim(cascadeId)))/volmap_xz_dim(cascadeId),
                           iId%volmap_xz_dim(cascadeId),
                           iId/(volmap_xz_dim(cascadeId)*volmap_xz_dim(cascadeId)));
      output.coord = uint4(coord, cascadeId);
      float3 center = ambientCoordToWorldPos(coord, cascadeId);
      float size_scale = 0.1;
      float3 cornerPos = float3(vertId&1 ? 1 : 0, vertId&2 ? 1 : 0, vertId&4 ? 1 : 0);//generate 
      //float3 cornerPos = float3(vertId&1 ? 1 : 0, vertId&2 ? 1 : 0, vertId&4 ? (1-inside) : inside);//generate 
      output.centerPos.xyz = center;
      output.centerPos.w = ssgi_ambient_volmap_crd_to_world0_xyz(cascadeId).x;

      float3 worldPos;
      if (debug_volmap_type.x == 4)
      {
        float3 pos = get_sphere_vertex_pos(vertId);
        worldPos = center + pos * size_scale;
        output.norm = pos;
      }
      else
      {
        worldPos = center + (cornerPos*2-float3(1,1,1))*(0.5*size_scale)*ssgi_ambient_volmap_crd_to_world0_xyz(cascadeId);
        output.norm = normalize(cornerPos*float3(2,2,2)-float3(1,1,1));
      }
      output.pos = mul(float4(worldPos, 1), globtm);
      return output;
    }
  }

  (ps) {
    ssgi_ambient_volmap_temporal@smp3d = ssgi_ambient_volmap_temporal;
    debug_volmap_type@f2 = (debug_volmap_type, debug_cascade, 0, 0);
  }

  VOXEL_SCENE_INTERSECTION(ps)
  hlsl(ps) {
    #include <octahedral.hlsl>
    float3 test_ps(VsOutput input HW_USE_SCREEN_POS):SV_Target0
    {
      uint cascadeId = input.coord.w;
   ##if (gi_quality == raytracing)
      if (debug_volmap_type.x == 4)
      {
        float2 octOffset = octEncode(input.norm);
        octOffset = octOffset * 0.5 + 0.5;
        octOffset *= OCTAHEDRAL_TILE_SIDE_LENGTH;
        uint3 octCoord = input.coord.xyz;
        octCoord.z += ssgi_cascade_z_crd_ofs(cascadeId);
        octCoord.xy *= OCTAHEDRAL_TILE_SIDE_LENGTH;
        float2 visibility = octahedral_distances[octCoord + uint3(octOffset, 0)];
        float dead = dead_probes[input.coord.xyz+uint3(0,0,ssgi_cascade_z_crd_ofs(cascadeId))].x;
        if (dead > 0.6f)
          return float3(0, 0, 0);
        return float3(visibility.x, 0, 0);
      }
##endif
      float4 screenpos = GET_SCREEN_POS(input.pos);
      //float3 normal = normalize(cross(ddx_fine(input.pointToEye), ddy_fine(input.pointToEye)));
      float3 absnorm = abs(input.norm);
      float maxn = max(max(absnorm.x, absnorm.y), absnorm.z);
      float3 w = pow2_vec3(1-saturate(maxn.xxx-absnorm));
      w = pow2_vec3(w); w = pow2_vec3(w); w = pow2_vec3(w);w = pow2_vec3(w);

      uint cascade = input.coord.w;
      if (debug_volmap_type.x == 1)
      {
        return getIntersection(input.centerPos.xyz, input.centerPos.w/2);
      }

      float3 dirNormal = normalize(input.norm * w);
      half3 ambient = half3(1,0,1);
      if (debug_volmap_type.x == 2)
      {
        float age = ssgi_ambient_volmap_temporal[input.coord.xyz+uint3(0,0,ssgi_cascade_z_crd_ofs(cascadeId))].x;
        if (age == 0)
          return float3(1,0,0);//not-initalized
        if (age < 1.2/255.)//copied
          return float3(0,1,0);
        if (age < 2.2/255.)//inited
          return float3(0,0,1);
        return age;
      }
      uint3 coord = input.coord.xyz+uint3(0,0,ssgi_cascade_z_crd_ofs(cascadeId)*6);
      float3 nSquared = dirNormal * dirNormal;
      uint z_ofs = volmap_y_dim(cascadeId);
      ambient = nSquared.x * FETCH_AMBIENT_VOLMAP(coord + uint3(0, 0, dirNormal.x < 0 ? z_ofs : 0)) +
                nSquared.y * FETCH_AMBIENT_VOLMAP(coord + uint3(0, 0, dirNormal.y < 0 ? z_ofs * 3 : z_ofs * 2)) +
                nSquared.z * FETCH_AMBIENT_VOLMAP(coord + uint3(0, 0, dirNormal.z < 0 ? z_ofs * 5 : z_ofs * 4));

      //get_ambient(input.centerPos, dirNormal, ambient);
      //float age = ssgi_ambient_volmap_temporal[input.coord.xyz+uint3(0,0,ssgi_cascade_z_crd_ofs(input.coord.w))].x;
      //return age >= 1 ? ambient : float3(0,1,0);
      return ambient;
    }
  }
  //*/
  compile("target_vs", "test_vs");
  compile("target_ps", "test_ps");
}
