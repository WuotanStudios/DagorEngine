include "hardware_defines.dshl"
//todo: instead of two-step reduction with fixed amount of groups, we can just use atomic adds (InterlockedAdd) (and 6 uint3 instead of 6 float3 for intermediate results + 1 uint for total count of groups)
//2nd dispatch just converts from 16.16 (or, say, 12.20) to 6*float3
//this would allow up to almost infinite scaling (from one group to many, as needed (but to keep inside the range of fixed point) ), simplifies 2nd step (very simple, instead of averaging)
// and allow lazy sparse compute for many frames, while producing reasonable result on each frame (4 group is 256*4 = 1024 rays, already reasonable, *8 frames = 32k rays)
hlsl {
  #include "dagi_envi_cube_consts.hlsli"
}

//32 group is minimum for 2-stage reduction, 8192 rays. Or just one group
texture envi_probe_specular;
hlsl {
  #define WRITE_RESULT \
  if (tid == 0)\
  {\
    structuredBufferAt(ambient_cubes, gId).col[0].rgb = col0;\
    structuredBufferAt(ambient_cubes, gId).col[1].rgb = col1;\
    structuredBufferAt(ambient_cubes, gId).col[2].rgb = col2;\
    structuredBufferAt(ambient_cubes, gId).col[3].rgb = col3;\
    structuredBufferAt(ambient_cubes, gId).col[4].rgb = col4;\
    structuredBufferAt(ambient_cubes, gId).col[5].rgb = col5;\
  }
}

int ssgi_calc_envi_ambient_cube_cs_ambient_cubes_uav_no = 0;

shader ssgi_calc_envi_ambient_cube_cs
{
  (cs) {
    envi_probe_specular@smpCube = envi_probe_specular;
    ambient_cubes@uav : register(ssgi_calc_envi_ambient_cube_cs_ambient_cubes_uav_no) hlsl {
      #include "dagi_envi_cube_consts.hlsli"
      RWStructuredBuffer<AmbientCube> ambient_cubes@uav;
    };
  }

  hlsl {
    #define THREADS_PER_GROUP 64
    #define AVERAGE_CUBE_WARP_SIZE THREADS_PER_GROUP
    #include <parallel_average_cube.hlsl>
  }

  ENABLE_ASSERT(cs)

  hlsl(cs) {
    float clampedPow(float X,float Y) { return pow(max(abs(X),0.000001f),Y); }

    #include <fibonacci_sphere.hlsl>
    #include <pcg_hash.hlsl>
    #include <hammersley.hlsl>
    #include <monteCarlo.hlsl>
    #include <dagi_integrate_ambient_cube.hlsl>

    [numthreads(THREADS_PER_GROUP, 1, 1)]
    void light_voxels_cs( uint gId : SV_GroupID, uint tid: SV_GroupIndex, uint dtId : SV_DispatchThreadID )//uint3 gId : SV_GroupID,
    {
      uint random = pcg_hash(gId);

      float3 col0=0, col1=0, col2=0, col3=0, col4=0, col5=0;
      #define RAY_PER_THREAD 4

      #define NUM_GROUP_RAYS (THREADS_PER_GROUP*RAY_PER_THREAD)

      UNROLL
      for (uint i = 0; i < RAY_PER_THREAD; ++i)
      {
        uint rayId = dtId*RAY_PER_THREAD+i;
        float2 E = hammersley_rand16(rayId, NUM_GROUP_RAYS, uint2(random&0xFFFF, random>>16));
        //float2 E = fibonacci_sphere(dtId, NUM_RAYS);//intentionally use fibonacci sequence with no random. Much faster (due to cache coherency) than randomized (hammersley/fibonacci)
        float3 enviLightDir = uniform_sample_sphere( E ).xyz;
        half3 enviLightColor = texCUBElod(envi_probe_specular, float4(enviLightDir, 1)).rgb;

        integrate_cube(enviLightDir, enviLightColor, col0, col1, col2, col3, col4, col5);
      }
      const float parallel_weight = (4.f/RAY_PER_THREAD)/THREADS_PER_GROUP;
      PARALLEL_CUBE_AVERAGE
      WRITE_RESULT
    }
  }
  compile("cs_5_0", "light_voxels_cs");
}

int ssgi_average_ambient_cube_cs_ambient_cubes_uav_no = 0;

buffer gi_ambient_cubes;
shader ssgi_average_ambient_cube_cs//32 group is minimum for 2-stage reduction, 8192 rays
{
  hlsl {
    #define THREADS_PER_GROUP (NUM_ENVI_CALC_CUBES/2)
    #define AVERAGE_CUBE_WARP_SIZE THREADS_PER_GROUP
    #include <parallel_average_cube.hlsl>
  }
  (cs) {
    gi_ambient_cubes@buf = gi_ambient_cubes hlsl {
      #include <dagi_envi_cube_consts.hlsli>
      StructuredBuffer<AmbientCube> gi_ambient_cubes@buf;
    }
    ambient_cubes@uav: register(ssgi_average_ambient_cube_cs_ambient_cubes_uav_no) hlsl {
      RWStructuredBuffer<AmbientCube> ambient_cubes@uav;
    };
  }

  ENABLE_ASSERT(cs)

  hlsl(cs) {
    [numthreads(THREADS_PER_GROUP, 1, 1)]
    void light_voxels_cs( uint tid: SV_GroupIndex )//uint3 gId : SV_GroupID,
    {
      const uint gId = 0;
      const float parallel_weight = 1.f/THREADS_PER_GROUP;
      #define READ_COL(n) float3 col##n = 0.5*(structuredBufferAt(gi_ambient_cubes, tid*2+0).col[n].rgb+structuredBufferAt(gi_ambient_cubes, tid*2+1).col[n].rgb);
      READ_COL(0);READ_COL(1);READ_COL(2);READ_COL(3);READ_COL(4);READ_COL(5);
      PARALLEL_CUBE_AVERAGE
      WRITE_RESULT
    }
  }
  compile("cs_5_0", "light_voxels_cs");
}
