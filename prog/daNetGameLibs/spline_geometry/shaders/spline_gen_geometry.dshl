include "spline_gen_inc.dshl"
include "frustum.dshl"

texture spline_gen_texture_d;
texture spline_gen_texture_n;
int spline_gen_vertex_buffer_uav_no = 0;

int spline_gen_instance_count;
int spline_gen_active_instance_count;
int spline_gen_culled_buffer_uav_no = 0;
int spline_gen_params_buffer_uav_no = 1;

int spline_gen_obj_elem_count;
int spline_gen_attachment_data_uav_no = 0;

shader spline_gen_generator, spline_gen_normal_calculator
{
  if (in_editor_assume == yes) { dont_render; }
  INIT_SPLINE_GEN_INSTANTIATION_GENERATE()
  USE_SPLINE_GEN_INSTANTIATION(cs)
  ENABLE_ASSERT(cs)

  (cs)
  {
    spline_gen_vertex_buffer@uav : register(spline_gen_vertex_buffer_uav_no) hlsl {
      #include "spline_gen_buffer.hlsli"
      RWStructuredBuffer<SplineGenVertex> spline_gen_vertex_buffer@uav;
    };
  }

  if (shader == spline_gen_generator)
  {
    (cs)
    {
      spline_gen_texture_d@smp2d = spline_gen_texture_d;
    }

    hlsl (cs)
    {

      float2 get_texcoord(SplineGenInstance instance_data, float2 coord)
      {
        return coord * instance_data.tcMul;
      }

      float get_radius(SplineGenInstance instance_data, uint2 coord, float2 texcoord)
      {
        float3 radius = instance_data.radius;
        if (spline_gen_stripes == coord.y)
          return radius.z;

        float alpha = tex2Dlod(spline_gen_texture_d, float4(texcoord, 0, instance_data.displacementLod)).a;
        radius *= 1 + (alpha * 2 - 1) * instance_data.displacementStrength;
        return lerp(radius.x, radius.y, float(coord.y) * spline_gen_inverses.z);
      }

      float3 get_world_pos(float2 coord, SplineGenSpline spline, float radius)
      {
        float3 planeX = spline.bitangent;
        float3 planeY = cross(spline.tangent, spline.bitangent);
        float sina, cosa;
        sincos(coord.x * PI * 2.0, sina, cosa);
        return spline.pos + radius * (cosa * planeX - sina * planeY);
      }

      SplineGenVertex get_vertex(InstanceId instance_id, uint2 coord_uint)
      {
        SplineGenVertex vertex;
        SplineGenInstance instanceData = spline_gen_instancing_buffer[instance_id];
        float2 coord = convert_coord_to_float(coord_uint);
        vertex.texcoord = get_texcoord(instanceData, coord);
        float radius = get_radius(instanceData, coord_uint, vertex.texcoord);
        SplineGenSpline spline = spline_gen_spline_buffer[get_spline_index(instance_id, coord_uint.y)];
        vertex.worldPos = get_world_pos(coord, spline, radius);
        vertex.normal = 0;
        vertex.tangent = 0;
        vertex.bitangent = 0;
        return vertex;
      }

      [numthreads(SPLINE_GEN_COMPUTE_DIM, 1, 1)]
      void main(uint2 dispatch_thread_id : SV_DispatchThreadID)
      {
        uint hardwareInstanceId = dispatch_thread_id.y;
        uint vertexId = dispatch_thread_id.x;
        uint2 coord = get_vertex_coord(vertexId);
        if (!is_coord_valid(coord))
          return;

        InstanceId instanceId = spline_gen_indirection_buffer[hardwareInstanceId];
        SplineGenVertex vertex = get_vertex(instanceId, coord);
        structuredBufferAt(spline_gen_vertex_buffer, get_vb_index(instanceId, vertexId)) = vertex;
      }
    }
  }
  else if (shader == spline_gen_normal_calculator)
  {
    USE_UNIT_VEC_CODEC()

    hlsl (cs)
    {
      [numthreads(SPLINE_GEN_COMPUTE_DIM, 1, 1)]
      void main(uint2 dispatch_thread_id : SV_DispatchThreadID)
      {
        uint hardwareInstanceId = dispatch_thread_id.y;
        uint vertexId = dispatch_thread_id.x;
        uint2 coord = get_vertex_coord(vertexId);
        if (!is_coord_valid(coord))
          return;

        InstanceId instanceId = spline_gen_indirection_buffer[hardwareInstanceId];
        SplineGenInstance instanceData = spline_gen_instancing_buffer[instanceId];
        uint vbIndex = get_vb_index(instanceId, vertexId);

        float3 normal = float3(0,0,0);
        float3 tangent = float3(0,0,0);
        float3 bitangent = float3(0,0,0);

        if (coord.y < spline_gen_stripes || instanceData.radius.z > 0.001)
        {
          float3 pos00 = structuredBufferAt(spline_gen_vertex_buffer, vbIndex).worldPos;
          float3 pos10 = structuredBufferAt(spline_gen_vertex_buffer, decode_vb_index(instanceId, coord, int2(1, 0))).worldPos;
          float3 pos_10 = structuredBufferAt(spline_gen_vertex_buffer, decode_vb_index(instanceId, coord, int2(-1, 0))).worldPos;
          tangent = pos10 - pos_10;

          if (coord.y < spline_gen_stripes)
          {
            float3 pos01 = structuredBufferAt(spline_gen_vertex_buffer, decode_vb_index(instanceId, coord, int2(0, 1))).worldPos;
            float3 pos_11 = structuredBufferAt(spline_gen_vertex_buffer, decode_vb_index(instanceId, coord, int2(-1, 1))).worldPos;
            normal += cross(normalize(pos01 - pos00), normalize(pos10 - pos00));
            normal += cross(normalize(pos_11 - pos00), normalize(pos01 - pos00));
            normal += cross(normalize(pos_10 - pos00), normalize(pos_11 - pos00));
            bitangent += pos01 - pos00;
          }
          if (coord.y > 0)
          {
            float3 pos0_1 = structuredBufferAt(spline_gen_vertex_buffer, decode_vb_index(instanceId, coord, int2(0, -1))).worldPos;
            float3 pos1_1 = structuredBufferAt(spline_gen_vertex_buffer, decode_vb_index(instanceId, coord, int2(1, -1))).worldPos;
            normal += cross(normalize(pos0_1 - pos00), normalize(pos_10 - pos00));
            normal += cross(normalize(pos1_1 - pos00), normalize(pos0_1 - pos00));
            normal += cross(normalize(pos10 - pos00), normalize(pos1_1 - pos00));
            bitangent += pos00 - pos0_1;
          }
        }
        else
        {
          //Special handling for the tip, since all the triangles share a common point
          normal = spline_gen_spline_buffer[get_spline_index(instanceId, coord.y)].tangent;
          float3 pos1_1 = structuredBufferAt(spline_gen_vertex_buffer, decode_vb_index(instanceId, coord, int2(1, -1))).worldPos;
          float3 pos_1_1 = structuredBufferAt(spline_gen_vertex_buffer, decode_vb_index(instanceId, coord, int2(-1, -1))).worldPos;
          tangent = pos1_1 - pos_1_1;
          bitangent = cross(tangent, normal);
        }
        structuredBufferAt(spline_gen_vertex_buffer, vbIndex).normal = encode_unit_vector(normalize(normal));
        structuredBufferAt(spline_gen_vertex_buffer, vbIndex).tangent = encode_unit_vector(normalize(tangent));
        structuredBufferAt(spline_gen_vertex_buffer, vbIndex).bitangent = encode_unit_vector(normalize(bitangent));
      }
    }
  }
  compile("target_cs", "main");
}


shader spline_gen_obj_attacher
{
  if (in_editor_assume == yes) { dont_render; }
  INIT_SPLINE_GEN_INSTANTIATION_GENERATE()
  USE_SPLINE_GEN_INSTANTIATION(cs)
  INIT_SPLINE_GEN_ATTACHMENT_BATCHES(cs)
  USE_UNIT_VEC_CODEC()
  ENABLE_ASSERT(cs)

  (cs)
  {
    spline_gen_active_instance_count@i1 = (spline_gen_active_instance_count);
    spline_gen_vertex_buffer@buf = spline_gen_vertex_buffer hlsl {
      #include "spline_gen_buffer.hlsli"
      StructuredBuffer<SplineGenVertex> spline_gen_vertex_buffer@buf;
    }
    spline_gen_attachment_data@uav : register(spline_gen_attachment_data_uav_no) hlsl {
      #include "spline_gen_attachment.hlsl"
      RWStructuredBuffer<AttachmentData> spline_gen_attachment_data@uav;
    };
  }

  hlsl (cs)
  {
    #include <hammersley.hlsl>

    struct CoordEx
    {
      uint2 coord;
      float lerpS; //the fraction of coordFloat.y
    };

    CoordEx get_hammersley_coord(uint obj_id, uint obj_count, float obj_stripe_mul)
    {
      float2 coordFloat = hammersley(obj_id, obj_count).yx;
      coordFloat.x *= spline_gen_slices;
      coordFloat.y *= obj_stripe_mul * spline_gen_stripes;
      CoordEx coordEx;
      coordEx.coord = uint2(coordFloat);
      coordEx.lerpS = coordFloat.y - coordEx.coord.y;
      return coordEx;
    }

    float3x3 get_rotation_matrix(InstanceId instance_id, CoordEx coord_ex, float3 normal)
    {
      float3 tangent = lerp(spline_gen_spline_buffer[get_spline_index(instance_id, coord_ex.coord.y + 0)].tangent,
                            spline_gen_spline_buffer[get_spline_index(instance_id, coord_ex.coord.y + 1)].tangent, coord_ex.lerpS);
      float3 axisX, axisY, axisZ;
      axisY = normal;
      axisX = normalize(cross(axisY, tangent));
      axisZ = cross(axisX, axisY);
      //random rotation maybe
      return float3x3(axisX, axisY, axisZ);
    }

    float get_size(CoordEx coord_ex, float obj_size_mul, float3 radius)
    {
      float3 size = obj_size_mul * float3(1, radius.y / radius.x, radius.z / radius.x);
      if (coord_ex.coord.y < spline_gen_stripes - 1)
        return lerp(size.x, size.y, (float(coord_ex.coord.y) + coord_ex.lerpS) * spline_gen_inverses.z);
      return lerp(size.y, size.z, float(coord_ex.coord.y) + coord_ex.lerpS - float(spline_gen_stripes - 1));
    }

    [numthreads(SPLINE_GEN_ATTACHMENT_COMPUTE_X, SPLINE_GEN_ATTACHMENT_COMPUTE_Y, 1)]
    void main(uint2 dispatch_thread_id : SV_DispatchThreadID)
    {
      if (dispatch_thread_id.y >= spline_gen_active_instance_count)
        return;
      uint objectId = dispatch_thread_id.x;
      InstanceId instanceId = spline_gen_indirection_buffer[dispatch_thread_id.y];
      SplineGenInstance instanceData = spline_gen_instancing_buffer[instanceId];
      if (objectId >= instanceData.objCount)
        return;

      CoordEx coordEx = get_hammersley_coord(objectId, instanceData.objCount, instanceData.objStripeMul);
      SplineGenVertex baseVertex0 = structuredBufferAt(spline_gen_vertex_buffer, decode_vb_index(instanceId, coordEx.coord, int2(0, 0)));
      SplineGenVertex baseVertex1 = structuredBufferAt(spline_gen_vertex_buffer, decode_vb_index(instanceId, coordEx.coord, int2(0, 1)));
      float3 interpolatedNormal = normalize(lerp(decode_unit_vector(baseVertex0.normal),
                                                 decode_unit_vector(baseVertex1.normal), coordEx.lerpS));
      float3 interpolatedWorldPos = lerp(baseVertex0.worldPos, baseVertex1.worldPos, coordEx.lerpS);
      float3x3 rotScaleMat = get_rotation_matrix(instanceId, coordEx, interpolatedNormal);
      float size = get_size(coordEx, instanceData.objSizeMul, instanceData.radius);
      rotScaleMat *= size;

      AttachmentData result;
      pack_tm(rotScaleMat, interpolatedWorldPos, result);
      uint objBatchId = spline_gen_obj_batch_id_buffer[instanceData.batchIdsStart + objectId / spline_gen_attachment_batch_size];
      uint idInBatch = objectId % spline_gen_attachment_batch_size;
      spline_gen_attachment_data[objBatchId * spline_gen_attachment_batch_size + idInBatch] = result;
    }
  }
  compile("target_cs", "main");
}



shader dynamic_spline_gen
{
  if (in_editor_assume == yes) { dont_render; }
  cull_mode=none;
  NO_ATEST()

  USE_UNIT_VEC_CODEC()
  DYNAMIC_SPLINE_GEN_VS_COMMON()

  (vs)
  {
    spline_gen_vertex_buffer@buf = spline_gen_vertex_buffer hlsl {
      #include "spline_gen_buffer.hlsli"
      StructuredBuffer<SplineGenVertex> spline_gen_vertex_buffer@buf;
    }
    spline_gen_prev_vertex_buffer@buf = spline_gen_prev_vertex_buffer hlsl {
      #include "spline_gen_buffer.hlsli"
      StructuredBuffer<SplineGenVertex> spline_gen_prev_vertex_buffer@buf;
    }
  }

  hlsl (vs)
  {
    VsOutput spline_gen_vs(uint hardware_instance_id : SV_InstanceID, uint vertex_id : SV_VertexID)
    {
      InstanceId instanceId = spline_gen_culled_buffer[hardware_instance_id];
      SplineGenInstance instanceData = spline_gen_instancing_buffer[instanceId];
      SplineGenVertex currVertex = spline_gen_vertex_buffer[get_vb_index(instanceId, vertex_id)];

      VsOutput output;
      output.pos = mul(float4(currVertex.worldPos, 1), viewProjTm);
      output.pointToEye = world_view_pos - currVertex.worldPos;
      output.texcoord = currVertex.texcoord;
      output.normal = decode_unit_vector(currVertex.normal);
      output.tangent = decode_unit_vector(currVertex.tangent);
      output.bitangent = decode_unit_vector(currVertex.bitangent);
      #ifdef MOTION_VECTORS_ENABLED
        output.out_pos =  output.pos;
        float3 prevPos = currVertex.worldPos;
        if (instanceData.flags & PREV_VB_VALID)
        {
          prevPos = spline_gen_prev_vertex_buffer[get_vb_index(instanceId, vertex_id)].worldPos;
        }
        output.out_prev_pos = mul(float4(prevPos, 1), prevOrigoRelativeViewProjTm);
      #endif
      return output;
    }
  }
  compile("target_vs", "spline_gen_vs");

  (ps)
  {
    spline_gen_texture_d@smp2d = spline_gen_texture_d;
    spline_gen_texture_n@smp2d = spline_gen_texture_n;
  }

  if (dyn_model_render_pass == render_pass_normal)
  {
    DYNAMIC_SPLINE_GEN_PS_COMMON()
    hlsl (ps)
    {
      GBUFFER_OUTPUT spline_gen_ps(VsOutput input HW_USE_SCREEN_POS)
      {
        float4 packedDiffuse = tex2D(spline_gen_texture_d, input.texcoord);
        float4 packedNormalMap = tex2D(spline_gen_texture_n, input.texcoord);
        return spline_gen_ps_base_impl(input, packedDiffuse, packedNormalMap, GET_SCREEN_POS(input.pos));
      }
    }
    compile("target_ps", "spline_gen_ps");
  }
  else
  {
    compile("ps_null", "null_ps");
  }
}


shader dynamic_spline_gen_culler
{
  if (in_editor_assume == yes) { dont_render; }
  INIT_SPLINE_GEN_INSTANTIATION_GENERATE()
  INIT_AND_USE_FRUSTUM_CHECK_CS()
  ENABLE_ASSERT(cs)

  (cs)
  {
    spline_gen_instance_count@i1 = (spline_gen_instance_count);
    spline_gen_attachment_max_no@i1 = (spline_gen_attachment_max_no);
    spline_gen_obj_elem_count@i1 = (spline_gen_obj_elem_count);
    spline_gen_culled_buffer@uav : register(spline_gen_culled_buffer_uav_no) hlsl {
      RWStructuredBuffer<uint> spline_gen_culled_buffer@uav;
    };
    spline_gen_params_buffer@uav : register(spline_gen_params_buffer_uav_no) hlsl {
      RWByteAddressBuffer spline_gen_params_buffer@uav;
    };
  }
  hlsl (cs)
  {
    struct BBox3
    {
      float3 lim[2];
    };

    uint get_source_index(uint dispatch_thread_id)
    {
      if (dispatch_thread_id >= spline_gen_instance_count)
        return INVALID_INSTANCE_ID;
      return spline_gen_indirection_buffer[dispatch_thread_id];
    }

    BBox3 get_bbox(uint source_index)
    {
      BBox3 result;
      result.lim[0] = spline_gen_instancing_buffer[source_index].bbox_lim0;
      result.lim[1] = spline_gen_instancing_buffer[source_index].bbox_lim1;
      return result;
    }

    [numthreads(SPLINE_GEN_COMPUTE_DIM, 1, 1)]
    void main(uint dispatch_thread_id : SV_DispatchThreadID)
    {
      uint sourceIndex = get_source_index(dispatch_thread_id);
      if (sourceIndex == INVALID_INSTANCE_ID)
        return;
      BBox3 bbox = get_bbox(sourceIndex);
      if (testBoxB(bbox.lim[0], bbox.lim[1]))
      {
        uint culledIndex;
        spline_gen_params_buffer.InterlockedAdd(1 * 4, 1u, culledIndex);
        LOOP
        for (int i = 0; i < spline_gen_obj_elem_count; i++)
        {
          uint address = (6 + i * 5) * 4;
          spline_gen_params_buffer.InterlockedAdd(uint((CHECK_BUFFER_EXPR(spline_gen_params_buffer, address), address)), uint(spline_gen_attachment_max_no));
        }
        spline_gen_culled_buffer[culledIndex] = sourceIndex;
      }
    }
  }
  compile("target_cs", "main");
}
