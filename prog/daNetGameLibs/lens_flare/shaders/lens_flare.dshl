include "shader_global.dshl"
include "gbuffer.dshl"
include "use_volfog.dshl"
include "fom_shadows.dshl"
include "clouds_shadow.dshl"
include "sky_shader_global.dshl"
include "brunetonSky.dshl"
include "light_mask_helpers.dshl"
include "clusteredViewLights.dshl"
include "draw_indirect_buffer_layout.dshl"

// Used by the compute shader to prepare the instances
int lens_flare_prepare_flare_type;
interval lens_flare_prepare_flare_type : manual_flares < 1, omni_light_flares < 2, spot_light_flares;
buffer lens_flare_prepare_manual_lights_buf;
buffer lens_flare_prepare_indirect_draw_buf;
buffer lens_flare_prepare_indirect_dispatch_buf;
buffer lens_flare_prepare_pre_culled_instance_indices_buf;
int lens_flare_prepare_max_num_instance = 0;
buffer lens_flare_prepare_draw_indices_buf;
int lens_flare_prepare_num_manual_flares = 0;
int lens_flare_prepare_num_omni_light_flares = 0;
int lens_flare_prepare_num_spot_light_flares = 0;
float4 lens_flare_prepare_camera_pos;
float4 lens_flare_prepare_camera_dir;
int lens_flare_prepare_has_fom_shadows = 0;
interval lens_flare_prepare_has_fom_shadows : no<1, yes;
float lens_flare_prepare_dynamic_lights_fadeout_distance = 0;
int lens_flare_prepare_dynamic_lights_use_occlusion = 0;
float lens_flare_prepare_dynamic_lights_exposure_pow_param = 0;
float4x4 lens_flare_perpare_globtm;
float lens_flare_prepare_exposure_pow_param;
int lens_flare_prepare_far_depth_mip = 0;

// Used by the rendering shader
texture lens_flare_texture;
buffer lens_flare_info_buf;
buffer lens_flare_vertex_positions_buf;
float4 lens_flare_resolution;
float4 lens_flare_global_scale;
int lens_flare_rounding_type;
interval lens_flare_rounding_type : sharp < 1, rounded < 2, circle;

// Used by both shaders
buffer lens_flare_instances_buf;

shader prepare_lens_flare
{
  if (dynamic_lights_count == lights_off && (lens_flare_prepare_flare_type == omni_light_flares || lens_flare_prepare_flare_type == spot_light_flares))
  {
    dont_render;
  }

  ENABLE_ASSERT(cs)

  USE_DRAW_INDIRECT_BUFFER_LAYOUT()
  INIT_ZNZFAR_STAGE(cs)
  INIT_LOAD_DEPTH_GBUFFER_BASE(cs)
  USE_LOAD_DEPTH_GBUFFER_BASE(cs)
  USE_EMISSION_DECODE_COLOR_MAP(cs)
  PACK_UNPACK_GBUFFER_BASE(cs)
  INIT_EXPOSURE(cs)
  USE_EXPOSURE(cs)

  if (lens_flare_prepare_flare_type == manual_flares)
  {
    INIT_CLOUDS_SHADOW_BASE(-from_sun_direction.y, cs)
    USE_CLOUDS_SHADOW_BASE(cs)
  }
  else if (lens_flare_prepare_flare_type == omni_light_flares)
  {
    USE_OMNI_LIGHT_MASK(cs)
    INIT_AND_USE_CLUSTERED_VIEW_LIGHTS(cs)
  }
  else if (lens_flare_prepare_flare_type == spot_light_flares)
  {
    USE_SPOT_LIGHT_MASK(cs)
    INIT_AND_USE_CLUSTERED_VIEW_LIGHTS(cs)
  }

  INIT_BRUNETON_FOG(cs)
  BASE_USE_BRUNETON_FOG(cs)
  INIT_VOLUMETRIC_LIGHT_TRANSPARENT(cs)
  USE_VOLUMETRIC_LIGHT_TRANSPARENT(cs)

  if (lens_flare_prepare_has_fom_shadows == yes)
  {
    INIT_FOM_SHADOWS(cs)
    USE_FOM_SHADOWS(cs)
  }

  (cs) {
    globtm@f44 = lens_flare_perpare_globtm;
    num_manual_flares@i1 = (lens_flare_prepare_num_manual_flares);
    num_omni_light_flares@i1 = (lens_flare_prepare_num_omni_light_flares);
    num_spot_light_flares@i1 = (lens_flare_prepare_num_spot_light_flares);
    camera_pos@f3 = lens_flare_prepare_camera_pos;
    camera_dir@f3 = lens_flare_prepare_camera_dir;
    max_num_instance@i1 = (lens_flare_prepare_max_num_instance);
    dynamic_lights_fadeout_distance@f1 = (lens_flare_prepare_dynamic_lights_fadeout_distance);
    dynamic_lights_use_occlusion@i1 = (lens_flare_prepare_dynamic_lights_use_occlusion);
    dynamic_lights_exposure_pow_param@f1 = (lens_flare_prepare_dynamic_lights_exposure_pow_param);
    clouds_shadow_influence@f1 = clouds_shadow_influence;
    exposure_pow_param@f1 = lens_flare_prepare_exposure_pow_param;
    downsampled_far_depth_tex@smp2d = downsampled_far_depth_tex;
    far_depth_mip@i1 = lens_flare_prepare_far_depth_mip;
    far_depth_mip_resolution@f2 = get_dimensions(downsampled_far_depth_tex, lens_flare_prepare_far_depth_mip);

    preCulledInstanceIndices@uav = lens_flare_prepare_pre_culled_instance_indices_buf hlsl {
      RWStructuredBuffer<uint> preCulledInstanceIndices@uav;
    };

    occlusionDispatchArgs@uav = lens_flare_prepare_indirect_dispatch_buf hlsl {
      RWByteAddressBuffer occlusionDispatchArgs@uav;
    };

    lensFlareDrawArguments@uav = lens_flare_prepare_indirect_draw_buf hlsl {
      RWByteAddressBuffer lensFlareDrawArguments@uav;
    }

    lensFlareInstances@uav = lens_flare_instances_buf hlsl {
      #include <lens_flare/shaders/lens_flare_info.hlsli>
      RWStructuredBuffer<LensFlareInstanceData> lensFlareInstances@uav;
    }

    lensFlareDrawIndices@buf = lens_flare_prepare_draw_indices_buf hlsl {
      StructuredBuffer<uint> lensFlareDrawIndices@buf;
    };

    manualLightDataBuffer@buf = lens_flare_prepare_manual_lights_buf hlsl {
      #include <lens_flare/shaders/lens_flare_info.hlsli>
      StructuredBuffer<ManualLightFlareData> manualLightDataBuffer@buf;
    };
  }

  hlsl(cs) {
    #include <lens_flare/shaders/lens_flare_info.hlsli>

    #define INVALID_DRAW_CALL_INDEX (~0u)
    ##if lens_flare_prepare_flare_type == manual_flares
      #define NUM_FLARES (num_manual_flares)
    ##elif lens_flare_prepare_flare_type == omni_light_flares
      #define NUM_FLARES (num_omni_light_flares)
    ##elif lens_flare_prepare_flare_type == spot_light_flares
      #define NUM_FLARES (num_spot_light_flares)
    ##endif

    float getDownsampledFarDepth(int2 coord, int2 dim)
    {
      if (any(coord < 0 || coord >= dim))
        return 1;
      return texelFetch(downsampled_far_depth_tex, coord, far_depth_mip).x;
    }

    LensFlareInstanceData calculateFlareInstanceData(float4 light_pos, float base_intensity, float3 light_color, float fadeout_distance, bool use_occlusion, bool is_sun, float exposure_pow_param)
    {
      float exposureIntensityModifier = pow(getExposureScale(), exposure_pow_param);
      float intensity = base_intensity * exposureIntensityModifier;
      float4 cameraToLight = light_pos - float4(camera_pos, 1) * light_pos.w;
      if (dot(camera_dir, cameraToLight.xyz) <= 0)
        intensity = 0;
      float4 projectedLightPos = mul(globtm, light_pos);
      if (abs(projectedLightPos.w) > 0.0000001)
        projectedLightPos /= projectedLightPos.w;
      else
        intensity = 0;
      float2 lightScreenPos = projectedLightPos.xy;
      float radialCenterDistance = max(abs(lightScreenPos.x), abs(lightScreenPos.y));
      float screenEdgeSignedDistance = 1.0-radialCenterDistance;
      if (screenEdgeSignedDistance <= 0)
        intensity = 0;
      float lightRawDepth = saturate(projectedLightPos.z);

      if (fadeout_distance > 0 && screenEdgeSignedDistance < fadeout_distance)
        intensity *= saturate(screenEdgeSignedDistance / fadeout_distance);

      float2 screenTc = (lightScreenPos*float2(1, -1)*0.5+0.5);
      float2 angleSinCos = lengthSq(lightScreenPos) > 0.000001
        ? normalize(lightScreenPos)
        : float2(0, 1);


      BRANCH
      if (use_occlusion > 0 && intensity > 0) {
        // These 4 samples must contain the entire area used for occlusion test
        // A texel in downsampled depth at mip level (far_depth_mip) covers the maximum area
        // If the area is not perfectly aligned with the downsampled depth texel, 4 samples are needed to cover it
        int2 depthMipResolution = int2(far_depth_mip_resolution); //gbuffer_depth_size_load >> (far_depth_mip+1);
        float2 mipTexCoord = screenTc * depthMipResolution;
        int2 topLeftCorner = int2(mipTexCoord - float2(0.5, 0.5));
        float4 farDepths = float4(
          getDownsampledFarDepth(topLeftCorner + int2( 0, 0), depthMipResolution),
          getDownsampledFarDepth(topLeftCorner + int2(+1, 0), depthMipResolution),
          getDownsampledFarDepth(topLeftCorner + int2( 0,+1), depthMipResolution),
          getDownsampledFarDepth(topLeftCorner + int2(+1,+1), depthMipResolution)
        );

        float farDepth = min4(farDepths.x, farDepths.y, farDepths.z, farDepths.w);
        if (farDepth > lightRawDepth)
          intensity = 0;

        BRANCH
        if (intensity > 0 && abs(light_pos.w) < 0.00001)
        {
          // This implementation works with directional lights
          intensity *= get_volumetric_light_sky(screenTc, screenTc).a;
        }
        else if (intensity > 0)
        {
          float3 cameraToLight = light_pos.xyz/light_pos.w - camera_pos;
          float dist = length(cameraToLight);
          float3 view = cameraToLight / dist;
          intensity *= dot(get_volfog_with_scattering_loss(screenTc, screenTc, view, dist, linearize_z(lightRawDepth, zn_zfar.zw)), 1.0/3);
        }

        ##if lens_flare_prepare_flare_type == manual_flares
          if (is_sun) {
            intensity *= saturate(pow(clouds_shadow(camera_pos), clouds_shadow_influence));
            ##if lens_flare_prepare_has_fom_shadows == yes
              // The shadow is rendered from the sun's direction, so it only makes sense to apply to the sun.
              intensity *= getFOMShadow(camera_pos);
            ##endif
          }
        ##endif
      }

      LensFlareInstanceData result;
      result.color_intensity = float4(light_color, intensity);
      result.light_screen_pos = lightScreenPos;
      result.rotation_sin_cos = angleSinCos;
      result.radial_distances = float2(radialCenterDistance, 1-screenEdgeSignedDistance);
      result.raw_depth = lightRawDepth;
      result.padding = 0;
      return result;
    }

    void preCullAndWriteLight(LensFlareInstanceData instanceData, uint drawCallIndicesEntryIndex, bool useOcclusion)
    {
      uint firstDataIndex = lensFlareDrawIndices[drawCallIndicesEntryIndex];
      uint firstDrawCallIndex = lensFlareDrawIndices[firstDataIndex];
      BRANCH
      if (instanceData.color_intensity.w > 0 && firstDrawCallIndex != INVALID_DRAW_CALL_INDEX)
      {
        uint firstOriginalValue;
        uint originalValue;
        uint instanceBaseId = lensFlareDrawArguments.Load((DRAW_INDIRECT_ARGS_SIZEOF * firstDrawCallIndex + START_INSTANCE_LOCATION_OFFSET) * 4);
        lensFlareDrawArguments.InterlockedAdd((DRAW_INDIRECT_ARGS_SIZEOF * firstDrawCallIndex + INSTANCE_COUNT_OFFSET) * 4, 1, firstOriginalValue);
        uint dataIndex = firstDataIndex+1;
        uint drawCallIndex = lensFlareDrawIndices[dataIndex];
        LOOP
        while (drawCallIndex != INVALID_DRAW_CALL_INDEX)
        {
          lensFlareDrawArguments.InterlockedAdd((DRAW_INDIRECT_ARGS_SIZEOF * drawCallIndex + INSTANCE_COUNT_OFFSET) * 4, 1, originalValue);
          drawCallIndex = lensFlareDrawIndices[++dataIndex];
        }

        uint instanceId = firstOriginalValue + instanceBaseId;
        BRANCH
        if (instanceId < max_num_instance)
        {
          structuredBufferAt(lensFlareInstances, instanceId) = instanceData;

          BRANCH
          if (useOcclusion)
          {
            uint preCullInd;
            occlusionDispatchArgs.InterlockedAdd(0, 1, preCullInd);
            preCulledInstanceIndices[preCullInd] = instanceId;
          }
        }
        else
        {
          // This should not happen often
          lensFlareDrawArguments.InterlockedAdd((DRAW_INDIRECT_ARGS_SIZEOF * firstDrawCallIndex + INSTANCE_COUNT_OFFSET) * 4, -1, firstOriginalValue);
          dataIndex = firstDataIndex+1;
          drawCallIndex = lensFlareDrawIndices[dataIndex];
          LOOP
          while (drawCallIndex != INVALID_DRAW_CALL_INDEX)
          {
            lensFlareDrawArguments.InterlockedAdd((DRAW_INDIRECT_ARGS_SIZEOF * drawCallIndex + INSTANCE_COUNT_OFFSET) * 4, -1, originalValue);
            drawCallIndex = lensFlareDrawIndices[++dataIndex];
          }
        }
      }
    }

    struct LightData
    {
      float4 pos;
      float3 color;
      float intensity;
      float fadeoutDistance;
      uint drawCallIndicesEntryIndex;
      bool useOcclusion;
      bool isSun;
      float exposurePowParam;
    };

    ##if lens_flare_prepare_flare_type == manual_flares
      bool get_manual_flare_intensity(uint light_id, inout LightData result)
      {
        ManualLightFlareData lightData = structuredBufferAt(manualLightDataBuffer, light_id);
        bool useOcclusion = lightData.flags & MANUAL_LIGHT_FLARE_DATA_FLAGS__USE_OCCLUSION;
        bool isSun = lightData.flags & MANUAL_LIGHT_FLARE_DATA_FLAGS__IS_SUN;
        uint flareConfigId = lightData.flareConfigId;
        float3 color = lightData.color;
        float fadeoutDistance = lightData.fadeoutDistance;
        float4 lightPos = lightData.lightPos;
        float exposurePowParam = lightData.exposurePowParam;

        result.pos = lightPos;
        result.intensity = 1;
        result.color = color;
        result.fadeoutDistance = fadeoutDistance;
        result.useOcclusion = useOcclusion;
        result.isSun = isSun;
        result.drawCallIndicesEntryIndex = flareConfigId+1;
        result.exposurePowParam = exposurePowParam;
        return true;
      }
    ##endif

    ##if lens_flare_prepare_flare_type == omni_light_flares
      bool get_omni_light_intensity(uint light_id, inout LightData result)
      {
        BRANCH
        if (!check_omni_light(light_id, OMNI_LIGHT_MASK_LENS_FLARE))
          return false;

        RenderOmniLight ol = omni_lights_cb[light_id];

        float3 dirFromLight = camera_pos - ol.posRadius.xyz;
        const float sqrDistanceOffset = 0.5*0.5; // add offset to avoid really intense flare close up
        float intensity = rcp(dot(dirFromLight, dirFromLight) + sqrDistanceOffset);
        intensity *= getOmniLightIntensity(ol, camera_pos);

        result.pos = float4(ol.posRadius.xyz, 1);
        result.intensity = intensity;
        result.color = ol.colorFlags.rgb;
        result.fadeoutDistance = dynamic_lights_fadeout_distance;
        result.useOcclusion = dynamic_lights_use_occlusion;
        result.exposurePowParam = dynamic_lights_exposure_pow_param;
        result.isSun = false;
        result.drawCallIndicesEntryIndex = 0;
        return true;
      }
    ##endif

    ##if lens_flare_prepare_flare_type == spot_light_flares
      bool get_spot_light_intensity(uint light_id, inout LightData result)
      {
        BRANCH
        if (!check_spot_light(light_id, SPOT_LIGHT_MASK_LENS_FLARE))
          return false;

        RenderSpotLight sl = spot_lights_cb[light_id];
        float2 texId_scale = sl.texId_scale_shadow_contactshadow.xy;
        float3 lightDir = sl.lightDirectionAngleOffset.xyz;
        float lightAngleScale = sl.lightColorAngleScale.a;
        float lightAngleOffset = sl.lightDirectionAngleOffset.a;

        float3 dirFromLight = camera_pos - sl.lightPosRadius.xyz;
        const float sqrDistanceOffset = 0.5*0.5; // add offset to avoid really intense flare close up
        float intensity = rcp(dot(dirFromLight, dirFromLight) + sqrDistanceOffset);
        float3 dirFromLightNormalized = normalize(dirFromLight);
        intensity *= getAngleAtt(dirFromLightNormalized, lightDir, lightAngleScale, lightAngleOffset);
        intensity = applyPhotometryIntensity(dirFromLightNormalized, lightDir, texId_scale.x, texId_scale.y, intensity);

        result.pos = float4(sl.lightPosRadius.xyz, 1);
        result.intensity = intensity;
        result.color = sl.lightColorAngleScale.rgb;
        result.fadeoutDistance = dynamic_lights_fadeout_distance;
        result.useOcclusion = dynamic_lights_use_occlusion;
        result.exposurePowParam = dynamic_lights_exposure_pow_param;
        result.isSun = false;
        result.drawCallIndicesEntryIndex = 0;
        return true;
      }
    ##endif

    ##if lens_flare_prepare_flare_type == manual_flares
      [numthreads(LENS_FLARE_MANUAL_LIGHT_THREADS, 1, 1)]
    ##else
      [numthreads(LENS_FLARE_DYNAMIC_LIGHT_THREADS, 1, 1)]
    ##endif
    void main(uint3 dtId : SV_DispatchThreadID, uint GI : SV_GroupIndex)
    {
      uint light_id = dtId.x;
      if (light_id >= NUM_FLARES)
        return;

      LightData lightData;
      lightData.pos = 0;
      lightData.intensity = 0;
      lightData.color = 0;
      lightData.fadeoutDistance = 0;
      lightData.useOcclusion = false;
      lightData.exposurePowParam = 0;
      lightData.isSun = false;
      lightData.drawCallIndicesEntryIndex = 0;

      ##if lens_flare_prepare_flare_type == manual_flares
        bool lightHasFlares = get_manual_flare_intensity(light_id, lightData);
      ##elif lens_flare_prepare_flare_type == omni_light_flares
        bool lightHasFlares = get_omni_light_intensity(light_id, lightData);
      ##elif lens_flare_prepare_flare_type == spot_light_flares
        bool lightHasFlares = get_spot_light_intensity(light_id, lightData);
      ##endif

      if (lightHasFlares && lightData.intensity > 0)
      {
        LensFlareInstanceData instanceData =
          calculateFlareInstanceData(lightData.pos, lightData.intensity, lightData.color, lightData.fadeoutDistance, lightData.useOcclusion, lightData.isSun, lightData.exposurePowParam);
        preCullAndWriteLight(instanceData, lightData.drawCallIndicesEntryIndex, lightData.useOcclusion);
      }
    }
  }
  compile("target_cs", "main");
}

shader lens_flare_occlusion
{
  ENABLE_ASSERT(cs)

  INIT_ZNZFAR_STAGE(cs)
  INIT_LOAD_DEPTH_GBUFFER_BASE(cs)
  USE_LOAD_DEPTH_GBUFFER_BASE(cs)

  (cs) {
    lensFlareInstances@uav = lens_flare_instances_buf hlsl {
      #include <lens_flare/shaders/lens_flare_info.hlsli>
      RWStructuredBuffer<LensFlareInstanceData> lensFlareInstances@uav;
    }

    preCulledInstanceIndices@buf = lens_flare_prepare_pre_culled_instance_indices_buf hlsl {
      StructuredBuffer<uint> preCulledInstanceIndices@buf;
    };
  }

  hlsl(cs)
  {
    #include <lens_flare/shaders/lens_flare_info.hlsli>

    groupshared uint visiblePixels;
    groupshared uint pixelCount;

    [numthreads(LENS_FLARE_OCCLUSION_DEPTH_TEXELS, LENS_FLARE_OCCLUSION_DEPTH_TEXELS, 1)]
    void main(uint pre_cull_instance_index : SV_GroupIndex, uint3 GTid : SV_GroupThreadID, uint GI : SV_GroupIndex)
    {
      int2 texelOffset = int2(GTid.xy) - LENS_FLARE_OCCLUSION_DEPTH_TEXELS/2;

      uint instanceId = preCulledInstanceIndices[pre_cull_instance_index];
      LensFlareInstanceData instanceData = structuredBufferAt(lensFlareInstances, instanceId);

      float2 screenTc = (instanceData.light_screen_pos*float2(1, -1)*0.5+0.5);
      int2 texCoord = screenTc * gbuffer_depth_size_load + texelOffset;

      uint pixelVisible = 0;
      bool validTc = all(texCoord >= 0) && all(texCoord < gbuffer_depth_size_load);
      bool inRadius = dot(texelOffset, texelOffset) <= LENS_FLARE_OCCLUSION_DEPTH_TEXELS/2;
      uint pixelWeight = inRadius ? 1 : 0;
      BRANCH
      if (instanceData.color_intensity.w > 0.0 && pixelWeight > 0 && validTc)
      {
        pixelVisible = 1;

        float rawDepth = loadGbufferDepth(texCoord);
        if (rawDepth > instanceData.raw_depth)
          pixelVisible = 0;
      }

      BRANCH
      if (GI < 1)
      {
        visiblePixels = 0;
        pixelCount = 0;
      }
      GroupMemoryBarrierWithGroupSync();

      InterlockedAdd(visiblePixels, pixelVisible);
      InterlockedAdd(pixelCount, pixelWeight);

      GroupMemoryBarrierWithGroupSync();

      float visibility = pixelCount > 0
        ? float(visiblePixels) / float(pixelCount)
        : 0.0;

       BRANCH
       if (GI < 1)
         structuredBufferAt(lensFlareInstances, instanceId).color_intensity.w = instanceData.color_intensity.w * visibility;
    }
  }
  compile("target_cs", "main");
}

shader lens_flare
{
  ENABLE_ASSERT(ps)

  supports global_frame;
  z_write = false;
  z_test = false;
  cull_mode = none;

  blend_src = sa; blend_dst = 1;
  blend_asrc = sa; blend_adst = 1;

  (vs) {
    lens_flare_info@buf = lens_flare_info_buf hlsl {
      #include <lens_flare/shaders/lens_flare_info.hlsli>
      StructuredBuffer<LensFlareInfo> lens_flare_info@buf;
    };
    lensFlareInstances@buf = lens_flare_instances_buf hlsl {
      #include <lens_flare/shaders/lens_flare_info.hlsli>
      StructuredBuffer<LensFlareInstanceData> lensFlareInstances@buf;
    }
    resolution@f2 = (lens_flare_resolution);
    global_scale@f2 = (lens_flare_global_scale);
  }

  (ps) {
    lens_flare_texture@smp2d = lens_flare_texture;

    vertex_positions@buf = lens_flare_vertex_positions_buf hlsl {
      StructuredBuffer<float2> vertex_positions@buf;
    }
  }

  channel float2 pos = pos;
  channel float2 tc[0] = tc[0];
  channel float2 tc[1] = tc[1];

  hlsl {
    struct VsInput
    {
      float2 pos : POSITION;
      float2 tc: TEXCOORD0;
      float2 flareId__vertexId: TEXCOORD1;
    };

    struct VsOutput
    {
      VS_OUT_POSITION(pos)
      nointerpolation float4 color_intensity : TEXCOORD0;

      ##if lens_flare_rounding_type == sharp
        noperspective float4 tc_gradientIntensity_invFalloff : TEXCOORD1;
        noperspective float edgeGradientIntensity : TEXCOORD2;
      ##elif lens_flare_rounding_type == rounded
        noperspective float4 tc_pos : TEXCOORD1;
        noperspective float3 edgeDistance_vertexId_invMaxDist : TEXCOORD2;
        nointerpolation float4 roundness_radius_offset_cos : TEXCOORD3;
        nointerpolation float4 invGradient_invFalloff_invEdgeGradient_vposOffset : TEXCOORD4;
      ##elif lens_flare_rounding_type == circle
        noperspective float4 tc_normalizedPos : TEXCOORD1;
        nointerpolation float3 invGradient_invFalloff_invEdgeGradient : TEXCOORD2;
      ##endif
    };

    #ifndef M_PI
    #define M_PI (3.14159265358979323846)
    #endif
  }

  INIT_HDR(vs)
  USE_HDR(vs)

  hlsl(vs) {
    VsOutput lens_flare_vs(VsInput input HW_USE_INSTANCE_ID)
    {
      VsOutput output;

      LensFlareInstanceData instanceData = structuredBufferAt(lensFlareInstances, instance_id);

      // Early exit / discard

      BRANCH
      if (instanceData.color_intensity.w < 0.000001)
      {
        output.pos = 0; // discard vertices
        output.color_intensity = 0;
        ##if lens_flare_rounding_type == sharp
          output.tc_gradientIntensity_invFalloff = 0;
          output.edgeGradientIntensity = 0;
        ##elif lens_flare_rounding_type == rounded
          output.tc_pos = 0;
          output.edgeDistance_vertexId_invMaxDist = 0;
          output.roundness_radius_offset_cos = 0;
          output.invGradient_invFalloff_invEdgeGradient_vposOffset = 0;
        ##elif lens_flare_rounding_type == circle
          output.tc_normalizedPos = 0;
          output.invGradient_invFalloff_invEdgeGradient = 0;
        ##endif
        return output;
      }

      // --- Reading parameters ---

      uint flareId = uint(input.flareId__vertexId.x);
      bool isCenter = input.flareId__vertexId.y < 0;

      LensFlareInfo info = structuredBufferAt(lens_flare_info, flareId);
      float3 tint = info.tintRGB_invMaxDist.rgb;
      float invMaxDist = info.tintRGB_invMaxDist.w;
      float2 offset = info.offset;
      float2 scale = info.scale;
      float2 distortionScale = info.distortionScale;
      float invGradient = info.invGradient;;
      float invFalloff = info.invFalloff;
      float componentIntensity = info.intensity;;
      float axisOffset2 = info.axisOffset2;
      uint flags = info.flags;
      float distortionPow = info.distortionPow;
      float roundness = info.roundness;
      float roundingCircleRadius = info.roundingCircleRadius;
      float roundingCircleOffset = info.roundingCircleOffset;
      float roundingCircleCos = info.roundingCircleCos;
      uint vposOffset = info.vertexPosBufOffset;
      float2 rotationOffsetSinCos = info.rotationOffsetSinCos;
      bool invertedGradient = flags & LENS_FLARE_DATA_FLAGS__INVERTED_GRADIENT;
      bool useLightColor = flags & LENS_FLARE_DATA_FLAGS__USE_LIGHT_COLOR;
      bool autoRotation = flags & LENS_FLARE_DATA_FLAGS__AUTO_ROTATION;


      // --- These depend on the flare component, but not the specific vertex ---


      float distortionFactor = 0;
      if (flags & LENS_FLARE_DATA_FLAGS__RADIAL_DISTORTION)
      {
        float distortionDistance = flags & LENS_FLARE_DATA_FLAGS__RADIAL_DISTORTION_REL_TO_CENTER
          ? instanceData.radial_distances.x
          : instanceData.radial_distances.y;
        distortionFactor = pow(distortionDistance, distortionPow);
      }
      float2x2 rotation = float2x2(
        float2( rotationOffsetSinCos.y, rotationOffsetSinCos.x),
        float2(-rotationOffsetSinCos.x, rotationOffsetSinCos.y)
      );
      float intensity = componentIntensity * instanceData.color_intensity.w;
      float2 flarePos = lerp(instanceData.light_screen_pos, float2(0, 0), axisOffset2) + offset;

      float3 lightColor = instanceData.color_intensity.rgb;
      if (!useLightColor)
        lightColor.xyz = max3(lightColor.x, lightColor.y, lightColor.z);
      float3 preExposedColor = pack_hdr(lightColor*tint); // it will be modulated by texture rgb in ps


      // --- Calculations specific to this vertex ---


      float2 currentScale = lerp(scale, distortionScale, distortionFactor);
      const float invEdgeGradientMul = 0.5; // 1/2: fadeout over 2 pixels
      float invEdgeGradient = min(currentScale.x, currentScale.y) * max(resolution.x, resolution.y) * invEdgeGradientMul;

      float2 localPos = input.pos * currentScale;
      localPos = mul(rotation, localPos);
      BRANCH
      if (autoRotation)
      {
        float2x2 autoRotationTm = float2x2(
          float2( instanceData.rotation_sin_cos.y, instanceData.rotation_sin_cos.x),
          float2(-instanceData.rotation_sin_cos.x, instanceData.rotation_sin_cos.y)
        );
        localPos = mul(autoRotationTm, localPos);
      }
      localPos *= global_scale.xy;


      // --- Writing vertex output ---


      output.pos = float4(flarePos + localPos, 0, 1);
      output.color_intensity.rgb = preExposedColor;
      output.color_intensity.w = intensity;

      ##if lens_flare_rounding_type == sharp
        float edgeDistance = isCenter ? 1 : 0;
        float gradientIntensity = edgeDistance * invGradient;
        if (invertedGradient)
          gradientIntensity = 1 - gradientIntensity;
        output.tc_gradientIntensity_invFalloff.xy = input.tc;
        output.tc_gradientIntensity_invFalloff.z = gradientIntensity;
        output.tc_gradientIntensity_invFalloff.w = invFalloff;
        output.edgeGradientIntensity = edgeDistance * invEdgeGradient;
      ##elif lens_flare_rounding_type == rounded
        output.tc_pos.xy = input.tc;
        output.tc_pos.zw = input.pos;
        output.edgeDistance_vertexId_invMaxDist.x = isCenter ? 1 : 0;
        output.edgeDistance_vertexId_invMaxDist.y = isCenter ? 0 : input.flareId__vertexId.y;
        output.edgeDistance_vertexId_invMaxDist.z = invMaxDist;
        output.roundness_radius_offset_cos.x = roundness;
        output.roundness_radius_offset_cos.y = roundingCircleRadius;
        output.roundness_radius_offset_cos.z = roundingCircleOffset;
        output.roundness_radius_offset_cos.w = roundingCircleCos;
        output.invGradient_invFalloff_invEdgeGradient_vposOffset.x = invGradient;
        output.invGradient_invFalloff_invEdgeGradient_vposOffset.y = invFalloff;
        output.invGradient_invFalloff_invEdgeGradient_vposOffset.z = invertedGradient ? invEdgeGradient : 0;
        output.invGradient_invFalloff_invEdgeGradient_vposOffset.w = vposOffset;
      ##elif lens_flare_rounding_type == circle
        output.tc_normalizedPos.xy = input.tc;
        output.tc_normalizedPos.zw = input.pos * invMaxDist;
        output.invGradient_invFalloff_invEdgeGradient.x = invGradient;
        output.invGradient_invFalloff_invEdgeGradient.y = invFalloff;
        output.invGradient_invFalloff_invEdgeGradient.z = invertedGradient ? invEdgeGradient : 0;
      ##endif
      return output;
    }
  }

  hlsl(ps) {
    #include <lens_flare/shaders/lens_flare_info.hlsli>

    half4 lens_flare_ps(VsOutput input) : SV_Target
    {

      ##if lens_flare_rounding_type == sharp
        float2 tc = input.tc_gradientIntensity_invFalloff.xy;
        float invFalloff = input.tc_gradientIntensity_invFalloff.w;
      ##elif lens_flare_rounding_type == rounded

        float2 tc = input.tc_pos.xy;
        float sharpEdgeDistance = input.edgeDistance_vertexId_invMaxDist.x;
        float vertexId = input.edgeDistance_vertexId_invMaxDist.y;
        float invMaxDist = input.edgeDistance_vertexId_invMaxDist.z;
        float invGradient = input.invGradient_invFalloff_invEdgeGradient_vposOffset.x;
        float invFalloff = input.invGradient_invFalloff_invEdgeGradient_vposOffset.y;
        float invEdgeGradient = input.invGradient_invFalloff_invEdgeGradient_vposOffset.z;
        uint vposOffset = uint(input.invGradient_invFalloff_invEdgeGradient_vposOffset.w);
        float roundness = input.roundness_radius_offset_cos.x;
        float circleRadius = input.roundness_radius_offset_cos.y;
        float circleOffset = input.roundness_radius_offset_cos.z;
        float roundnessClippingConeCos = input.roundness_radius_offset_cos.w;
        float roundDistance = 1;

      ##elif lens_flare_rounding_type == circle
        float2 tc = input.tc_normalizedPos.xy;
        float invGradient = input.invGradient_invFalloff_invEdgeGradient.x;
        float invFalloff = input.invGradient_invFalloff_invEdgeGradient.y;
        float invEdgeGradient = input.invGradient_invFalloff_invEdgeGradient.z;
      ##endif

      ##if lens_flare_texture != NULL
        half4 texModifier = h4tex2D(lens_flare_texture, tc);
      ##else
        half4 texModifier = half4(1,1,1,1);
      ##endif

      float3 color = input.color_intensity.rgb * texModifier.rgb;
      float intensity = input.color_intensity.w * texModifier.a;

      ##if lens_flare_rounding_type == sharp
        float gradientIntensity = saturate(min(input.tc_gradientIntensity_invFalloff.z, input.edgeGradientIntensity));
      ##else
        ##if lens_flare_rounding_type == rounded
          // Project the vertexId to the edges -> avgVertexId is the interpolated value between the outer vertices only (influence of the central vertex is removed)
          float avgVertexId = vertexId / (1 - sharpEdgeDistance);
          float closestVertexId = round(avgVertexId);
          BRANCH
          if (roundness > 0 && sharpEdgeDistance < 1 - circleOffset && abs(avgVertexId - closestVertexId) < roundness*0.5)
          {
            float2 localPos = input.tc_pos.zw;
            float2 closestVertexPos = structuredBufferAt(vertex_positions, vposOffset + closestVertexId);
            float2 closestCirclePos = closestVertexPos * circleOffset;

            float2 circleToLocalPos = localPos - closestCirclePos;
            float circleToLocalPosDist = length(circleToLocalPos);
            float angularDiviationCos = dot(closestVertexPos, circleToLocalPos / circleToLocalPosDist);
            // edge distance is only effected by the roundness in this area
            if (angularDiviationCos > roundnessClippingConeCos && circleToLocalPosDist > 0.000001)
            {
              if (circleToLocalPosDist > circleRadius)
                discard;
              roundDistance = (circleRadius - circleToLocalPosDist) * invMaxDist;
            }
          }
          float edgeDistance = min(roundDistance, sharpEdgeDistance);
        ##elif lens_flare_rounding_type == circle
          float edgeDistance = 1-length(input.tc_normalizedPos.zw);
          if (edgeDistance < 0)
            discard;
        ##endif
        float gradientIntensity = saturate(edgeDistance * invGradient);
        if (invEdgeGradient > 0)
          gradientIntensity = min(1 - gradientIntensity, saturate(edgeDistance * invEdgeGradient));
      ##endif

      BRANCH
      if (invFalloff > 1 && gradientIntensity > 0 && gradientIntensity < 1)
        gradientIntensity = pow(gradientIntensity, invFalloff);
      return half4(color, gradientIntensity * intensity);
    }
  }

  compile("target_vs", "lens_flare_vs");
  compile("target_ps", "lens_flare_ps");
}