include "shader_global.dshl"
include "stencil_inc.dshl"
include "gbuffer.dshl"

texture outline_depth;

float4 outline_blur;
float outline_brighness;
float4 outline_scale;

int outline_final_render_AllColors_const_no = 1;

shader outline_final_render
{
  z_test=false;
  z_write=false;
  cull_mode = none;
  blend_src = 1; blend_dst = isa;

  ENABLE_ASSERT(ps)
  POSTFX_VS_TEXCOORD(1, texcoord)

  INIT_LOAD_STENCIL_BASE(ps, outline_depth, outline_depth)

  (ps) {
    outline_blur@f2 = (outline_blur);
    outline_brighness@f1 = (outline_brighness);
    outline_depth_tex_size@f2 = get_dimensions(outline_depth, 0);
    outline_scale@f4 = (outline_scale);
    AllColors@cbuf : register(outline_final_render_AllColors_const_no) hlsl {
      #include <outline_buffer_size.hlsli>
      cbuffer AllColors@cbuf {
        float4 outline_colors[COLOR_BUF_SIZE];
      };
    };
  }

  USE_EMISSION_DECODE_COLOR_MAP(ps)
  INIT_READ_GBUFFER()
  USE_READ_GBUFFER()

  hlsl(ps) {
    float4 OutlineBlur(int2 uv)
    {
      float4 color = 0;
      const int SAMPLES_COUNT = 8;
      const float EDGE = 1.0, ANGLE = 1.5;
      int2 offsets[SAMPLES_COUNT] = {int2(1, 1), int2(1, -1), int2(-1, 1), int2(-1, -1), int2(2, 0), int2(0, 2), int2(-2, 0), int2(0, -2)};
      float weights[SAMPLES_COUNT] = {ANGLE, ANGLE, ANGLE, ANGLE, EDGE, EDGE, EDGE, EDGE};
      float WEIGHT_SUM_INV = 4.0 / ((EDGE + ANGLE) * SAMPLES_COUNT);
      uint stencils[SAMPLES_COUNT];
      uint index = 0, i;
      float weight = 0;
      int2 min_tc = 0;
      int2 max_tc = outline_depth_tex_size - 1;
      UNROLL
      for(i = 0; i < SAMPLES_COUNT; ++i)
      {
        int2 tc = clamp(uv + offsets[i] * outline_blur + 0.5, min_tc, max_tc);
        stencils[i] = stencilFetch(outline_depth, tc);
        index = max(index, stencils[i]);
      }
      UNROLL
      for(i = 0; i < SAMPLES_COUNT; ++i)
      {
        FLATTEN
        if (index == stencils[i])
          weight += weights[i];
      }

      float t = saturate(weight * WEIGHT_SUM_INV);
      float4 int_color = outline_colors[index * 2 + 0];
      float4 ext_color = outline_colors[index * 2 + 1];
      color = lerp(ext_color, int_color, t);
      return color * t * outline_brighness;
    }
    float4 outline_final_render_ps(VsOutput input HW_USE_SCREEN_POS) : SV_Target
    {
      float4 pos = GET_SCREEN_POS(input.pos);
      int2 viewport_ipos = int2(pos.xy);

      // Calculating screenpos disregarding the viewport
      float2 screen_pos = outline_scale.xy + input.texcoord * outline_scale.zw;
      ProcessedGbuffer gbuffer = readProcessedGbuffer(screen_pos);

      FLATTEN
      if (stencilFetch(outline_depth, viewport_ipos) != 0 || gbuffer.isHeroCockpit)
        discard;
      return OutlineBlur(viewport_ipos);
    }
  }
  compile("target_ps", "outline_final_render_ps");
}

shader outline_fill_depth
{
  supports none;
  supports global_frame;
  cull_mode = none;

  POSTFX_VS_TEXCOORD(1, texcoord)

  INIT_READ_DEPTH_GBUFFER()
  USE_READ_DEPTH_GBUFFER()

  (ps) {
    outline_scale@f4 = (outline_scale);
  }
  hlsl(ps) {

    float outline_fill_depth_ps(VsOutput input) : SV_Depth
    {
      float2 uv = outline_scale.xy + input.texcoord * outline_scale.zw;
      float d = readGbufferDepth(uv);
      return d -  saturate(d * 100) * 0.0001;//depth dependency bias
    }
  }
  compile("target_ps", "outline_fill_depth_ps");
}
