include "dynamic_trans_inc.dshl"
include "glass.dshl"
include "indoor_light_probes.dshl"
include "gbuffer.dshl"
include "viewVecVS.dshl"
include "night_vision_inc.dshl"
include "gbuffer_to_temperature.dshl"

int lens_detail_level = 1;
interval lens_detail_level: full_night_vision < 0, full < 1, only_reflections;
int lens_render_mode = 0;
interval lens_render_mode: render_optics < 1, render_frame < 2, render_depth < 3, render_mask < 4, render_depth_by_mask;
int render_scope_collimator = 1;
interval render_scope_collimator: no < 1, yes;
float lens_dof_depth = 0.5;
float lens_brighthness = 1.0;
// Start radius coefficient, distortion strength, aberration strength.
float4 lens_distortion_params = (0.9, 0.7, 0.07, 0);
// cylinder len mul, cylinder shade radius norm, cylinder fading strength, collimator fading strength
float4 lens_shading_params = (15.0, 22.5, 1.0, 100.0);
// cylinder2 len mul, cylinder2 shade radius norm, cylinder2 fading strength
float4 lens_shading_params2 = (1.0, 2.0, 6.0, 0.0);
float4 scope_lens_local_x = (1, 0, 0, 0);
float4 scope_lens_local_y = (0, 1, 0, 0);
float4 scope_lens_local_z = (0, 0, 1, 0);

float lens_zoom_factor = 1.0;
interval lens_zoom_factor:has_zoom <1.0, no_zoom;
texture lens_frame_tex;
texture scope_lens_mask;

texture scope_reticle_tex;
float scope_reticle_size_mul = 1.0;

float scope_reticle_radius = 0.02;

shader scope_lens, dynamic_crosshair
{
  ENABLE_ASSERT(ps)
  SUPPORT_MULTIDRAW(false)
  DYNAMIC_BLOCK_TRANS()

  render_trans;

  channel float3 pos = pos;
  channel color8 norm = norm unsigned_pack;
  if (shader == dynamic_crosshair)
  {
    channel float2 tc[0] = tc[0];

    texture tex = material.texture.diffuse;

    blend_src = sa;
    blend_dst = isa;
  }

  if (shader == scope_lens && (lens_render_mode == render_depth || lens_render_mode == render_mask ||
      lens_render_mode == render_depth_by_mask) || shader == dynamic_crosshair)
  {
    z_write = true;
  }
  else
  {
    z_write = false;
  }
  z_test = true;

  if (shader == scope_lens)
  {
    // no_warnings for compatibility mode.
    static float scope_radius = 1 no_warnings;
    static float4 scope_lens_albedo = (1, 1, 1, 0.2) no_warnings;
  }
  static float scope_length = 1;

  if (shader == dynamic_crosshair && ((lens_detail_level > full && dyn_model_render_pass != render_to_depth) || lens_render_mode > render_frame) ||
    shader == scope_lens && lens_detail_level < only_reflections && lens_render_mode > render_frame)
  {
    dont_render;
  }

  INIT_ZNZFAR_STAGE(vs)
  INIT_NO_SKINNING()
  USE_HDR(ps)
  USE_THERMAL_SIGNATURE()

  hlsl(vs) {
    struct VsInput
    {
      float3 pos                  : POSITION;
      float4 normal               : NORMAL;
    ##if shader == dynamic_crosshair
      float2 texcoord             : TEXCOORD0;
    ##endif
      INIT_BONES_VSINPUT(TEXCOORD4, TEXCOORD5)
    };
  }
  hlsl {
    struct VsOutput
    {
      VS_OUT_POSITION(pos)

      float3 normal                 : TEXCOORD0;
      float3 pointToEye             : TEXCOORD1;
    ##if shader == scope_lens
      float3 eyeToLens              : TEXCOORD2;
      float2 lensScrPos             : TEXCOORD3;
      float3 lensNormal             : TEXCOORD4;
      float scopeShadowStrength     : TEXCOORD5;
    ##endif

      float4 clipPos                : TEXCOORD6;
      float3 fogMul                 : TEXCOORD7;
      float3 fogAdd                 : TEXCOORD8;

    ##if shader == dynamic_crosshair
      float2 texcoord               : TEXCOORD9;
    ##endif

      #if SET_UP_MULTIDRAW
      VSOUT_DRAW_ID
      #endif
    };
    #define CROSSHAIR_DISTANCE 50.0
  }

  NO_SKINNING_VS()

  (vs) {
    screen_size@f2 = (1.0 / screen_pos_to_texcoord.x, 1.0 / screen_pos_to_texcoord.y);
    scope_length@f1 = scope_length;
    scope_lens_local_x@f3 = scope_lens_local_x;
    scope_lens_local_y@f3 = scope_lens_local_y;
    scope_lens_local_z@f3 = scope_lens_local_z;
  }
  if (lens_render_mode == render_depth)
  {
    (vs) {
      encode_depth@f1 = ((zn_zfar.y / lens_dof_depth - 1) / (zn_zfar.y / zn_zfar.x - 1), 0, 0, 0);
    }
  }

  hlsl(vs) {
    struct SkinningOut
    {
      float3 eyeToPoint;
      float4 pos;
      float3 worldNormal;
    };

    SkinningOut calcSkinning(VsInput input, float3 local_du = float3(1, 0, 0), float3 local_dv = float3(0, 0, 1))
    {
      SkinningOut result;

      float3 eyeToPoint;
      float3 worldDu;
      float3 worldDv;
      float3 worldNormal;
      float3 localNormal = input.normal.xyz;

      instance_skinning(
        input,
        input.pos,
        localNormal,
        local_du,
        local_dv,
        result.eyeToPoint,
        result.pos,
        result.worldNormal,
        worldDu,
        worldDv);

      return result;
    }

    VsOutput scope_lens_vs(VsInput input HW_USE_INSTANCE_ID)
    {
      VsOutput output;
      #if SET_UP_MULTIDRAW
        INIT_MULTIDRAW(output);
        SET_DRAW_CALL_ID(get_draw_id() & MATERIAL_OFFSET_MASK);
      #endif

      input.normal.xyz = BGR_SWIZZLE(input.normal.rgb) * 2 - 1;
      SkinningOut vOut = calcSkinning(input);

      float3 worldNormal = normalize(vOut.worldNormal);
      float3 pointToEye = -vOut.eyeToPoint;

      output.pos = vOut.pos;
      output.pointToEye.xyz = pointToEye;
      output.normal.xyz = worldNormal;

    ##if shader == dynamic_crosshair || lens_render_mode == render_optics
      // Could be optimized (not necessary to recalculate it for every vertex).
      VsInput modifiedInput = input;
      modifiedInput.pos = float3(0, 0, 0);
      modifiedInput.normal.xyz = scope_lens_local_y.xyz;
      SkinningOut lensOut = calcSkinning(modifiedInput, scope_lens_local_x, scope_lens_local_z);
      lensOut.worldNormal = normalize(lensOut.worldNormal);

      float4 lensCenterOnParallaxPlane = mulPointTm(lensOut.eyeToPoint + lensOut.worldNormal * CROSSHAIR_DISTANCE, viewProjTm);

      ##if shader == scope_lens
        output.eyeToLens = lensOut.eyeToPoint;
        float2 lensScrTc = lensOut.pos.xy / lensOut.pos.w * float2(1, -1);
        output.lensScrPos = (lensScrTc + float2(1, 1)) * 0.5 * screen_size;
        output.lensNormal = lensOut.worldNormal;

        lensCenterOnParallaxPlane.xy /= lensCenterOnParallaxPlane.w * float2(1, -1);
        const float lensCenterToParallaxCenterRadiusUV = length(lensScrTc - lensCenterOnParallaxPlane.xy);
        const float scopeShadowMaxDistanceRadius = 0.25;
        output.scopeShadowStrength = saturate(lensCenterToParallaxCenterRadiusUV/scopeShadowMaxDistanceRadius);

      ##else
        float4 collimatorPos = lensCenterOnParallaxPlane;
        output.pos.xy /= output.pos.w;
        output.pos.xy += collimatorPos.xy / collimatorPos.w - lensOut.pos.xy / lensOut.pos.w;
        output.pos.xy *= output.pos.w;
        output.texcoord = modifiedInput.texcoord;
      ##endif

    ##else
      output.eyeToLens = 0;
      output.lensScrPos = 0;
      output.lensNormal = 0;
    ##endif
      output.clipPos = output.pos;
      // Fog isn't necessary in scopes.
      // The parameters are needed only for apply_glass_ps().
      output.fogMul = 1;
      output.fogAdd = 0;
    ##if lens_render_mode == render_depth
      output.pos.z = output.clipPos.z = encode_depth * output.pos.w;
    ##endif

      return output;
    }
  }

  compile("target_vs", "scope_lens_vs");

  if (shader == dynamic_crosshair)
  {
    static float transparency_mul = 1;
    if (dyn_model_render_pass != render_to_depth)
    {
      (ps) {
        transparency_mul@f1 = (transparency_mul);
        diffuse_tex@static = tex;
      }

      (ps) {
        screen_pos_to_texcoord@f2 = (screen_pos_to_texcoord.x, screen_pos_to_texcoord.y, 0, 0);
        scope_lens_mask@smp2d = scope_lens_mask;
      }

      hlsl(ps) {

        float4 crosshair_ps(VsOutput input HW_USE_SCREEN_POS INPUT_VFACE) : SV_Target0
        {
          #if SET_UP_MULTIDRAW
            INIT_MULTIDRAW(input);
            SET_DRAW_CALL_ID(GET_DRAW_ID(input) & MATERIAL_OFFSET_MASK);
          #endif

        ##if mobile_render != off
          float4 screenPos = GET_SCREEN_POS(input.pos);
          float maskValue = tex2D(scope_lens_mask, screenPos.xy * screen_pos_to_texcoord).r;
          if (maskValue == 0.0)
            discard;
        ##endif

          half4 diffuseColor = tex2DBindless(get_diffuse_tex(), input.texcoord);
          diffuseColor.a *= get_transparency_mul();

          return float4(pack_hdr(diffuseColor.rgb), diffuseColor.a);
        }
      }

      compile("target_ps", "crosshair_ps");
    }
    else
    {
      // Currently for all crosshairs their geometry represents their shape.
      // If it won't be so (use crosshair texture on a quad, for example), we should do atest.
      compile("ps_null", "null_ps");
    }
  }
  else
  {
    if (lens_render_mode == render_mask)
    {
      hlsl(ps) {
        float4 scope_lens_ps(VsOutput input) : SV_Target0
        {
          return float4(1, 1, 1, 1);
        }
      }
    }
    else if (lens_render_mode == render_depth || lens_render_mode == render_depth_by_mask)
    {
      if (lens_render_mode == render_depth_by_mask)
      {
        (ps) {
          screen_pos_to_texcoord@f2 = (screen_pos_to_texcoord.x, screen_pos_to_texcoord.y, 0, 0);
        }

        if (mobile_render == deferred && in_editor_assume == no)
        {
          USE_SUBPASS_LOADS()
          hlsl(ps) {
            SUBPASS_RESOURCE(scope_lens_mask, SP_LENS_DEPTH_CUT_REG_LENS_MASK, SP_LENS_DEPTH_CUT_IA_LENS_MASK)
          }
        }
        else
        {
          (ps) {
            scope_lens_mask@smp2d = scope_lens_mask;
          }
        }
      }
      hlsl(ps) {
        float4 scope_lens_ps(VsOutput input HW_USE_SCREEN_POS INPUT_VFACE) : SV_Target0
        {
          #if SET_UP_MULTIDRAW
            INIT_MULTIDRAW(input);
            SET_DRAW_CALL_ID(GET_DRAW_ID(input) & MATERIAL_OFFSET_MASK);
          #endif
        ##if lens_render_mode == render_depth_by_mask
          float4 screenPos = GET_SCREEN_POS(input.pos);
          float2 uv = screenPos.xy * screen_pos_to_texcoord;
        ##if mobile_render == deferred && in_editor_assume == no
          float maskValue = SUBPASS_LOAD(scope_lens_mask, uv).r;
        ##else
          float maskValue = tex2D(scope_lens_mask, uv).r;
        ##endif

          if (maskValue < 0.5)
            discard;
        ##endif
          return 0.0; // Default material value (i. e. sky material).
        }
      }
    }
    else if (lens_render_mode == render_frame)
    {
      (ps) {
        lens_zoom_factor@f1 = lens_zoom_factor;
        screen_size@f2 = (1.0 / screen_pos_to_texcoord.x, 1.0 / screen_pos_to_texcoord.y)
        inv_screen_size@f2 = (screen_pos_to_texcoord.x, screen_pos_to_texcoord.y)
        frame_tex@smp2d = lens_frame_tex;
      }
      hlsl(ps) {
        #include "tex2DCatmullRom.hlsl"

        float2 apply_zoom(float2 uv)
        {
          uv = uv * 2.0 - 1.0;
          uv *= lens_zoom_factor;
          uv = uv * 0.5 + 0.5;
          return uv;
        }

        float4 scope_lens_ps(VsOutput input HW_USE_SCREEN_POS INPUT_VFACE) : SV_Target0
        {
          #if SET_UP_MULTIDRAW
            INIT_MULTIDRAW(input);
            SET_DRAW_CALL_ID(GET_DRAW_ID(input) & MATERIAL_OFFSET_MASK);
          #endif

          float4 screenPos = GET_SCREEN_POS(input.pos);
          float2 uv = screenPos.xy * inv_screen_size;

          float3 frameColor;
        ##if lens_zoom_factor == has_zoom
          uv = apply_zoom(uv);
          frameColor = sample_texture_catmull_rom(frame_tex, frame_tex_samplerstate, uv, screen_size, inv_screen_size).rgb;
        ##else
          frameColor = tex2D(frame_tex, uv).rgb;
        ##endif

          return float4(frameColor, 1);
        }
      }
    }
    else
    {
      (ps) {
        screen_pos_to_texcoord@f2 = (screen_pos_to_texcoord.x, screen_pos_to_texcoord.y, 0, 0);
        scope_phys_params@f3 = (scope_radius, scope_length, 1.0 / scope_radius, 0);
        scope_lens_albedo@f4 = scope_lens_albedo;
        lens_brighthness@f1 = lens_brighthness;
        lens_distortion_params@f3 = lens_distortion_params;
        lens_shading_params@f4 = lens_shading_params;
        lens_shading_params2@f3 = lens_shading_params2;
      }

      if (lens_detail_level <= full)
      {
        (ps) { frame_tex@smp2d = lens_frame_tex; }
      }

      hlsl(ps) {
        #define isRefractionGlass 0
        #define hasNormal 0
        #define HAS_NIGHT_EMISSION 0
        #define NO_SPECULAR 0
        #include <pbr/BRDF.hlsl>
        #include <phase_functions.hlsl>
      }

      INIT_SKYLIGHT_PARAMS(ps)
      USE_SKYLIGHT_PARAMS(ps)
      INIT_ENVI_SPECULAR_SAMPLE(ps)
      USE_ENVI_SPECULAR_SAMPLE(ps)

      if (in_editor_assume == no)
      {
        SQ_CLOUDS_SHADOW(ps)
        USE_STATIC_SHADOW_ONE_CASCADE(ps)
      }

      if ((in_editor_assume == no || lens_detail_level == full_night_vision) && mobile_render == off)
      {
        INIT_READ_DEPTH_GBUFFER()
        USE_READ_DEPTH_GBUFFER()
      }
      if (lens_detail_level == full_night_vision && mobile_render == off)
      {
        INIT_READ_GBUFFER()
        USE_READ_GBUFFER_NORMAL()
        USE_AND_INIT_VIEW_VEC_PS()

        if (in_editor_assume == no)
        {
          USE_BRUNETON_FOG()
          USE_VOLUMETRIC_LIGHT_TRANSPARENT(ps)
          INIT_NIGHT_VISION()
          USE_NIGHT_VISION()
        }
      }
      else
      {
        USE_ROUGH_TO_MIP()
        USE_SKY_DIFFUSE()
        USE_INDOOR_LIGHT_PROBES(ps, false)
        GLASS_APPLY_FUNC_PS()
      }

      hlsl(ps) {
        float2 getDisTc(float2 scrpos, float2 lensScrPos, float3 lensToPoint, float2 k)
        {
          float r = length(lensToPoint);
          float scopeRad = get_scope_phys_params().x;
          float scopeInvRad = get_scope_phys_params().z;
          float startRad = lens_distortion_params.x * scopeRad;
          float distFactor = (k.x + max(r - startRad, 0) * scopeInvRad * k.y);
          return (lensScrPos + (scrpos - lensScrPos) * distFactor) * screen_pos_to_texcoord;
        }
        ##if lens_detail_level <= full
        half3 getColor(float2 scrpos, float2 lensScrPos, float3 lensToPoint)
        {
          // Chromatic aberrations.
          float distortionCoeff = lens_distortion_params.y;

          ##if (special_vision == thermal_vision)
          float2 distortedTc = getDisTc(scrpos, lensScrPos, lensToPoint, float2(1.00, -distortionCoeff));
          return tex2Dlod(frame_tex, float4(distortedTc, 0, 2)).rgb;
          ##else
          float aberrationCoeff = 1.0 - lens_distortion_params.z;
          float2 disTcR = getDisTc(scrpos, lensScrPos, lensToPoint, float2(1.00, -distortionCoeff / aberrationCoeff));
          float2 disTcG = getDisTc(scrpos, lensScrPos, lensToPoint, float2(1.00, -distortionCoeff));
          float2 disTcB = getDisTc(scrpos, lensScrPos, lensToPoint, float2(1.00, -distortionCoeff * aberrationCoeff));
          if (dot(disTcR - disTcG, disTcR - disTcG) < screen_pos_to_texcoord.x * screen_pos_to_texcoord.x)
            return tex2Dlod(frame_tex, float4(disTcG, 0, 2)).rgb; // Optimization if there isn't aberrations.
          half r = tex2Dlod(frame_tex, float4(disTcR, 0, 2)).r;
          half g = tex2Dlod(frame_tex, float4(disTcG, 0, 2)).g;
          half b = tex2Dlod(frame_tex, float4(disTcB, 0, 2)).b;
          half3 color = half3(r, g, b);
          return color;
          ##endif
        }
        ##endif

        half shadeSmooth(half radiusNorm, half shadeRadiusNorm, half shadeFadingStrength)
        {
          half factorFromCircle = max((shadeRadiusNorm - radiusNorm) * shadeFadingStrength, 0.0);
          return 1.0 - exp(-pow2(factorFromCircle));
        }

        half3 calcBackLensShift(float3 eyeToLens, float3 eyeToPoint, float3 lensNormal, half scopeLen)
        {
          half3 rView = eyeToLens * scopeLen / dot(eyeToLens, lensNormal);
          half3 r = eyeToPoint - eyeToLens;
          half3 rCentral = lensNormal * scopeLen;
          return rCentral - rView + r;
        }

        half raycastScopeCylinder(float3 eyeToLens, float3 eyeToPoint, float3 lensNormal,
          half lenMul, half shadeRadiusNorm, half shadeFadingStrength)
        {
          half scopeInvRadius = get_scope_phys_params().z;
          half scopeLen = get_scope_phys_params().y;
          half3 rBack = calcBackLensShift(eyeToLens, eyeToPoint, -lensNormal, scopeLen * lenMul);
          half dist = sqrt(dot(rBack, rBack));
          half radiusNorm = dist * scopeInvRadius;

          return shadeSmooth(radiusNorm, shadeRadiusNorm, shadeFadingStrength);
        }

        half3 getRFront(float3 eyeToLens, float3 eyeToPoint, float3 lensNormal)
        {
          half3 rCollim = eyeToLens - lensNormal * CROSSHAIR_DISTANCE;
          half rcm = dot(eyeToLens, lensNormal) / dot(rCollim, lensNormal);
          return eyeToPoint - rCollim * rcm;
        }

        half raycastScopeCollimator(half3 rFront)
        {
          half scopeInvRadius = get_scope_phys_params().z;
          half dist = sqrt(dot(rFront, rFront));
          return dist * scopeInvRadius;
        }

      #if NEED_RETICLE
        half sampleScopeReticle(half3 collimatorRFront, float3 reticleDu, float3 reticleDv)
        {
          half2 tc = half2(dot(collimatorRFront, reticleDu), dot(collimatorRFront, reticleDv)) * 0.5 + 0.5;
          return 1.0 - tex2D(scope_reticle_tex, tc).a;
        }
      #endif

        half3 apply_lens_color(half3 color, half shade_factor)
        {
          ##if lens_detail_level != full_night_vision && special_vision != thermal_vision
          shade_factor = min(shade_factor, lens_brighthness);
          ##endif

          return color * shade_factor;
        }

        half3 apply_lens_reflection(half3 color, VsOutput input, float4 screenpos, half shade_factor)
        {
          half3 reflections = half3(0,0,0);
          ##if lens_detail_level != full_night_vision && special_vision != thermal_vision
          reflections = apply_glass_ps(input, screenpos, half4(0, 0, 0, 1), 1).rgb;
          ##endif

          const float shadowedLensAlpha = (1 - shade_factor) * get_scope_lens_albedo().a;
        ##if lens_detail_level == only_reflections
          const float reflectionAlpha = shadowedLensAlpha;
        ##else
          const float unshadowedLensAlpha = 0.005;
          const float reflectionAlpha = lerp(shadowedLensAlpha, unshadowedLensAlpha, shade_factor);
        ##endif

          return color + reflections * get_scope_lens_albedo().rgb * reflectionAlpha;
        }

        float4 scope_lens_ps(VsOutput input HW_USE_SCREEN_POS INPUT_VFACE) : SV_Target0
        {
          #if SET_UP_MULTIDRAW
            INIT_MULTIDRAW(input);
            SET_DRAW_CALL_ID(GET_DRAW_ID(input) & MATERIAL_OFFSET_MASK);
          #endif

          half3 color = 0;
          float4 screenpos = GET_SCREEN_POS(input.pos);
          float3 eyeToPoint = -input.pointToEye;
          float3 lensToPoint = eyeToPoint - input.eyeToLens;
          float3 lensNormal = input.lensNormal;
          input.normal.xyz = MUL_VFACE(input.normal.xyz);

          half shadeFactor = 0;
          ##if lens_detail_level <= full && in_editor_assume == no
            half3 collimatorRFront = getRFront(input.eyeToLens, eyeToPoint, lensNormal);
            color = unpack_hdr(getColor(screenpos.xy, input.lensScrPos, lensToPoint));
            shadeFactor = raycastScopeCylinder(input.eyeToLens, eyeToPoint, lensNormal,
              lens_shading_params.x, lens_shading_params.y, lens_shading_params.z);
            shadeFactor *= raycastScopeCylinder(input.eyeToLens, eyeToPoint, -lensNormal,
              lens_shading_params2.x, lens_shading_params2.y, lens_shading_params2.z);
            ##if render_scope_collimator == yes
              float radiusNorm = raycastScopeCollimator(collimatorRFront);
              float maxScopeShadow = shadeSmooth(radiusNorm, 1.0, 1.0);
              float minScopeShadow = shadeSmooth(radiusNorm, 1.0, lens_shading_params.w);
              shadeFactor *= lerp(minScopeShadow, maxScopeShadow, input.scopeShadowStrength);
            ##endif
            #if NEED_RETICLE
              shadeFactor *= sampleScopeReticle(collimatorRFront, input.reticleDu, input.reticleDv);
            #endif
            ##if lens_detail_level == full_night_vision && mobile_render == off
            float2 tc = getDisTc(screenpos.xy, input.lensScrPos, lensToPoint, float2(1.00, -lens_distortion_params.y));
            ##if special_vision != thermal_vision
              applyNightVision(color, tc);
            ##endif

          ##endif
          ##endif

          color = apply_lens_color(color, shadeFactor);
          color = apply_lens_reflection(color, input, screenpos, shadeFactor);

          ##if (special_vision == thermal_vision && lens_detail_level == only_reflections)
            const half glass_temperature = 20.0/255.0;
            color.r = getThermalSignature(get_scope_lens_albedo().rgb* get_scope_lens_albedo().a, glass_temperature) + glass_temperature;
            color.gb = 0;
          ##endif
          return float4(pack_hdr(color), 1.0);
        }
      }
    }

    compile("target_ps", "scope_lens_ps");
  }
}

float4 scope_reticle_world_tm_0;
float4 scope_reticle_world_tm_1;
float4 scope_reticle_world_tm_2;

shader scope_reticle
{
  ENABLE_ASSERT(ps)
  supports global_frame;

  blend_src = sa;
  blend_dst = isa;

  z_write = true;
  z_test = true;

  USE_ATEST_1()

  (vs)
  {
    viewProjTm@f44 = viewprojtm;
    scope_reticle_world_tm_0@f4 = scope_reticle_world_tm_0;
    scope_reticle_world_tm_1@f4 = scope_reticle_world_tm_1;
    scope_reticle_world_tm_2@f4 = scope_reticle_world_tm_2;
    scope_reticle_size@f1 = (scope_reticle_radius * scope_reticle_size_mul, 0, 0, 0);
  }

  (ps) {
    scope_reticle_tex@smp2d = scope_reticle_tex;
  }

  hlsl {
    struct VsOutput
    {
      VS_OUT_POSITION(pos)
      float2 texcoord : TEXCOORD0;
    };
    #define CROSSHAIR_DISTANCE 50.0
  }

  hlsl(vs) {
    VsOutput scope_reticle_vs(uint vertexId : SV_VertexID)
    {
      uint subVertexId = vertexId % 4;
      float2 quadUV = float2(subVertexId % 3 != 0, subVertexId / 2);
      float4 localPos = float4(0.0, -(quadUV * 2.0 - 1.0) * scope_reticle_size, 1.0);
      float3 worldPos = float3(dot(scope_reticle_world_tm_0, localPos),
                               dot(scope_reticle_world_tm_1, localPos),
                               dot(scope_reticle_world_tm_2, localPos));
      float3 eyeToLens = float3(scope_reticle_world_tm_0.w, scope_reticle_world_tm_1.w, scope_reticle_world_tm_2.w);
      float3 lensWorldNormal = float3(scope_reticle_world_tm_0.x, scope_reticle_world_tm_1.x, scope_reticle_world_tm_2.x);
      float4 collimatorPos = mulPointTm(eyeToLens + lensWorldNormal * CROSSHAIR_DISTANCE, viewProjTm);
      float4 lensPos = mulPointTm(eyeToLens, viewProjTm);

      VsOutput output;
      output.pos = mulPointTm(worldPos, viewProjTm);
      output.pos.xy /= output.pos.w;
      output.pos.xy += collimatorPos.xy / collimatorPos.w - lensPos.xy / lensPos.w;
      output.pos.xy *= output.pos.w;
      output.texcoord = quadUV;

      return output;
    }
  }

  hlsl(ps)
  {
    float4 scope_reticle_ps(VsOutput input HW_USE_SCREEN_POS) : SV_Target0
    {
      float alpha = tex2D(scope_reticle_tex, input.texcoord).a;
      return float4(0, 0, 0, alpha);
    }
  }

  compile("target_vs", "scope_reticle_vs");
  compile("target_ps", "scope_reticle_ps");
}
