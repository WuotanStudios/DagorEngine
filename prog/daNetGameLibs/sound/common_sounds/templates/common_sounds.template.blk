sound_effect{
  _use:t="sound_control"

  _group{
    _tags:t="sound"
    sound_control__range:r=0
  }

  _group{
    _tags:t="sound"
    sound_effect__path:t=""
    sound_effect__localOffset:p3=0, 0, 0
    sound_effect__abandonOnReset:b=no
    sound_effect__autoRange:b=yes
    "sound_effect__event:SoundEvent"{}
  }
}

sound_effect_with_transform{
  _use:t="sound_effect"
  transform:m=[[1, 0, 0] [0, 1, 0] [0, 0, 1] [0, 0, 0]]
}

replicated_sound_effect{
  _use:t="sound_effect_with_transform"
  _use:t="replicating"
  replicated_sound_effect__path:t=""
}

disable_sound_effect{
  _use:t="disable_sound_control"
}

moveable_sound_effect{
  "movableSoundEffect:tag"{_tags:t="sound";}
}

watchable_sound_effect{
  "watchableSoundEffect:tag"{_tags:t="sound";}
}

test_sound_effect{
  _use:t="sound_effect"
  _use:t="sfx_managed_sound"
  transform:m=[[1, 0, 0] [0, 1, 0] [0, 0, 1] [0, 0, 0]]
  _group{
    _tags:t="sound"
    sound_effect__path:t="env_effects/fire/fire_mid"
  }
}

sound_effect_speed_var{
  _group{
    _tags:t="sound"
    sound_effect_speed_var__pos:p3=0,0,0
    sound_effect_speed_var__speedToVar:p4=0,10,0,100
  }
}

sound_effect_2d{
  _use:t="sound_banks_state"
  _use:t="replicating"

  _group{
    _tags:t="sound"
    sound_effect_2d__path:t=""
    sound_effect_2d__abandonOnReset:b=yes
    "sound_effect_2d__event:SoundEvent"{}
  }
}

phys_obj_collision_sound{
  _group{
    _tags:t="sound"
    phys_obj_collision_sound__maxImpulse:r=0
    phys_obj_collision_sound__time:r=-0.25
    // setup
    phys_obj_collision_sound__path:t=""
    phys_obj_collision_sound__threshold:p2=5, 80
    phys_obj_collision_sound__omegaMul:r=1
    phys_obj_collision_sound__maxRange:r=40
    phys_obj_collision_sound__lifetime:r=1
    "phys_obj_collision_sound__event:SoundEvent"{}
  }
}

fx_destruction_sound{
  _group{
    _tags:t="sound"
    fx_destruction_sound__path:t=""
  }
  transform:m=[[1, 0, 0] [0, 1, 0] [0, 0, 1] [0, 0, 0]]
}

// avoid using this two templates: only good for local entities with a little life time, like explosion effect
// because sound will play also on scene load and unload

on_appear_sound{
  _group{
    _tags:t="sound"
    on_appear_sound__path:t=""
  }
  transform:m=[[1, 0, 0] [0, 1, 0] [0, 0, 1] [0, 0, 0]]
}

on_disappear_sound{
  _group{
    _tags:t="sound"
    on_disappear_sound__path:t=""
  }
  transform:m=[[1, 0, 0] [0, 1, 0] [0, 0, 1] [0, 0, 0]]
}

sound_physmat{
  _use:t="replicating"
  _group{
    _tags:t="sound"
    "sound_physmat__PMIDToSMID:list<r>"{}
  }
  // setup
  _group{
    _tags:t="sound"
    sound_physmat__defPhysMatId:r=0
    sound_physmat__defSoundMatId:r=-1
    "sound_physmat__soundMaterials:list<t>"{} // order-dependent list of predefined fmod parameters
    "sound_physmat__physmatToSoundmat:object"{} // map physmat.blk material to sound material
  }
  _singleton:b=yes
}

game_effect_sound{
  game_effect_sound__hero:t=""
  game_effect_sound__enemy:t=""

  "game_effect_sound__event:SoundEvent"{
    _tags:t="sound"
  }
}

sound_landmesh_queries{
  _group{
    _tags:t="sound"
    sound_landmesh_queries__lastQueryTime:r=-1
    // biomes
    sound_landmesh_queries__biomePhysMatId:i=-1
    sound_landmesh_queries__biomeOverridesWater:b=no
    sound_landmesh_queries__biomeQueryId:i=-1
    "sound_landmesh_queries__biomeToMaterial:list<ip2>"{} // <pmid, overrideWater(bool)>
    // puddles
    sound_landmesh_queries__puddleDepth:r=0
    sound_landmesh_queries__puddleQueryId:i=-1

    // input
    sound_landmesh_queries_vars__speedSq:r=0
    sound_landmesh_queries_vars__isOnGround:b=true

    // setup
    sound_landmesh_queries__farawayThreshold:r=15
    sound_landmesh_queries__zeroSpeedThreshold:r=0.01
    sound_landmesh_queries__heroSpeedToQueryInterval:p4=0, 4, 1, 0.2
    sound_landmesh_queries__enemySpeedToQueryInterval:p4=0, 4, 1.5, 0.5
    sound_landmesh_queries__heroEnemyInAirInterval:p2=0.1,0.5
    sound_landmesh_queries__lmeshDiff:r=2
    sound_landmesh_queries__puddleQueryToDepth:p4=0.1, 0.4, 0, 0.05

    "sound_landmesh_queries__biomes:object"{
      "mud:object"{
        physmat:t="mud"
      }
      "snow:object"{
        physmat:t="snow"
        overrideWater:b=yes
      }
    }
  }
}
