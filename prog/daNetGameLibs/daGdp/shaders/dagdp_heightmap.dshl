include "biomes.dshl"
include "dagdp_common_heightmap.dshl"

buffer dagdp__instance_data;
buffer dagdp__dyn_allocs;
buffer dagdp__dyn_counters;
buffer dagdp__counters;

buffer dagdp_heightmap__draw_ranges;
buffer dagdp_heightmap__placeables;
buffer dagdp_heightmap__placeable_weights;
buffer dagdp_heightmap__placeable_tile_limits;
buffer dagdp_heightmap__renderable_indices;
buffer dagdp_heightmap__instance_regions;
buffer dagdp_heightmap__tile_positions;
buffer dagdp_heightmap__biomes;
buffer dagdp_heightmap__variants;
buffer dagdp_heightmap__indirect_args;
buffer dagdp_heightmap__visible_tile_positions;

texture dagdp_heightmap__density_mask;
float4 dagdp_heightmap__density_mask_scale_offset;

int dagdp_heightmap__num_renderables;
int dagdp_heightmap__num_placeables;
int dagdp_heightmap__num_biomes;
int dagdp_heightmap__num_tiles;

float dagdp_heightmap__max_placeable_bounding_radius;
float dagdp_heightmap__tile_pos_delta;
float dagdp_heightmap__instance_pos_delta;
float4 dagdp_heightmap__reference_pos;
float dagdp_heightmap__debug_frustum_culling_bias;

int dagdp_heightmap__prng_seed_jitter_x;
int dagdp_heightmap__prng_seed_jitter_z;
int dagdp_heightmap__prng_seed_placeable;
int dagdp_heightmap__prng_seed_slope;
int dagdp_heightmap__prng_seed_scale;
int dagdp_heightmap__prng_seed_yaw;
int dagdp_heightmap__prng_seed_pitch;
int dagdp_heightmap__prng_seed_roll;
int dagdp_heightmap__prng_seed_density;
float dagdp_heightmap__grid_jitter;
int dagdp_heightmap__lower_level;

float4 dagdp_heightmap__base_tile_pos_xz;
int4 dagdp_heightmap__base_tile_int_pos_xz;
float4 dagdp_heightmap__viewport_pos;
float dagdp_heightmap__viewport_max_distance;
int dagdp_heightmap__viewport_index;
int dagdp_heightmap__viewport_instance_offset;

shader dagdp_heightmap_cull_tiles
{
  ENABLE_ASSERT(cs)

  INIT_WORLD_HEIGHTMAP(cs)
  USE_HEIGHTMAP_COMMON(cs)
  INIT_AND_USE_FRUSTUM_CHECK_BASE(cs)

  (cs) {
    indirect_args@uav = dagdp_heightmap__indirect_args hlsl {
      RWByteAddressBuffer indirect_args@uav;
    }

    tile_positions@buf = dagdp_heightmap__tile_positions hlsl {
      StructuredBuffer<int2> tile_positions@buf;
    }

    visible_tile_positions@uav = dagdp_heightmap__visible_tile_positions hlsl {
      RWByteAddressBuffer visible_tile_positions@uav;
    }

    base_tile_pos_xz@f2 = dagdp_heightmap__base_tile_pos_xz;
    tile_pos_delta@f1 = dagdp_heightmap__tile_pos_delta;
    max_placeable_bounding_radius@f1 = dagdp_heightmap__max_placeable_bounding_radius;
    num_tiles@i1 = dagdp_heightmap__num_tiles;
    viewport_pos@f3 = dagdp_heightmap__viewport_pos;
    viewport_max_distance@f1 = dagdp_heightmap__viewport_max_distance;
    viewport_index@i1 = dagdp_heightmap__viewport_index;
  }

  hlsl(cs)
  {
    #define SQRT_1_2 0.70710678118
    #include "dagdp_heightmap.hlsli"
    [numthreads(TILE_COUNT_PER_GROUP, 1, 1)]
    void main(uint dtId : SV_DispatchThreadID)
    {
      BRANCH
      if (dtId == 0)
      {
        storeBuffer(indirect_args, viewport_index * DISPATCH_INDIRECT_BYTE_SIZE + 4, 1);
        storeBuffer(indirect_args, viewport_index * DISPATCH_INDIRECT_BYTE_SIZE + 8, 1);
      }

      BRANCH
      if (dtId < num_tiles)
      {
        const int2 tileIntPos = structuredBufferAt(tile_positions, dtId);
        const float2 tilePosXZ = base_tile_pos_xz + tile_pos_delta * tileIntPos;
        const float distXZ = max(0.0, distance(viewport_pos.xz, tilePosXZ + 0.5 * tile_pos_delta) - tile_pos_delta * SQRT_1_2); // Lower bound of horizontal distance to tile.
        const float yRange = sqrt(viewport_max_distance * viewport_max_distance - distXZ * distXZ); // Higher bound of Y viewport range for the tile.
        const float3 tilePos = float3(tilePosXZ.x, viewport_pos.y - yRange, tilePosXZ.y);
        const float3 tileSize = float3(tile_pos_delta, 2.0 * yRange, tile_pos_delta);

        BRANCH
        if (testBoxB(tilePos - max_placeable_bounding_radius, tilePos + tileSize + 2.0 * max_placeable_bounding_radius))
        {
          uint tileIdx;
          indirect_args.InterlockedAdd(viewport_index * DISPATCH_INDIRECT_BYTE_SIZE, 1, tileIdx);
          storeBuffer2(visible_tile_positions, tileIdx * TILE_POSITION_BYTE_SIZE, tileIntPos);
        }
      }
    }
  }
  compile("target_cs", "main");
}

shader dagdp_heightmap_place, dagdp_heightmap_place_stage0, dagdp_heightmap_place_stage1
{
  ENABLE_ASSERT(cs)

  (cs) {
    instance_data@uav = dagdp__instance_data hlsl {
      RWBuffer<float4> instance_data@uav;
    }

    if (shader == dagdp_heightmap_place)
    {
      counters@uav = dagdp__counters hlsl {
        RWStructuredBuffer<uint> counters@uav;
      }

      instance_regions@buf = dagdp_heightmap__instance_regions hlsl {
        StructuredBuffer<uint2> instance_regions@buf;
      }
    }
    else
    {
      dyn_counters@uav = dagdp__dyn_counters hlsl {
        RWStructuredBuffer<uint> dyn_counters@uav;
      }

      dyn_allocs@buf = dagdp__dyn_allocs hlsl {
        #include "dagdp_common.hlsli"
        StructuredBuffer<DynAlloc> dyn_allocs@buf;
      }
    }

    draw_ranges@buf = dagdp_heightmap__draw_ranges hlsl {
      StructuredBuffer<float> draw_ranges@buf;
    }

    placeables@buf = dagdp_heightmap__placeables hlsl {
      #include "dagdp_common.hlsli"
      StructuredBuffer<PlaceableGpuData> placeables@buf;
    }

    placeable_weights@buf = dagdp_heightmap__placeable_weights hlsl {
      StructuredBuffer<float> placeable_weights@buf;
    }

    renderable_indices@buf = dagdp_heightmap__renderable_indices hlsl {
      StructuredBuffer<uint> renderable_indices@buf;
    }

    placeable_tile_limits@buf = dagdp_heightmap__placeable_tile_limits hlsl {
      StructuredBuffer<uint> placeable_tile_limits@buf;
    }

    biomes@buf = dagdp_heightmap__biomes hlsl {
      StructuredBuffer<uint> biomes@buf;
    }

    variants@buf = dagdp_heightmap__variants hlsl {
      #include "dagdp_common_placer.hlsli"
      StructuredBuffer<VariantGpuData> variants@buf;
    }

    visible_tile_positions@buf = dagdp_heightmap__visible_tile_positions hlsl {
      ByteAddressBuffer visible_tile_positions@buf;
    }

    density_mask@smp2d = dagdp_heightmap__density_mask;
    density_mask_exists@i1 = (exists_tex(dagdp_heightmap__density_mask));
    density_mask_scale_offset@f4 = dagdp_heightmap__density_mask_scale_offset;

    num_renderables@i1 = dagdp_heightmap__num_renderables;
    num_placeables@i1 = dagdp_heightmap__num_placeables;
    num_biomes@i1 = dagdp_heightmap__num_biomes;

    max_placeable_bounding_radius@f1 = dagdp_heightmap__max_placeable_bounding_radius;
    tile_pos_delta@f1 = dagdp_heightmap__tile_pos_delta;
    instance_pos_delta@f1 = dagdp_heightmap__instance_pos_delta;
    debug_frustum_culling_bias@f1 = dagdp_heightmap__debug_frustum_culling_bias;
    water_level@f1 = water_level;

    prng_seed_jitter_x@i1 = dagdp_heightmap__prng_seed_jitter_x;
    prng_seed_jitter_z@i1 = dagdp_heightmap__prng_seed_jitter_z;
    prng_seed_placeable@i1 = dagdp_heightmap__prng_seed_placeable;
    prng_seed_slope@i1 = dagdp_heightmap__prng_seed_slope;
    prng_seed_scale@i1 = dagdp_heightmap__prng_seed_scale;
    prng_seed_yaw@i1 = dagdp_heightmap__prng_seed_yaw;
    prng_seed_pitch@i1 = dagdp_heightmap__prng_seed_pitch;
    prng_seed_roll@i1 = dagdp_heightmap__prng_seed_roll;
    prng_seed_density@i1 = dagdp_heightmap__prng_seed_density;
    grid_jitter@f1 = dagdp_heightmap__grid_jitter;
    lower_level@i1 = dagdp_heightmap__lower_level;

    base_tile_pos_xz@f2 = dagdp_heightmap__base_tile_pos_xz;
    base_tile_int_pos_xz@i2 = dagdp_heightmap__base_tile_int_pos_xz;
    viewport_pos@f3 = dagdp_heightmap__viewport_pos;
    viewport_max_distance@f1 = dagdp_heightmap__viewport_max_distance;
    viewport_index@i1 = dagdp_heightmap__viewport_index;
    viewport_instance_offset@i1 = dagdp_heightmap__viewport_instance_offset;
  }

  INIT_BIOMES(cs)
  USE_BIOMES(cs)
  USE_DAGDP_COMMON_HEIGHTMAP(shader != dagdp_heightmap_place, shader == dagdp_heightmap_place_stage1)

  hlsl(cs) {
    float getDensityFromMask(float2 worldXZ, int channelToUse)
    {
      BRANCH
      if (channelToUse < 0 || channelToUse > 3 || !density_mask_exists)
        return 1.0;

      float2 tc = worldXZ * density_mask_scale_offset.xy + density_mask_scale_offset.zw;
      float4 densities = tex2Dlod(density_mask, float4(tc, 0, 0));
      return densities[channelToUse];
    }

    [numthreads(1, TILE_INSTANCE_COUNT, 1)]
    void main(uint3 dtId : SV_DispatchThreadID, uint3 tId : SV_GroupThreadID)
    {
      ##if shader == dagdp_heightmap_place_stage1
        const bool isEarlyExit = structuredBufferAt(dyn_counters, DYN_COUNTERS_INDEX_SKIP_PESSIMISTIC_PLACEMENT) != 0;
        ##if hardware.dx11
          // Work around compiler assuming varying flow control.
          BRANCH
          if (threadGroupAnyTrue(isEarlyExit, tId.y))
            return;
        ##else
          BRANCH
          if (isEarlyExit)
            return;
        ##endif
      ##endif

      // XZ position inside the tile.
      const uint2 instanceIntPos = uint2(dtId.y / TILE_INSTANCE_COUNT_1D, dtId.y % TILE_INSTANCE_COUNT_1D);

      // XZ position of the tile itself.
      const int2 tileIntPos = loadBuffer2(visible_tile_positions, dtId.x * TILE_POSITION_BYTE_SIZE);

      const int2 stablePos = (base_tile_int_pos_xz + tileIntPos) * TILE_INSTANCE_COUNT_1D + int2(instanceIntPos);
      const float2 randPosJitter = 0.5 + grid_jitter * (float2(stableRand(stablePos, prng_seed_jitter_x), stableRand(stablePos, prng_seed_jitter_z)) - 0.5);
      const float2 instancePosXZ = base_tile_pos_xz + tile_pos_delta * tileIntPos + instance_pos_delta * (instanceIntPos + randPosJitter);

      PlacementDetails pd;
      initPlacementDetails(instancePosXZ, pd);

      FLATTEN
      if (!lower_level)
        pd.position.y = pd.topY;

      uint variantIndex = ~0u;
      const int biomeIndex = getBiomeIndex(pd.position);

      FLATTEN
      if (biomeIndex < num_biomes)
        variantIndex = structuredBufferAt(biomes, biomeIndex);

      uint placeableIndex = ~0u;

      VariantGpuData variant;
      FLATTEN
      if (variantIndex != ~0u)
      {
        variant = structuredBufferAt(variants, variantIndex);
        placeableIndex = getPlaceableIndex(variant, stableRand(stablePos, prng_seed_placeable));
      }

      PlaceableGpuData placeable;
      FLATTEN
      if (placeableIndex != ~0u)
      {
        placeable = structuredBufferAt(placeables, placeableIndex);

        const bool isDensityMaskOk = getDensityFromMask(pd.position.xz, GET_DENSITY_MASK_CHANNEL(placeable.flags)) > stableRand(stablePos, prng_seed_density);

        FLATTEN
        if (!isDensityMaskOk)
          placeableIndex = ~0u;
      }

      adjustPlacement(placeableIndex, placeable, stablePos, pd);

      BRANCH
      if (!threadGroupAnyTrue(placeableIndex != ~0u, tId.y)) // Whole tile is culled, can safely exit.
        return;

      finishPlacement(tId.y, stablePos, pd, placeableIndex, placeable, variant);
    }
  }
  compile("target_cs", "main");
}