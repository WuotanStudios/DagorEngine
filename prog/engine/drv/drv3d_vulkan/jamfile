Root    ?= ../../../.. ;
Location = prog/engine/drv/drv3d_vulkan ;
StrictCompile = yes ;
LinuxUseX11 ?= yes ;

TargetType  = lib ;
Target      = engine/drv/drv3d_vulkan.lib ;

include $(Root)/prog/_jBuild/defaults.jam ;

if $(Platform) = linux && $(KernelLinkage) != dynamic && $(LinuxUseX11) != yes { Exit $(Target) requires LinuxUseX11\=yes under $(Platform) ; }

Sources =
  #utils
  util/backtrace.cpp
  util/fault_report.cpp

  #engine visible interface
  d3d/resource_update_buffer.cpp
  d3d/framebuffer.cpp
  d3d/render_pass.cpp
  d3d/bindless.cpp
  d3d/resource_heap.cpp
  d3d/screen_capture.cpp
  d3d/global_const_buffer.cpp
  d3d/unimplemented.cpp
  d3d/init.cpp
  d3d/clear.cpp
  d3d/command.cpp
  d3d/compute.cpp
  d3d/conditional.cpp
  d3d/debug.cpp
  d3d/draw.cpp
  d3d/error_code.cpp
  d3d/event_query.cpp
  d3d/format.cpp
  d3d/frame_state_tm.cpp
  d3d/info.cpp
  d3d/resources.cpp
  d3d/screen.cpp
  d3d/shaders.cpp
  d3d/state.cpp
  d3d/sync.cpp
  d3d/transfer.cpp
  init_d3di.cpp
  buffer.cpp
  buffer_locktransfer.cpp
  texture.cpp

  #common stuff
  globals.cpp
  backend.cpp
  frontend.cpp
  driver_config.cpp
  driver.cpp
  swapchain.cpp
  device_featureset.cpp
  vulkan_loader.cpp
  vulkan_instance.cpp
  vulkan_device.cpp
  format_store.cpp
  vk_to_string.cpp

  #execution
  device_context.cpp
  device_context_fault_report.cpp
  device_context/execution_context.cpp
  device_context/render_pass.cpp
  render_work.cpp
  timelines.cpp
  frame_info.cpp
  temp_buffers.cpp
  cleanup_queue.cpp
  execution_sync.cpp
  execution_sync_capture.cpp
  execution_sync_buffer.cpp
  execution_sync_image.cpp
  execution_sync_acceleration_structure.cpp
  device_execution_tracker.cpp
  wrapped_command_buffer.cpp

  #shader
  shader/program.cpp
  shader/pipeline_description.cpp
  shader/program_database.cpp
  shader/spirv_extractor.cpp
  shader/debug_program.cpp
  shader/shader_info.cpp
  shader/module.cpp

  #pipeline
  raytrace/pipeline.cpp
  pipeline/base_pipeline.cpp
  pipeline/manager.cpp
  pipeline/stage_state_base.cpp
  pipeline/main_pipelines.cpp
  pipeline/variated_graphics.cpp
  pipeline/compiler.cpp
  render_state_system.cpp
  pipeline_cache.cpp

  #resources & memory
  bindless.cpp
  device_memory.cpp
  device_memory_pages.cpp
  device_resource.cpp
  resource_manager.cpp
  resource_allocators.cpp
  image_resource.cpp
  buffer_resource.cpp
  raytrace_as_resource.cpp
  render_pass_resource.cpp
  render_pass_resource_fb.cpp
  render_pass_resource_convert.cpp
  sampler_resource.cpp
  memory_heap_resource.cpp
  dummy_resources.cpp
  sampler_cache.cpp

  #debug stuff
  execution_markers.cpp
  debug_ui.cpp
  debug_ui_memory.cpp
  debug_ui_resources.cpp
  debug_ui_sync.cpp
  debug_naming.cpp
  debug_callbacks.cpp

  #state
  graphics_state.cpp
  compute_state.cpp
  pipeline_state.cpp
  pipeline_state_pending_references.cpp
  dynamic_graphics_state.cpp
  front_framebuffer_state.cpp
  front_render_pass_state.cpp
  back_scope_state.cpp
  execution_state.cpp

  #state fields
  state_field_compute.cpp
  state_field_graphics.cpp
  state_field_execution_context.cpp
  state_field_resource_binds.cpp
  state_field_framebuffer.cpp
  state_field_render_pass.cpp

  #wrappers
  pipeline_barrier.cpp
  device_queue.cpp
  subpass_dependency.cpp
  pipeline_cache_file.cpp
  logic_address.cpp
  vk_format_utils.cpp
  vk_error.cpp
  buffer_alignment.cpp

  #uncat
  timestamp_queries.cpp
  query_pools.cpp
  render_pass.cpp
  descriptor_set.cpp
  device_memory_report.cpp
  raytrace_scratch_buffer.cpp
  predicted_latency_waiter.cpp
  resource_upload_limit.cpp
;

if $(Platform) in nswitch {
  Sources += d3d/raytrace_stub.cpp ;
} else {
  Sources += d3d/raytrace.cpp ;
}

CPPopt = -DINSIDE_DRIVER ;
if [ GLOB $(Root)/prog/3rdPartyLibs/nvapi : * ]     { CPPopt += -DHAS_NVAPI ; }

if $(Platform) in android windows linux && $(Config) != rel {
  Sources += renderDoc_capture_module.cpp ;
} else {
  Sources += renderDoc_capture_module_stub.cpp ;
}

if $(Platform) in windows {
  Sources +=
    os_win32.cpp
  ;
  AddLibs +=
    Wintrust.lib
  ;
  if $(PlatformArch) in arm64 { CPPopt = [ StripStrings $(CPPopt) : -DHAS_NVAPI ] ; }
} else if $(Platform) in linux {
  Sources +=
    os_linux.cpp
  ;
  AddLibs += -lX11 ;
} else if $(Platform) in nswitch {
  Sources +=
    os_nswitch.cpp
  ;

  if $(UseNxProfiler) = yes && $(UseNxMemoryTracker) = yes {
    CPPopt += -DUSE_NX_MEMORY_TRACKER=1 ;
    Target = $(Target:S=~nmp.lib) ;
  }
} else if $(Platform) in android {
  Sources +=
    os_android.cpp
  ;
}

if $(Platform)-$(PlatformArch) = windows-x86_64 {
  Sources += amdFsrVulkan.cpp ;
  AddIncludes += $(Root)/prog/3rdPartyLibs/fsr3.1/include ;
}

if $(Config) != rel {
  UseProgLibs +=
    engine/imgui
    3rdPartyLibs/imgui-node-editor
  ;
} else {
  UseProgLibs += engine/imgui/stub ;
}

if $(Platform) in windows xboxOne scarlett {
  CPPopt +=
    -FId3d/config.h
    -FIdriver_defs.h
  ;
} else {
  CPPopt +=
    -include $(Root)/$(Location)/d3d/config.h
    -include $(Root)/$(Location)/driver_defs.h
  ;
}
if $(Platform) = linux { CPPopt += -DUSE_X11 ; }

AddIncludes +=
  $(Root)/prog/engine/sharedInclude
  $(Root)/prog/engine/drv/drv3d_commonCode
  $(Root)/prog/engine/drv/drv3d_vulkan
  $(Root)/prog/3rdPartyLibs/vulkan/include
  $(Root)/prog/3rdPartyLibs/nvapi
  $(Root)/prog/3rdPartyLibs/vulkan/smol-v/source
  $(Root)/prog/3rdPartyLibs/vulkan/spirv-tools/include
  $(Root)/prog/dagorInclude
  $(Root)/prog/3rdPartyLibs/imgui
  $(Root)/prog/3rdPartyLibs/imgui-node-editor
;

UseProgLibs +=
  engine/drv/drv3d_commonCode
  3rdPartyLibs/vulkan/smol-v
;

include $(Root)/prog/_jBuild/build.jam ;
