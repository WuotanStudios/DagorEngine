Root    ?= ../../../.. ;
Location = prog/engine/drv/drv3d_commonCode ;

include $(Root)/prog/_jBuild/defaults.jam ;

TargetType  = lib ;
Target      = engine/drv/drv3d_commonCode.lib ;
if $(UseD3DMulti) = yes && $(UseD3DMultiList) = stub { Target = $(Target:S=-s.lib) ; }

Sources =
  drvDecl.cpp
  gpuMem.cpp
  gpuVendor.cpp
  gpuConfig.cpp
  display.cpp
  d3dToTexFmt.cpp
  basetexture.cpp
  d3d_initialSettings.cpp
  drv_utils.cpp
  drv_resourceChecker.cpp
  dxgi_utils.cpp
  stereoHelper.cpp
  hangHandler.cpp
  ICrashFallback.cpp
  drv_returnAddrStore.cpp
  resUpdateBufferGeneric.cpp
  resourceActivationGeneric.cpp
  destroyEvent.cpp
;

if $(Platform) in windows {
  Sources +=
    winapi_helpers.cpp
  ;
}

if $(Platform) = macOS {
  Sources +=
    gpuMemM.mm
    macosx/macWnd.mm
  ;
}

if $(Platform) in macOS iOS tvOS {
  Sources +=
    displayM.mm
  ;
}

if [ GLOB $(Root)/prog/3rdPartyLibs/nvapi : * ]     { CPPopt += -DHAS_NVAPI ; }
if [ GLOB $(Root)/prog/3rdPartyLibs/streamline : * ] { CPPopt += -DHAS_STREAMLINE ; }

if $(Platform) in windows && -DHAS_NVAPI in $(CPPopt) {
  Sources +=
    nvLowLatency.cpp
  ;
  switch $(PlatformArch) {
    case x86 :    AddLibs += $(Root)/prog/3rdPartyLibs/nvapi/x86/nvapi.lib ;
    case x86_64 : AddLibs += $(Root)/prog/3rdPartyLibs/nvapi/amd64/nvapi64.lib ;
    case * : CPPopt = [ StripStrings $(CPPopt) : -DHAS_NVAPI ] ;
  }
}
else {
  Sources +=
    nvLowLatencyStub.cpp
  ;
}

if $(Platform)-$(PlatformArch) = windows-x86_64 && -DHAS_STREAMLINE in $(CPPopt) {
  Sources +=
    streamline_adapter.cpp
  ;
  AddIncludes += $(Root)/prog/3rdPartyLibs/streamline/include
  ;
}
else {
  Sources +=
    streamline_adapter_stub.cpp
  ;
}

if $(Platform) in windows xboxOne scarlett ps5 && $(PlatformArch) in x86_64 arm64 && $(UseD3DMultiList) != stub {
  Sources += amdFsr.cpp ;

  if $(Platform)-$(PlatformArch) = windows-x86_64 && vulkan in $(UseD3DMultiList) {
    opt on amdFsr.cpp += -DAMDFSR_HAS_VULKAN ;
  }
  if $(Platform) in xboxOne scarlett || ( $(Platform)-$(PlatformArch) = windows-x86_64 && DX12 in $(UseD3DMultiList) ) {
    opt on amdFsr.cpp += -DAMDFSR_HAS_DX12 ;
  }
}
else {
  Sources += amdFsr_stub.cpp ;
}

if ! $(Platform) in xboxOne scarlett {
  AddIncludes +=
    $(Root)/prog/3rdPartyLibs/nvapi
    $(Root)/prog/3rdPartyLibs/adl_sdk
    $(Root)/prog/3rdPartyLibs/ags_sdk/include
  ;
}
if [ GLOB $(Root)/prog/3rdPartyLibs/reflexStats : * ] { AddIncludes += $(Root)/prog/3rdPartyLibs/reflexStats ; }

if $(Platform) in ps4 ps5 {
  Sources +=
    sony/base_texture.cpp
    sony/base_buffer.cpp
    sony/base_shader_state.cpp
    sony/d3d_frontend_common.cpp
    sony/bindless.cpp
    sony/command_queue_dump.cpp
    sony/info_panel_common.cpp
    sony/driver_common.cpp
    sony/sampler.cpp
    sony/res_heaps.cpp
  ;
}

switch $(Platform)-$(PlatformArch) {
  case windows-x86    : AddLibs += $(Root)/prog/3rdPartyLibs/adl_sdk/atimgpud_s_x86.lib Advapi32.lib ;
  case windows-x86_64 : AddLibs += $(Root)/prog/3rdPartyLibs/adl_sdk/atimgpud_s_x64.lib Advapi32.lib ;
  case windows-arm64  : CPPopt += -DATIMGPUD_DLL ;
}

AddIncludes +=
  $(Root)/prog/engine/sharedInclude
  $(Root)/prog/engine/drv/drv3d_commonCode
  $(Root)/prog/engine/drv/drv3d_commonCode/sony
;


include $(Root)/prog/_jBuild/build.jam ;

