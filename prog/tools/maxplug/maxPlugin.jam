if ! $(MaxVer) { Exit MaxVer not set! ; }
if $(PlatformArch) = arm64 { Exit $(JAMFILESRC): PlatformArch=$(PlatformArch) not supported now! ; }
SSEVersion = 2 ;
Platform = windows ;
PlatformArch ?= x86 ;
BuildDagorEngineIndependentCode = yes ;
Exceptions = yes ;
Rtti = yes ;
CatchSEH = no ;
StackProtection = yes ;

if $(MaxVer) in Max2014 Max2015 Max2016 Max2017 Max2018 Max2019 Max2020 Max2021 Max2022 Max2023 Max2024 Max2025 { PlatformArch = x86_64 ; }

Config       ?= rel ;

include $(Root)/prog/_jBuild/defPlatform.jam ;

if $(MaxVer) in Max7 { _GlobCopt_ForScope = /Zc:forScope- ; }
_GlobCopt_CRT = -MD ;
VCMathOption = -fp:precise ;

if $(Config) = rel {
  ReproducibleExeBuild = yes ;
  _GlobCopt_Optimize = /GF /Gy /Zi /Oy- /O1 /Os /Oi ;
} else if $(Config) = dbg {
  ReproducibleExeBuild = no ;
  _GlobCopt_Optimize = /Od /Zi /RTC1 ;
}

if $(Platform)-$(PlatformArch) = windows-x86_64 {
  switch $(MaxVer)
  {
    case Max2011 : PlatformSpec = vc9 ;  WinSdkVer = win.sdk.71 ;
    case Max2012 : PlatformSpec = vc9 ;  WinSdkVer = win.sdk.71 ;
    case Max2013 : PlatformSpec = vc10 ; WinSdkVer = win.sdk.71 ;
    case Max2014 : PlatformSpec = vc10 ; WinSdkVer = win.sdk.71 ;
    case Max2015 : PlatformSpec = vc11 ; WinSdkVer = win.sdk.71 ;
    case Max2016 : PlatformSpec = vc11 ; WinSdkVer = win.sdk.71 ;
    case Max2017 : PlatformSpec = vc14 ; WinSdkVer = win.sdk.81 ;  VCUpdateVer = 3 ;
    case Max2018 : PlatformSpec = vc14 ; WinSdkVer = win.sdk.100 ; VCUpdateVer = 3 ;        WinSdkUpdateVer = 10586 ;
    case Max2019 : PlatformSpec = vc14 ; WinSdkVer = win.sdk.100 ; VCUpdateVer = 3 ;        WinSdkUpdateVer = 10586 ;
    case Max2020 : PlatformSpec = vc15 ; WinSdkVer = win.sdk.100 ; VCUpdateVer = 15.9.5 ;   WinSdkUpdateVer = 18362 ; #17134
    case Max2021 : PlatformSpec = vc15 ; WinSdkVer = win.sdk.100 ; VCUpdateVer = 15.9.5 ;   WinSdkUpdateVer = 18362 ; #17134
    case Max2022 : PlatformSpec = vc15 ; WinSdkVer = win.sdk.100 ; VCUpdateVer = 15.9.5 ;   WinSdkUpdateVer = 18362 ; #17134
    case Max2023 : PlatformSpec = vc16 ; WinSdkVer = win.sdk.100 ; VCUpdateVer = 16.11.34 ; WinSdkUpdateVer = 19041 ;
    case Max2024 : PlatformSpec = vc16 ; WinSdkVer = win.sdk.100 ; VCUpdateVer = 16.11.34 ; WinSdkUpdateVer = 19041 ;
    case Max2025 : PlatformSpec = vc17 ; WinSdkVer = win.sdk.100 ; VCUpdateVer = 17.9.5 ;   WinSdkUpdateVer = 22621 ;
    case * : exit $(MaxVer) not supported for $(Platform) ;
  }
} else {
  switch $(MaxVer)
  {
    case Max7 :    PlatformSpec = vc7 ;  WinSdkVer = win32.psdk ;
    case Max9 :    PlatformSpec = vc8 ;  WinSdkVer = win.sdk.71 ;
    case Max2009 : PlatformSpec = vc8 ;  WinSdkVer = win.sdk.71 ;
    case Max2011 : PlatformSpec = vc9 ;  WinSdkVer = win.sdk.71 ;
    case Max2012 : PlatformSpec = vc9 ;  WinSdkVer = win.sdk.71 ;
    case Max2013 : PlatformSpec = vc10 ; WinSdkVer = win.sdk.71 ;
    case * : exit $(MaxVer) not supported for $(Platform) ;
  }
}
OutDir     = $(Root)/tools/dagor_cdk/$(Platform)-$(PlatformArch)/plugins-3dsMax/$(MaxVer) ;

include $(Root)/prog/_jBuild/defaults.jam ;

if $(Platform)-$(PlatformArch) = windows-x86_64 {
  MaxLibDir = $(_DEVTOOL)/$(MaxVer).sdk/x64/lib ;
  if $(MaxVer) in Max2014 Max2015 Max2016 Max2017 Max2018 Max2019 Max2020 Max2021 Max2022 Max2023 Max2024 Max2025 { MaxLibDir = $(_DEVTOOL)/$(MaxVer).sdk/lib/x64/Release ; }
} else {
  MaxLibDir = $(_DEVTOOL)/$(MaxVer).sdk/lib ;
}

if ! [ GLOB $(_DEVTOOL)/$(MaxVer).sdk : * ] { exit \"$(_DEVTOOL)/$(MaxVer).sdk\" not found! Install Max SDK and re-run make_devtools.py. $(OutDir)/$(Target:D=) is skipped now... ; }

AddIncludes =
  $(_DEVTOOL)/$(MaxVer).sdk/include
;

AddLibs =
  kernel32.lib user32.lib gdi32.lib winspool.lib comdlg32.lib advapi32.lib shell32.lib 
  ole32.lib oleaut32.lib uuid.lib odbc32.lib odbccp32.lib comctl32.lib winmm.lib
  $(MaxLibDir)/maxutil.lib
  $(MaxLibDir)/core.lib
  $(MaxLibDir)/bmm.lib
  $(MaxLibDir)/mesh.lib
  $(MaxLibDir)/geom.lib
  $(MaxLibDir)/flt.lib
  $(MaxLibDir)/MNMath.lib
  $(MaxLibDir)/maxscrpt.lib
;

if $(Config) = dbg {
  AddLibs += msvcrtd.lib msvcprtd.lib ;
} else {
  AddLibs += msvcrt.lib msvcprt.lib ;
}
LINKopt =
  /def:$(Root)/$(Location)/Dagor.def
  -nodefaultlib:LIBCP -nodefaultlib:LIBC
  -nodefaultlib:LIBCPMT -nodefaultlib:LIBCMT
;

if $(MaxVer) = Max2009 {
  CPPopt = /GR /we4706 /we4390 /we4557 /we4546 /we4545 /we4295 /we4310 /we4130 /we4611 /we4213 /we4121 /w34701 /wd4244 /wd4018 ;
}
if $(MaxVer) = Max2011 || $(MaxVer) = Max2012 || $(MaxVer) = Max2014 {
  CPPopt = /GR /we4706 /we4390 /we4557 /we4546 /we4545 /we4295 /we4310 /we4130 /we4611 /we4213 /we4121 /we4715 /w34701 /w34265 /wd4244 /wd4018 /wd4819 ;
}

CPPopt += -FImax_cpt.h ;

if $(MaxVer) in Max2013 Max2014 Max2015 Max2016 Max2017 Max2018 Max2019 Max2020 Max2021 Max2022 Max2023 Max2024 Max2025 {
  CPPopt +=  /D "_UNICODE" /D "UNICODE" -DNOMINMAX ;
}
