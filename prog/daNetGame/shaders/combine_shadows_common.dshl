include "sky_shader_global.dshl"
include "gbuffer.dshl"
include "csm.dshl"
include "static_shadow.dshl"
include "fom_shadows.dshl"
include "clouds_vars.dshl"
include "sq_clouds_shadow.dshl"
include "viewVecVS.dshl"
include "globtm_no_ofs.dshl"
include "contact_shadows.dshl"
include "ssss/ssss_csm.dshl"
include "heightmap_common.dshl"
include "rtsm_use.dshl"

float csm_distance = 1000;

int depth_bounds_support = 0;
interval depth_bounds_support: no<1, yes;

int shadows_quality = 1;
interval shadows_quality: low<1, high;

float foliage_offset_distance = 1;
float foliage_height_above_ground = 0.5;
float foliage_shadow_radius_scale = 2;
int4 temporal_shadow_frame;

macro SHADOWS_QUALITY_DEFINE(code)
  hlsl(code) {
    ##if shadows_quality == high
    #define CSM_DYNAMIC_ONLY_CASCADE 3
    ##endif
  }
endmacro

float4 hero_cockpit_vec = (0, 0, 0, 0);
float4 hero_cockpit_camera_to_point = (0, 0, 0, 0);

macro INIT_COMBINE_SHADOWS()
  supports global_const_block;
  (ps) {
    csm_distance@f1 = csm_distance;
    shadow_frame@f1 = temporal_shadow_frame.x; //shadow_frame;
    contact_shadow_len@f1 = contact_shadow_len;
    clouds_shadow_influence@f1 = clouds_shadow_influence;
    temporal_shadow_frame@f1 = (temporal_shadow_frame);
    viewProjectionMatrixNoOfs@f44 = { globtm_no_ofs_psf_0, globtm_no_ofs_psf_1, globtm_no_ofs_psf_2, globtm_no_ofs_psf_3 };
    downsampled_far_depth_tex@smp2d = downsampled_far_depth_tex;
    hero_cockpit_vec@f4 = hero_cockpit_vec;
    hero_cockpit_camera_to_point@f4 = hero_cockpit_camera_to_point;
    foliage_offset_distance@f1 = foliage_offset_distance;
    foliage_height_above_ground@f1 = foliage_height_above_ground;
    foliage_shadow_radius_scale@f1 = foliage_shadow_radius_scale;
  }

  INIT_ZNZFAR()
  INIT_READ_DEPTH_GBUFFER()
  INIT_READ_GBUFFER()
  SQ_INIT_CLOUDS_SHADOW(ps)
  INIT_STATIC_SHADOW()
  USING_RTSM(ps)
  INIT_CSM_SHADOW(ps)
  INIT_CSM_SSSS_TRANSMITTANCE_FACTOR(ps)
  if (shadows_quality == high)
  {
    INIT_WORLD_HEIGHTMAP_BASE(ps)
    INIT_CSM_OFFSET_TO_CULLING_NEAR_PLANE(ps)
  }
endmacro

macro USE_COMBINE_SHADOWS()

  hlsl(ps) {
    #if !MOBILE_DEVICE
    //on mobile devices taa is currently off. it is actually tied to taa being enabled
    #define STATIC_SHADOW_DITHERED 1
    #define CONTACT_HARDENING_STATIC_SHADOWS 0//will work only when more than one cascade is available
    #endif
    #define STATIC_SHADOW_DITHER_RADIUS 1.5
    #define STATIC_SHADOW_REFERENCE_FXAA_IMPL 1
    #define STATIC_SHADOW_CUSTOM_FXAA_DIR 0
  }

  USE_POSTFX_VERTEX_POSITIONS()
  USE_DECODE_DEPTH()
  USE_READ_DEPTH_GBUFFER()
  USE_READ_GBUFFER()
  SQ_CLOUDS_SHADOW(ps)
  USE_STATIC_SHADOW()
  USE_CSM_SHADOW_DEF_NUM()
  USE_CSM_SSSS_TRANSMITTANCE_FACTOR(ps)
  USE_SSSS_TRANSMITTANCE_ENCODE(ps)
  SHADOWS_QUALITY_DEFINE(ps)
  if (shadows_quality == high)
  {
    USE_HEIGHTMAP_COMMON_BASE(ps)
    hlsl(ps) {
      #define OFFSET_FOLIAGE_SHADOWS 1
    }
    USE_CSM_OFFSET_TO_CULLING_NEAR_PLANE(ps)
  }
  CONTACT_SHADOWS()

  hlsl(ps) {
    #if STATIC_SHADOW_DITHERED && STATIC_SHADOW_USE_CASCADE_1 && STATIC_SHADOW_USE_CASCADE_0 && CONTACT_HARDENING_STATIC_SHADOWS
    float sampleDepth(Texture2D<float4> tex, SamplerState tex_samplerstate, float2 uv)
    {
      float4 v4 = tex.GatherRed(tex_samplerstate, uv);
      return min(min(v4.x, v4.y), min(v4.z, v4.w));
      //return tex2Dlod(tex, float4(uv,0,0)).x;
    }
    half getStaticShadowHardening(float3 worldPos, SamplerState depthSampler, float dither, float radiusScale = 1)
    {
      float4 tc;

      float4 staticShadowWorldRenderMatrix_0[4] = {
        static_shadow_matrix_0_0,
        static_shadow_matrix_1_0,
        static_shadow_matrix_2_0,
        static_shadow_matrix_3_0
      };

      float4 staticShadowWorldRenderMatrix_1[4] = {
        static_shadow_matrix_0_1,
        static_shadow_matrix_1_1,
        static_shadow_matrix_2_1,
        static_shadow_matrix_3_1
      };

      bool hardVignette0 = true;
      tc = get_static_shadow_tc(worldPos, staticShadowWorldRenderMatrix_0, hardVignette0);

      BRANCH
      if ( tc.w > 0 && tc.z <= 1.f )
      {
        float radScale = staticShadowWorldRenderMatrix_0[2].w;
        float maxRad = 2*radiusScale, minRad = 0.5*radiusScale;
        {
          float texel2Size = staticShadowWorldRenderMatrix_0[2].w*maxRad*STATIC_SHADOW_DITHER_RADIUS;
          float minDist;
          minDist = min(sampleDepth(static_shadow_tex_0, depthSampler, tc.xy - texel2Size), sampleDepth(static_shadow_tex_0, depthSampler, tc.xy + float2(texel2Size, -texel2Size)));
          minDist = min3(minDist, sampleDepth(static_shadow_tex_0, depthSampler, tc.xy + texel2Size), sampleDepth(static_shadow_tex_0, depthSampler, tc.xy + float2(-texel2Size, texel2Size)));
          #if 1
          const int NUM_SAMPLES = NUM_STATIC_SHADOW_SAMPLES;
          float2 rotation;
          sincos((2.0f*PI)*dither, rotation.x, rotation.y);
          float2x2 rotationMatrix = {rotation.x, rotation.y, -rotation.y, rotation.x};
          float radius = staticShadowWorldRenderMatrix_0[2].w*maxRad*STATIC_SHADOW_DITHER_RADIUS;
          rotationMatrix *= radius;
          minDist = sampleDepth(static_shadow_tex_0, depthSampler, tc.xy);
          UNROLL
          for (int i = 0; i < NUM_SAMPLES; ++i)
          {
            float2 sampleOffset = mul(static_shadow_offsets[i], rotationMatrix);
            minDist = min(minDist, sampleDepth(static_shadow_tex_0, depthSampler, tc.xy+sampleOffset));
          }
          #endif
          float distToOccluder = tc.z - minDist;
          distToOccluder = distToOccluder > 0 ? distToOccluder : 1;
          radScale = lerp(minRad, maxRad, saturate(log2(distToOccluder*2+1)));//fixme: distToOccluder should be in meters, we should pass zscale somewhere
          radScale *= staticShadowWorldRenderMatrix_0[2].w;
        }
        return 1-static_shadow_sample_opt(
         tc.xy, tc.z, static_shadow_tex_0, static_shadow_tex_0_cmpSampler, radScale, global_static_shadow_fxaa_dir, staticShadowWorldRenderMatrix_0[3].w, dither) * tc.w;
      }

      bool hardVignette1 = false;
      tc = get_static_shadow_tc(worldPos, staticShadowWorldRenderMatrix_1, hardVignette1);

      BRANCH
      if ( tc.w > 0 && tc.z <= 1.f )
      {
        return 1-static_shadow_sample_opt(
          tc.xy, tc.z, static_shadow_tex_1, static_shadow_tex_1_cmpSampler, staticShadowWorldRenderMatrix_1[2].w, global_static_shadow_fxaa_dir, staticShadowWorldRenderMatrix_1[3].w, dither) * tc.w;
      }

      return 1;
    }
    #else
    half getStaticShadowHardening(float3 worldPos, SamplerState sampleDepth, float dither, out uint cascade_id, float radius_scale)
    {return getStaticShadow(worldPos, dither, cascade_id, radius_scale);}
    #endif

    struct PackedShadows
    {
      float staticShadow;
      half2 csmShadow;
      float contactShadow;
      float combinedShadow;
      float cloudsShadow;
      uint csmCascadeId;
      uint staticCascadeId;
      float ssssTransmittance;
      float ssssDepthMask;
    };

    PackedShadows getWhiteShadows()
    {
      PackedShadows shadows;
      shadows.staticShadow = 1.f;
      shadows.csmShadow = 1.f;
      shadows.contactShadow = 1.f;
      shadows.combinedShadow = 1.f;
      shadows.cloudsShadow = 1.f;
      shadows.csmCascadeId = 4;
      shadows.staticCascadeId = 2;
      shadows.ssssTransmittance = 0;
      shadows.ssssDepthMask = 0;
      return shadows;
    }

    void getShadowsImpl(inout PackedShadows shadows, float2 tc, float4 screenpos, float3 viewVect, float w, float3 cameraToPoint, half fade)
    {
      // Now that we are writing SV_Depth in when ssss_quality != off, D3DCompile complains about potentially
      // non-initialized value in shadows.ssssDepthMask in case of compiling shaders for Vulkan, despite explicitly and
      // unconditionally initializing it above. I had to refactor this function to not have any return statements within
      // branches to compile successfully with Vulkan :(

      {
        float dither = interleavedGradientNoiseFramed(screenpos.xy, shadow_frame);
        float shadowRadiusScale = 1;

        float3 worldPos = world_view_pos.xyz + cameraToPoint;
        #if OFFSET_FOLIAGE_SHADOWS
        uint material = readUnpackedGbufferMaterial(tc);
        //we sample ONLY material first, and only then translucency, if it is foliage.
        //this would save one read for most of pixels
        BRANCH if (material == SHADING_FOLIAGE)
        {
          float distStepToSun = min(foliage_offset_distance, w);
          UnpackedGbuffer gbuffer = (UnpackedGbuffer)0;
          gbuffer.material = material;
          readPackedGbufferTranslucencyChannel(tc, gbuffer);
          float effect = gbuffer.translucency;

          ##if tex_hmap_low != NULL
          //this is to prevent our hack happening near the ground (i.e. where grass start to grow)
          //would not be always needed if grass would have separate profile in gbuffer
          // (and we can have that! SSSprofile is not used in foliage (at least we can use as isLandscape == 1 as it is use it for grass only, probably is faster. but has to be measured)
          // fixme:
          float groundHeight = decode_height(getHeightLowLod(calcTcLow(worldPos.xz), 0));
          effect *= saturate(worldPos.y - foliage_height_above_ground - groundHeight);//limit effect of stepping out if close to ground
          ##endif
          //dithered move towards sun, but depending on effect
          cameraToPoint -= from_sun_direction*(lerp(0.5, 1, dither)*effect*distStepToSun);
          shadowRadiusScale += gbuffer.translucency*foliage_shadow_radius_scale;
          worldPos = world_view_pos.xyz + cameraToPoint;
        }
        #endif
        float csmDitherRadius = 4;
        float3 cameraToCSMPos = cameraToPoint;
        half2 csmShadow = half2( 1, 1 );
        float3 csmTc = 0;

        ##if in_editor_assume == yes
          BRANCH
          if ( w < csm_distance.x )
            csmShadow = get_csm_shadow_dithered(-cameraToCSMPos, dither, shadows.csmCascadeId, csmTc, csmDitherRadius*shadowRadiusScale);
          shadows.csmShadow = csmShadow;
          shadows.combinedShadow = csmShadow.x;
          return;
        ##endif
        half shadow = 1;
        float cloudsShadow = saturate(pow(clouds_shadow(worldPos), clouds_shadow_influence));
        float staticShadow = 1;
        #if HAS_RTSM
          if (isRTSMEnabled())
          {
            half3 rtShadow = getRTSM(screenpos.xy);
            shadow = rtShadow.r * cloudsShadow;
            ##if ssss_quality == transmittance_and_reflectance_blur
              staticShadow = getStaticShadow(worldPos, 0, shadows.staticCascadeId, shadowRadiusScale);
            ##endif
          }
          else
        #endif
          {
            #ifdef CSM_DYNAMIC_ONLY_CASCADE
              shadow = cloudsShadow;
              BRANCH
              if ( w < csm_distance.x)
              {
                csmShadow = get_csm_shadow_dithered(-cameraToCSMPos, dither, shadows.csmCascadeId, csmTc, csmDitherRadius*shadowRadiusScale);
                shadow *= csmShadow.x;
              }
              float3 staticShadowPos = worldPos;
              if (shadows.csmCascadeId < CSM_DYNAMIC_ONLY_CASCADE)
                staticShadowPos = projectToShadowFrustumNearPlane(worldPos, shadows.csmCascadeId);
              staticShadow = getStaticShadow(staticShadowPos, 0, shadows.staticCascadeId, shadowRadiusScale);
              shadow *= staticShadow;
            #else
              //we'd better keep only that branch, but with two static shadows cascades
              staticShadow = getStaticShadowHardening(worldPos, depth_gbuf_read_samplerstate, dither, shadows.staticCascadeId, shadowRadiusScale);
              shadow = staticShadow*cloudsShadow;
              BRANCH
              if ( w < csm_distance.x && shadow > 0.5/255)//we store combined_shadows in argb8, not point
              {
                csmShadow = get_csm_shadow_dithered(-cameraToCSMPos, dither, shadows.csmCascadeId, csmTc, csmDitherRadius*shadowRadiusScale);
                shadow = shadow*csmShadow.x;
              }
            #endif
          }

        ##if ssss_quality != off
          #if OFFSET_FOLIAGE_SHADOWS
          //if OFFSET_FOLIAGE_SHADOWS, then material is alread known!
          UnpackedGbuffer gbuf = (UnpackedGbuffer)0;
          gbuf.material = material;
          readPackedGbufferTranslucencyChannel(tc, gbuf);
          ProcessedGbuffer gbuffer = processGbuffer(gbuf);
          #else
          ProcessedGbuffer gbuffer = readProcessedGbuffer(tc);
          #endif
          FLATTEN if (gbuffer.material == SHADING_SUBSURFACE && isSubSurfaceProfileValid(gbuffer.sss_profile) && gbuffer.translucency > 0)
            shadows.ssssDepthMask = 1;
          ##if ssss_quality == transmittance_and_reflectance_blur
            float cloudsAndStaticShadow = staticShadow*cloudsShadow;
            BRANCH
            if (cloudsAndStaticShadow > 0.01 && w < csm_distance.x)
            {
              BRANCH
              if (gbuffer.material == SHADING_SUBSURFACE && isSubSurfaceProfileValid(gbuffer.sss_profile) && gbuffer.translucency > 0)
              {
                float3 ssssWorldPos = ssss_calculate_world_pos(worldPos, gbuffer.normal);
                float3 ssssPointToEye = world_view_pos.xyz - ssssWorldPos;
                uint ssssCascadeId = 4;
                float dummy;
                float3 ssssCsmTc = get_csm_shadow_tc(ssssPointToEye, ssssCascadeId, dummy);
                if (ssssCascadeId < 3) //Not enough resolution, don't even bother.
                {
                  // HLSLcc doesn't declare shadow_cascade_depth_tex@shd as a Texture2D, hence the additional shadow_cascade_depth_tex_smp :(
                  ShadowDescriptor desc;
                  desc.shadowRange = csm_ranges[ssssCascadeId];
                  desc.meterToUV = csm_meter_to_uvs[ssssCascadeId];
                  desc.uvMinMax = csm_uv_minmaxs[ssssCascadeId];
                  shadows.ssssTransmittance = ssss_get_transmittance_factor(
                    gbuffer.translucency, tc, shadow_cascade_depth_tex_smp, shadow_cascade_depth_tex_size, ssssCsmTc, desc);
                  shadows.ssssTransmittance = encode_ssss_transmittance(shadows.ssssTransmittance * cloudsAndStaticShadow);
                }
              }
            }
          ##endif
        ##endif

        shadows.csmShadow = csmShadow;
        shadows.staticShadow = staticShadow;
        shadows.cloudsShadow = cloudsShadow;
        shadows.combinedShadow = shadow;

        #define FULLRES_CONTACT_SHADOWS !MOBILE_DEVICE
        ##if shadows_quality == high
          #define CONTACT_SHADOWS_FROM_GBUF 1
        ##endif

        #if FULLRES_CONTACT_SHADOWS
          BRANCH
          if (shadow>0.01)
          {
            float2 hitUV;
            //ideally we need read gbuffer.normal and stop casting from back shadows, to prevent self-occlusion. it is partially offsetted by hit uv translucency check
            half shadow_strength = pow2(saturate(dot(loadGbufferNormal(screenpos.xy), from_sun_direction.xyz)*-2 + sqrt(0.5)));
            half contactShadow;
            BRANCH
            if (shadow_strength > 0)
            {
              contactShadow = contactShadowRayCast(
                #if CONTACT_SHADOWS_FROM_GBUF
                  depth_gbuf_read, depth_gbuf_read_samplerstate,
                #else
                  downsampled_far_depth_tex, downsampled_far_depth_tex_samplerstate,// we can't do otherwise, will result in shadow acne
                #endif
                cameraToPoint, -from_sun_direction, max(w * contact_shadow_len*0.5, min(0.1, w)), 12, dither-0.5, projectionMatrix, w, viewProjectionMatrixNoOfs, hitUV);
              contactShadow = lerp(1, contactShadow, shadow_strength);
            } else
              contactShadow = 1;
            BRANCH
            if (contactShadow<0.999)
            {
              ProcessedGbuffer gbuffer = readProcessedGbuffer(hitUV);//reads TWO textures - material and translucency!!!. Can be optimized, probably.
              if (isTranslucentProfileValid(gbuffer.sss_profile))
                contactShadow = lerp(contactShadow, contactShadow*0.25 + 0.75, gbuffer.translucency);
              ##if shadows_quality != high
              contactShadow = gbuffer.dynamic ? 1.0 : contactShadow;
              ##endif
            }
            shadows.contactShadow = lerp(contactShadow, 1.0, fade);
            shadows.combinedShadow = shadow * contactShadow;
          }
        #endif
      }
    }

    PackedShadows getShadows(float2 tc, float4 screenpos, float3 viewVect, uint is_hero_cockpit)
    {
      float rawDepth = readGbufferDepth(tc.xy);
      PackedShadows shadows = getWhiteShadows();

      ##if depth_bounds_support == no
        BRANCH
        if ( rawDepth != 0 && rawDepth != 1)
      ##endif
      {
        float w = linearize_z(rawDepth, zn_zfar.zw);
        half fade = saturate(dot(float4(world_view_pos + viewVect * w, 1), hero_cockpit_vec));
        float3 cameraToPoint = viewVect * w;

        getShadowsImpl(shadows, tc, screenpos, viewVect, w, cameraToPoint, fade);

        BRANCH
        if (is_hero_cockpit && fade > 0.001)
        {
          PackedShadows cockpitShadows = getWhiteShadows();
          getShadowsImpl(cockpitShadows, tc, screenpos, viewVect, w, hero_cockpit_camera_to_point.xyz, fade);
          shadows.combinedShadow = lerp(shadows.combinedShadow, cockpitShadows.combinedShadow, fade);
        }
      }

      return shadows;
    }
  }
endmacro