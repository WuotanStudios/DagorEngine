include "antialiasing_type.inc.dshl"
include "postfx_common.dshl"
include "dof/dof_composite.dshl"
include "distortion_postfx_inc.dshl"
include "normaldetail.dshl"
include "sky_shader_global.dshl"
include "contact_shadows.dshl"
include "clouds_vars.dshl"
include "tonemapHelpers/use_full_tonemap_lut_inc.dshl"
include "film_grain_inc.dshl"
include "vignette_inc.dshl"
include "flare_inc.dshl"
include "postfx_modifier.dshl"
include "contrast_adaptive_sharpening.dshl"

texture lut_tex;

texture screen_droplets_tex;
texture blood_texture;
texture fire_on_screen_tex;
texture flash_blind_screen_tex;
texture smoke_blackout_tex;

float dash_ability_factor = 0;

float confusion_effect_time_start = -1000;
float confusion_effect_duration = 2.0;
float confusion_effect_intensity = 0.02;
float confusion_effect_speed = 1.0;
float fire_on_screen_postduration = 0.5;
float fire_on_screen_end_time = -1.0;
float fire_on_screen_horizontal_delta = 0.0;
float smoke_blackout_effect_time_start = -1000;
float smoke_blackout_effect_time_end = -1000;
float smoke_blackout_effect_increase_duration = 3.0;
float smoke_blackout_effect_decrease_duration = 1.0;
float smoke_blackout_effect_max_intensity = 0.8;
float smoke_blackout_effect_min_intensity = 0.5;

int smoke_blackout_active = 0;
int cinematic_mode_on = 0;
interval cinematic_mode_on:off<1, on;
int enable_post_bloom_effects = 1;

float4 damage_indicator_color = float4(1, 0.3, 0.3, 1);
float damage_indicator_size = 1;

float damage_indicator = 0;

float blood_on_screen = 0;

float4 projection_center = (0, 0, 0, 0);

float4 redout_blackout_color = (0, 0, 0, 0);

int fsr_on = 1;

define_macro_if_not_defined INIT_POSTFX_MODIFIER()
endmacro

define_macro_if_not_defined USE_POSTFX_MODIFIER()
  hlsl(ps)
  {
    void apply_postfx_modifiers(float2 screen_uv, inout float3 color) {}
  }
endmacro

define_macro_if_not_defined INIT_POSTFX_POST_TONEMAP_EFFECTS_MODIFIER()
endmacro

define_macro_if_not_defined USE_POSTFX_POST_TONEMAP_EFFECTS_MODIFIER()
  hlsl(ps)
  {
    void apply_postfx_post_tonemap_effects_modifiers(inout float3 result, float2 tc, float2 pos) {}
  }
endmacro

define_macro_if_not_defined INIT_LOCAL_TONE_MAPPING(code)
endmacro

define_macro_if_not_defined USE_LOCAL_TONE_MAPPING(code)
hlsl(code)
{
float get_local_exposure(float3 frame, float2 tc)
{
  return getPrevExposureRatio();
}
}
endmacro

shader postfx
{
  if (mobile_render != off)
  {
    dont_render;
  }

  hlsl(ps)
  {
    ##if antialiasing_type == dlss
      #define DOF_FAR_POSTFX_DLSS 1
    ##elif antialiasing_type == taa
      #define DOF_FAR_POSTFX_TAA 1
    ##else
      #define DOF_FAR_POSTFX_TSR 1
    ##endif
  }
  USE_DOF_COMPOSITE_NEAR_FAR_OPTIONAL()

  local float smoke_blackout_time = min(time_phase(0, 0), smoke_blackout_effect_time_end);
  local float smoke_blackout_increase_timer = (smoke_blackout_time - smoke_blackout_effect_time_start) / smoke_blackout_effect_increase_duration;
  local float saturated_blackout_increase_timer = max(min(smoke_blackout_increase_timer, 1), 0);
  local float smoke_blackout_decrease_timer = (time_phase(0, 0) - smoke_blackout_effect_time_end) / smoke_blackout_effect_decrease_duration;
  local float intensity_multiplier_non_clamped = (min(-smoke_blackout_decrease_timer, 0) + 1) * saturated_blackout_increase_timer;
  local float intensity_multiplier = max(min(intensity_multiplier_non_clamped, 1), 0);
  local float4 frame_tex_resolution = get_dimensions(frame_tex, 0);

  (ps) {
    inv_screen_size@f2 = (rendering_res.z, rendering_res.w, 0, 0);
    dof_rt_size@f4 = dof_rt_size;
    fsr_on@i1 = (fsr_on);
    frame_tex@smp2d = frame_tex;
    frame_tex_resolution@f4 = (frame_tex_resolution.xy, 1/frame_tex_resolution.xy);
    damage_indicator_color@f4 = (damage_indicator_color.x, damage_indicator_color.y, damage_indicator_color.z, damage_indicator);
    // 0.21 and 0.09 are arbitrary values, which look good with the effect
    damage_indicator_size__blood@f2 = (damage_indicator_size + 0.21 + 0.09*damage_indicator, blood_on_screen, 0, 0);
    blood_texture@smp2d = blood_texture;
    screen_droplets_tex@smp2d = screen_droplets_tex;
    confusion_params@f4 = ((time_phase(0, 0) - confusion_effect_time_start) / confusion_effect_duration * confusion_effect_speed * 20,
                           (time_phase(0, 0) - confusion_effect_time_start) / confusion_effect_duration * confusion_effect_speed * 11,
                           (time_phase(0, 0) - confusion_effect_time_start) / confusion_effect_duration * -3.5,
                           confusion_effect_intensity);
    flash_blind_screen_tex@smp2d = flash_blind_screen_tex;
    fire_on_screen_texture@smp2d = fire_on_screen_tex;
    fire_on_screen_horizontal_delta@f1=(fire_on_screen_horizontal_delta)
    concussion_shake_intensity@f1=(concussion_shake_intensity)
    concussion_flash_fire_times@f4 = (
      // concussion_time@f1
      (time_phase(0, 0) - concussion_effect_time_start) / concussion_effect_duration,
      // flash_blind_remaining_time@f1
      flash_blind_remaining_time,
      // fire_on_screen_time@f2
      time_phase(0, 0),
      (time_phase(0, 0) - fire_on_screen_end_time) / fire_on_screen_postduration
    );
    smoke_blackout_active@i1 = smoke_blackout_active;
    projection_center@f2 = projection_center;
    redout_blackout_color@f4 = redout_blackout_color;
    smoke_blackout_effect_intensity@f4 = (smoke_blackout_effect_min_intensity, smoke_blackout_effect_max_intensity,
                                          intensity_multiplier, time_phase(0, 0) * 150);
    smoke_blackout_tex@smp2d = smoke_blackout_tex;
  }
  INIT_LOCAL_TONE_MAPPING(ps)
  INIT_POSTFX_MODIFIER()
  INIT_POSTFX_POST_TONEMAP_EFFECTS_MODIFIER()
  INIT_SHADER_GAMMA()
  USE_SHADER_GAMMA()
  INIT_VIGNETTE()
  USE_VIGNETTE()
  INIT_FILM_GRAIN()
  USE_FILM_GRAIN()
  if (cinematic_mode_on == on)
  {
    INIT_FLARE_TEXTURES(blood_texture_samplerstate)
    INIT_FLARE_PARAMS()
    INIT_FLARE()
    (ps)
    {
      enable_post_bloom_effects@i1 = (enable_post_bloom_effects);
    }
  }

  hlsl(ps) { #define blackoutSmokeAnimationTimer smoke_blackout_effect_intensity.w }

  hlsl(ps) {
    #define concussion_time concussion_flash_fire_times.x
    #define flash_blind_remaining_time concussion_flash_fire_times.y
    #define fire_on_screen_time concussion_flash_fire_times.zw
    #define concussion_offset_time concussion_flash_fire_times.z
  }

  COMMON_POSTFX()
  HDR_PS_OUTPUT(POSTFX_OUTPUT, float4)
  ENABLE_ASSERT(ps)
  INIT_CONTRAST_ADAPTIVE_SHARPENING(ps)
  USE_CONTRAST_ADAPTIVE_SHARPENING(ps)

  hlsl(ps) {
    #include <noise/Value2D.hlsl>
    #include <noise/Value1D.hlsl>
    #include <pixelPacking/yCoCgSpace.hlsl>

    float4 sample_quad(float2 tc, float2 offset){
      //Can be changed to tex2Dlod with mipmap filter
      float4 c00 = h4tex2Dlod(frame_tex, half4(tc + float2(-1, -1) * offset, 0.0, 0.0));
      float4 c10 = h4tex2Dlod(frame_tex, half4(tc + float2(1, -1) * offset, 0.0, 0.0));
      float4 c01 = h4tex2Dlod(frame_tex, half4(tc + float2(-1, 1) * offset, 0.0, 0.0));
      float4 c11 = h4tex2Dlod(frame_tex, half4(tc + float2(1, 1) * offset, 0.0, 0.0));
      return 0.25f * (c00 + c10 + c01 + c11);
    }

    #if MOBILE_DEVICE
      void sampleSceneColor(float2 uv, out half3 color)
      {
        color = h4tex2Dlod(frame_tex, float4(uv, 0.0, 0.0)).xyz;
      }
    #else
      half3 sampleSceneColor(float2 uv)
      {
        if(contrast_adaptive_sharpening < -0.125)
          return tex2DCAS(frame_tex, uv, frame_tex_resolution.xy, frame_tex_resolution.zw, contrast_adaptive_sharpening).rgb;
        else
          return tex2Dlod(frame_tex, float4(uv,0,0)).rgb;
      }
    #endif //MOBILE_DEVICE
  }

  if (in_editor_assume == yes) {
    INIT_HEAT_HAZE_OFFSET()
    USE_HEAT_HAZE_OFFSET()
    INIT_DISTORTION_POSTFX()
    USE_DISTORTION_POSTFX()
  }

  USE_POSTFX_MODIFIER()
  USE_POSTFX_POST_TONEMAP_EFFECTS_MODIFIER()
  USE_LOCAL_TONE_MAPPING(ps)


  hlsl(ps)
  {
    void apply_damage_indicator(inout float3 pixel_color, float2 rel_screen_pos)
    {
      float2 v = 2*rel_screen_pos - float2(1, 1);
      float gradientEllipse = dot(v, v) * 0.5;

      gradientEllipse = saturate(gradientEllipse + damage_indicator_size__blood.x - 1);
      float baseValue = gradientEllipse * damage_indicator_color.w;
      float noise = noise_Value2D(rel_screen_pos*18)*0.5 + 0.5;
      pixel_color *= pow2(lerp(float3(1, 1, 1), damage_indicator_color.xyz, baseValue * (noise* 0.5 + 0.5)));
    }



    void redout_blackout_effect(float2 screen_uv, inout float3 color)
    {
      half alpha = redout_blackout_color.a;
      float2 center_uv = (2*screen_uv - 1) - projection_center;
      half strength = saturate(1 - 2.0*dot(center_uv, center_uv));
      strength = lerp(strength, strength * strength * strength, alpha);
      half3 outColorDes = lerp(luminance(color.rgb).rrr, color.rgb, strength * alpha * 0.25);
      half3 outColor2 = lerp(redout_blackout_color.rgb, outColorDes.rgb, strength * alpha);
      color = lerp(color, 0.17 * outColor2, sqrt(alpha));
      color = lerp(color, 0.17 * redout_blackout_color.rgb, sqrt(saturate((alpha - 0.3))));
    }

    void smoke_blackout_effect(float2 screen_uv, inout float3 color)
    {
      const float vignetteSizePow = 4;
      const float vignetteRadius = 0.4;
      float activeSmokeRatio = 0.5; // degree of textured animated smoke participation in center blackout
      const float smokeScaleFactor = 0.6; // in [0,1] and scales active smoke effect on screen

      float2 coords = screen_uv - 0.5;//[-0.5;0.5]
      float radius = length(coords);
      float ratio = radius / vignetteRadius;
      float conversionFactor = 1;
      if (ratio <= 1)
      {
        conversionFactor = pow(ratio, vignetteSizePow);
      }
      else
      {
        conversionFactor = 1;
        activeSmokeRatio /= pow(ratio, 4);
      }

      float intensity = lerp(smoke_blackout_effect_intensity.x, smoke_blackout_effect_intensity.y, conversionFactor);
      intensity *= smoke_blackout_effect_intensity.z;
      float3 blackoutBackColor = half3(0.8, 0.8, 0.8);

      const int ATLAS_SHIFT = 3;
      const int ATLAS_LENGTH = 1L << ATLAS_SHIFT;
      const int ATLAS_SQUARE = ATLAS_LENGTH * ATLAS_LENGTH - 1;
      const float INVERSE_ATLAS_LENGTH = 1.0 / ATLAS_LENGTH;

      int atlasIdx = int(blackoutSmokeAnimationTimer) & ATLAS_SQUARE;
      float2 atlasCoord = float2(atlasIdx & (ATLAS_LENGTH - 1), atlasIdx >> ATLAS_SHIFT) * INVERSE_ATLAS_LENGTH;
      float2 screenUVForSmoke = screen_uv * smokeScaleFactor + ((1 - smokeScaleFactor) * 0.5).xx;
      float4 smoke = tex2D(smoke_blackout_tex, screenUVForSmoke * INVERSE_ATLAS_LENGTH + atlasCoord);

    color = lerp(color, 0.7 * blackoutBackColor, saturate(0.7 * pow2(intensity * (1 - activeSmokeRatio))));
    color = lerp(color, 0.7 * smoke.rgb, saturate(0.7 * pow2(smoke.w * intensity * activeSmokeRatio)));
    }

    void concussion_effect(float2 screen_uv, inout float3 color)
    {
      float2 noise_vec = float2(noise_value1D(concussion_offset_time*2.0), noise_value1D(concussion_offset_time*1.1))*2.0 - 1.0;
      float intensity = concussion_shake_intensity*(1.0 - concussion_time);
      float3 image_moved = h4tex2Dlod(frame_tex, half4(screen_uv + noise_vec*intensity, 0.0, 0.0)).rgb;
      color = lerp(image_moved, color, (1.0 + pow2(concussion_time))*0.5);
    }

    void confusion_effect(float2 screen_uv, inout float3 color)
    {
      float2 noise_vec = float2(noise_value1D(confusion_params.x),
                                noise_value1D(confusion_params.y)) * 2.0 - 1.0;
      float intensity = confusion_params.w * exp(confusion_params.z);
      float3 quad_color = sample_quad(screen_uv, noise_vec*intensity).rgb;
      float3 color_ycocg = PackToYCoCg(lerp(color, quad_color, exp(confusion_params.z)));
      color_ycocg += float3(intensity, noise_vec*intensity);
      color = UnpackFromYCoCg(color_ycocg);
    }

    void flash_blind_effect(float2 screen_uv, inout float3 color)
    {
      half4 flash_blind_color = h4tex2Dlod(flash_blind_screen_tex, half4(screen_uv, 0.0, 0.0));
      color += flash_blind_color.a*flash_blind_color.rgb;
    }


    float4 read_fire_atlas(float2 coord, float time_offset) {
      float rand = noise_value1D(int(floor(coord.x)) % 12 * 0.3 + time_offset);
      float t = fire_on_screen_time.x*(100.0 + rand*20) + rand*170.0;
      float scale = 1.0 + sin(fmod(coord.x, 12.0) + time_offset)*0.25;
      coord.y = saturate(coord.y*scale - scale + 0.7);
      coord.x = frac(coord.x);
      int idx1 = int(t) & 63;
      float2 coord1 = float2(idx1 & 7, idx1 >> 3)*0.125;
      return h4tex2Dlod(fire_on_screen_texture, half4(coord1 + coord*0.125, 0.0, 0.0));
    }
    void fire_effect(float2 screen_uv, inout float3 color)
    {
      float2 coord = screen_uv;
      coord.y = 1.0 - saturate((1.0 - coord.y) / (0.75 - abs(screen_uv.x*2.0-1.0)*0.5));
      coord.x = coord.x*2.0 - 0.5*clamp(fire_on_screen_horizontal_delta, -1.0, 1.0)*screen_uv.y;

      float3 result = float3(0.0,0.0,0.0);
      float4 fire = read_fire_atlas(coord, 0.0);
      result += fire.xyz*fire.w;
      coord.x = coord.x + 0.4;
      fire = read_fire_atlas(coord, 9.0);
      result += fire.xyz*fire.w;
      color += result*(1.0 - fire_on_screen_time.y);
    }

    void apply_post_bloom_effects(float2 tc, inout float3 result)
    {
      ##if cinematic_mode_on == on
        if (!enable_post_bloom_effects)
          return;
      ##endif

      BRANCH
      if (smoke_blackout_active)
        smoke_blackout_effect(tc, result);

      BRANCH
      if (fire_on_screen_time.y < 1.0)
        fire_effect(tc, result);

      BRANCH
      if (damage_indicator_size__blood.y > 0)
      {
        half4 bloodOnScreen = tex2D(blood_texture, tc);
        result = lerp(result, bloodOnScreen.xyz, bloodOnScreen.w);
      }

      BRANCH
      if (damage_indicator_color.w > 0)
        apply_damage_indicator(result, tc);

      BRANCH
      if(redout_blackout_color.a > 0)
      {
        float luma = PackToYCoCg(result).x;
        float some_mult = rcp(luma + 1.0);
        result = result * some_mult;

        redout_blackout_effect(tc, result);

        result = result * rcp(max(1.0 - luma * some_mult, 0.001));
      }
    }

    #define A_GPU 1
    #define A_HLSL 1
    #include "../../3rdPartyLibs/fsr/ffx_a.h"
    #include "../../3rdPartyLibs/fsr/ffx_fsr1.h"
    float3 apply_gamma2_and_strm(float3 c)
    {
      c = sqrt(c);
      FsrSrtmF(c);
      return c;
    }

    void apply_cinematic_mode_pre_tonemap_effects(inout float3 result, float2 tc, float2 pos)
    {
      BRANCH
      if (film_grain_params.x > 0.0)
        result = apply_film_grain(result, pos);
      ##if cinematic_mode_on == on
        BRANCH
        if (flare_params.x > 0.0 || flare_params.y > 0.0)
          result += (float3)flare_value(tc, 0.0f);
      ##endif
    }

    void apply_cinematic_mode_post_tonemap_effects(inout float3 result, float2 tc)
    {
      BRANCH
      if (vignette_strength.x > 0.0)
        result = apply_vignette(result, tc);
    }

    void apply_dof_effect(float2 tc, inout float3 frame)
    {
      #if HAS_FAR_DOF
        #if COMPLICATED_DOF
          half4 cLayerFar = get_dof_far(tc, dof_rt_size.xy);
          frame = lerp(frame, cLayerFar.rgb, cLayerFar.a);
        #endif
      #endif
      #if HAS_NEAR_DOF
        #if !COMPLICATED_DOF
          half4 cLayerNear = tex2D_bicubic(dof_near_layer, dof_near_layer_samplerstate, tc, dof_rt_size.xy);
          frame = frame.rgb*cLayerNear.a + cLayerNear.rgb;
        #else
          half4 cLayerNear = get_dof_near(tc, dof_rt_size.xy);
          frame = lerp(frame, cLayerNear.rgb, cLayerNear.a);
        #endif
      #endif
    }

    POSTFX_OUTPUT postfx_ps(VsOutput input HW_USE_SCREEN_POS)
    {
      float4 pos = GET_SCREEN_POS(input.pos);

      float2 sceneUV = input.tc;
      half3 frame;
    #if MOBILE_DEVICE
      sampleSceneColor(sceneUV, frame);
    #else
      ##if (in_editor_assume == yes)
        frame = apply_distortion_postfx(input);
      ##else
        frame = sampleSceneColor(sceneUV);
      ##endif
    #endif

      apply_dof_effect(input.tc, frame);

      BRANCH
      if (confusion_params.z > -3.5)
      {
        confusion_effect(sceneUV, frame);
      }

      BRANCH
      if (concussion_time > 0 && concussion_time < 1.0)
      {
        concussion_effect(sceneUV, frame);
      }

      BRANCH
      if (flash_blind_remaining_time > 0.0)
      {
        flash_blind_effect(sceneUV, frame);
      }

      apply_postfx_modifiers(sceneUV, frame);

      half3 result = common_postfx(frame, input.tc, get_local_exposure(frame, input.tc));

      apply_post_bloom_effects(input.tc, result);
      apply_cinematic_mode_pre_tonemap_effects(result, input.tc, pos.xy);

      POSTFX_OUTPUT ret;

      ##if (hdr_ps_output_mode != sdr_only)
        float3 hdr_result = performLUTColorGrade(result);
        apply_cinematic_mode_post_tonemap_effects(hdr_result, input.tc);
        apply_postfx_post_tonemap_effects_modifiers(hdr_result, input.tc, pos.xy);
        BRANCH
        if (fsr_on == 1)
          ret.hdr_result = half4(apply_gamma2_and_strm(hdr_result), 1.0);
        else
          ret.hdr_result = half4(hdr_result, 1);
      ##endif

      ##if (hdr_ps_output_mode == sdr_only) || (hdr_ps_output_mode == hdr10_and_sdr)
        float3 sdr_result = performLUTTonemap(result);
        sdr_result = apply_shader_gamma(sdr_result);
        apply_cinematic_mode_post_tonemap_effects(sdr_result, input.tc);
        apply_postfx_post_tonemap_effects_modifiers(sdr_result, input.tc, pos.xy);
        ret.sdr_result = half4(sdr_result, 1);
      ##endif

      return ret;
    }
  }

  compile("target_vs", "postfx_vs");
  compile("target_ps", "postfx_ps");
}
