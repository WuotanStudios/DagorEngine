include "rendinst_opaque_inc.dshl"
include "normaldetail.dshl"
include "rendinst_voxelize_albedo_inc.dshl"
include "vertex_density_overlay_inc.dshl"
include "random_color.dshl"
include "plod_inc.dshl"
include "pn_triangulation.dshl"
include "tessellation_intervals_inc.dshl"


bool rendinst_render_is_normal_or_vox_albedo =
  (rendinst_render_pass == rendinst_render_pass_normal || rendinst_render_pass == rendinst_render_pass_voxelize_albedo);

bool rendinst_render_is_shadow_or_depth =
  (rendinst_render_pass == rendinst_render_pass_to_shadow || rendinst_render_pass == rendinst_render_pass_depth);

int debug_dominant_uv = 0;
interval debug_dominant_uv : off < 1, on;
assume debug_dominant_uv = off; // use it for testing only

macro INIT_COMMON_RENDINST_TESSELLATION()
  static int material_pn_triangulation = 0 no_warnings;
  interval material_pn_triangulation : off < 1, displacement < 2, smoothing_only < 3, with_dominant_uv;

  if (hardware.metal || compatibility_mode == compatibility_mode_on)
  {
    assume material_pn_triangulation = off;
  }

  if (material_pn_triangulation == with_dominant_uv)
  {
    // channel float4 tc[1] = extra[56]; // TODO: everything breaks if it is declared here, see INIT_COMMON_RENDINST_TESSELLATION_CHANNELS
    hlsl {
      #define HAS_DOMINANT_UV 1
    }
  }

  static float4 rendinst_displacement_min = (0, 0, 0, 0) no_warnings;
  static float4 rendinst_displacement_max = (0.05, 0.05, 0.05, 0) no_warnings;
  static float4 rendinst_displacement_lod = (0, 0, 0, 0) no_warnings;
  static float4 rendinst_displacement_mod = (1, 1, 0.75, 0.25) no_warnings; // 4 packed multipliers .x - trunc, .yzw - branches
  static float max_tessellation_factor = 10 no_warnings;
  static float min_tessellation_distance = 2.0 no_warnings;
  static float max_tessellation_distance = 2.0 no_warnings;
  static float tessellation_transition_distance = 1.0 no_warnings;
  static float tessellation_max_edge_length = 0.024 no_warnings;
  static int shadow_tessellation = 1 no_warnings;

  bool pn_triangulation_enabled =
      (object_tess_factor == object_tess_factor_on && material_pn_triangulation != off &&
      (rendinst_render_pass == rendinst_render_pass_normal || rendinst_render_pass == rendinst_render_pass_depth || rendinst_render_pass == rendinst_render_pass_to_shadow));

  if (pn_triangulation_enabled)
  {
    hlsl
    {
      #define GET_DRAW_CALL_ID_TRIANGULATION(src) GET_MATERIAL_OFFSET
    }
    INIT_PN_TRIANGULATION(true)

    (vs)
    {
      max_tessellation_factor@f1 = max_tessellation_factor;
      material_pn_triangulation@i1 = material_pn_triangulation;
      min_tessellation_distance@f1 = min_tessellation_distance;
      max_tessellation_distance@f1 = max_tessellation_distance;
      tessellation_transition_distance@f1 = tessellation_transition_distance;
      tessellation_max_edge_length@f1 = tessellation_max_edge_length;
      shadow_tessellation@i1 = shadow_tessellation;
    }
    hlsl(ds)
    {
      #define MATERIAL_PN_TYPE_DISPLACEMENT 1
      #define MATERIAL_PN_TYPE_DOMINANT_UV 3
      bool use_tessellation_displacement() { return get_material_pn_triangulation() == MATERIAL_PN_TYPE_DISPLACEMENT || get_material_pn_triangulation() == MATERIAL_PN_TYPE_DOMINANT_UV; }
    }

    if (debug_dominant_uv == on && material_pn_triangulation == with_dominant_uv)
    {
      hlsl {
        #define DEBUG_DOMINANT_UV 1
      }
      hlsl(ps)
      {
        float3 get_dominant_uv_debug_color(float2 tc)
        {
          float3 debugColor = float3(tc, 0);
          return frac(debugColor);
        }
      }
    }
  }
endmacro

macro INIT_COMMON_RENDINST_TESSELLATION_CHANNELS() // for some reason it depends on the order of declaration, TODO: merge it with INIT_COMMON_RENDINST_TESSELLATION
  if (material_pn_triangulation == with_dominant_uv)
  {
    channel float4 tc[1] = extra[56];
    channel float4 tc[2] = extra[57];
  }
endmacro

macro USE_COMMON_RENDINST_DISPLACEMENT_FOR_TESSELLATION()
  if (pn_triangulation_enabled)
  {
    (vs)
    {
      rendinst_displacement_min@f3 = rendinst_displacement_min - (rendinst_displacement_max - rendinst_displacement_min)/2;
      rendinst_displacement_max@f3 = rendinst_displacement_max - (rendinst_displacement_max - rendinst_displacement_min)/2;
      rendinst_displacement_lod@f3 = rendinst_displacement_lod;
      rendinst_displacement_mod@f4 = rendinst_displacement_mod;

      diffuse_tex@static = tex;
      diffuse_tex1@static = tex1;
      diffuse_tex2@static = tex2;
    }
    hlsl(ds)
    {
      #define rendinst_displacement_mul (get_rendinst_displacement_max() - get_rendinst_displacement_min())
      #define rendinst_displacement_offset (get_rendinst_displacement_min())

      #define WEIGHTS_FOR_HEIGHT 1

      void modify_tessellation_displacement(const OutputPatch<HsControlPoint, 3> input, inout VsOutput output, float3 uvw)
      {
        if (!use_tessellation_displacement())
          return;

        float3 normal = output.normal.xyz;
        float2 displacementTC = output.diffuseTexcoord.xy;
        #if HAS_DOMINANT_UV
          float3 edges = uvw == 0;
          float intersectingEdgeCnt = dot(edges, 1);
          if (intersectingEdgeCnt == 1) // edge
          {
            BARYCENTRIC_COORDS_UNPACK(uvw)
            displacementTC =
              edges.x*(v*input[1].domEdgeTc.xy + w*input[1].domEdgeTc.zw) +
              edges.y*(w*input[2].domEdgeTc.xy + u*input[2].domEdgeTc.zw) +
              edges.z*(u*input[0].domEdgeTc.xy + v*input[0].domEdgeTc.zw);
          }
          else if (intersectingEdgeCnt == 2) // corner
          {
            float3 corners = (edges.yzx + edges.zxy) == 2;
            displacementTC = corners.x * input[1].domVertexTc + corners.y* input[2].domVertexTc + corners.z * input[0].domVertexTc;
          }
          #if DEBUG_DOMINANT_UV
            output.diffuseTexcoord.xy = displacementTC;
          #endif
        #endif
        half4 diffuseColor  = tex2DLodBindless(get_diffuse_tex() , float4(displacementTC, 0, get_rendinst_displacement_lod().x));
        half4 diffuseColor1 = tex2DLodBindless(get_diffuse_tex1(), float4(displacementTC, 0, get_rendinst_displacement_lod().y));
        half4 diffuseColor2 = tex2DLodBindless(get_diffuse_tex2(), float4(displacementTC, 0, get_rendinst_displacement_lod().z));
        float2 by_normal_params = float2(0, 0);
        ##if (shader == rendinst_cliff)
          by_normal_params = float2(max(dot(get_mask_by_normal().xyz, normal.xyz), 0), get_mask_by_normal().w);
        ##endif
        half3 weights = 1.0/3;
        #if HAS_VERTEX_COLOR_MASK
          weights = init_blend_weights(output.vcolMask, by_normal_params);
        #endif

        half3 initialHeight = half3(diffuseColor.a, diffuseColor1.a, diffuseColor2.a);
        half3 invertedHeight = get_invert_heights().xyz ? 1 - initialHeight : initialHeight;
        weights = get_blending_weights(weights, invertedHeight);

        half3 heightInMeters = rendinst_displacement_mul * initialHeight + rendinst_displacement_offset;
        half height = dot(heightInMeters, weights);
        output.pos.xyz += output.normal.xyz * height;
      }
    }
  }
endmacro

macro USE_COMMON_RENDINST_TESSELLATION()
  if (pn_triangulation_enabled)
  {
    USE_PN_TRIANGULATION_WITH_EDGE_LENGTH_BASED_TESS_FACTORS(camera_base_offset, get_max_tessellation_factor(), get_tessellation_max_edge_length(), get_min_tessellation_distance(), get_max_tessellation_distance(), get_tessellation_transition_distance(), rendinst_render_pass == rendinst_render_pass_to_shadow, get_shadow_tessellation() == 1)
  }
endmacro


macro COMMON_RENDINST_SIMPLE_INIT()

  ENABLE_ASSERT(ps)

  VERTEX_DENSITY_INIT_VS()
  VERTEX_DENSITY_WRITE()

  assume instancing_type = tm_vb;
  if (rendinst_render_pass == rendinst_render_pass_impostor_color  ||
      rendinst_render_pass == rendinst_render_pass_impostor_shadow ||
      rendinst_render_pass == rendinst_render_pass_grassify ||
      rendinst_render_pass == rendinst_render_pass_to_heightmap)
  {
    dont_render;
  }
  if (two_sided)
  {
    cull_mode = none;
  }
  NO_DYNSTCODE()

  static int rendinst_additional_data = 0;
  interval rendinst_additional_data : hashval<1, color_mul_from_to;

  static int gpu_object_id = -1 no_warnings;

  SETUP_CHARACTER_MICRODETAIL()

  channel float3 pos = pos;
  channel color8 norm = norm unsigned_pack;
  channel float2 tc[0] = tc[0];
  ENABLE_MULTI_DRAW(false)

  RENDINST_BLOCK()
  RI_VOXELIZE_ALBEDO()
  RENDINST_INSTANCING()

  if (rendinst_render_pass == rendinst_render_pass_normal)
  {
    USE_MICRODETAIL_BASED_WETNESS()
  }

  if (shader == rendinst_perlin_layered)
  {
    PLOD_PERLIN_GEN_INIT(rendinst_render_pass == rendinst_render_pass_normal)
  }
  else
  {
    PLOD_GBUF_GEN_INIT(rendinst_render_pass == rendinst_render_pass_normal)
  }

  hlsl {
    ##if (rendinst_render_is_normal_or_vox_albedo)
      #define HLSL_FULL_VS_OUTPUT 1
    ##endif
  }
endmacro


macro COMMON_RENDINST_INIT_PAINT(use_tessellation)

  INIT_RANDOMIZED_TC(vs)
  INIT_PAINT_DETAILS_STATIC()

  if (!rendinst_render_is_shadow_or_depth && paint_details_tex != NULL)
  {
    hlsl {
      #define COLOR_NEEDED 1
    }
    USE_PAINT_DETAILS()
    USE_RANDOM_COLOR()
  }
  if ((!rendinst_render_is_shadow_or_depth && paint_details_tex != NULL) || use_tessellation) // tessellation needs it in depth/shadow pass too
  {
    USE_RANDOMIZED_TC(vs)
  }
endmacro


macro COMMON_RENDINST_VS_OUTPUT_MEMBERS_DEF()

  hlsl {
    #if PN_TESSELATION
      #define HLSL_FULL_VS_OUTPUT 1
    #endif

    #define COMMON_OUTPUT_MEMBERS  \
      PRECISE VS_OUT_POSITION(pos) \
      VSOUT_DRAW_ID

    #define FULL_OUTPUT_MEMBERS
    #define FULL_OUTPUT_MEMBERS_HS
    #define DEPTH_OUTPUT_MEMBERS
    #define COLOR_OUTPUT_MEMBERS

    #if HLSL_FULL_VS_OUTPUT
      #define FULL_OUTPUT_MEMBERS_HS                   \
        float3 diffuseTexcoord            : TEXCOORD0; \
        VOXEL_CENTROID float4 pointToEye  : TEXCOORD2;
      #define FULL_OUTPUT_MEMBERS                      \
        FULL_OUTPUT_MEMBERS_HS                         \
        float3 normal                     : TEXCOORD1;
    #else
      ##if (rendinst_render_pass == rendinst_render_pass_depth)
        #define DEPTH_OUTPUT_MEMBERS                   \
          float4 normal                   : TEXCOORD1;
      ##endif
    #endif

    #if COLOR_NEEDED
      #define COLOR_OUTPUT_MEMBERS                     \
        nointerpolation                                \
        float3 colorMul                   : TEXCOORD3;
    #endif

    #if DRAW_ID_USES_INSTANCE_OFFSET_ID
      #define RI_PROXY_FIELD_VALUE_DRAW_ID output.drawId = input.drawId;
      #define RI_FIELD_BARYCENTRIC_VALUE_DRAW_ID output.drawId = input[0].drawId;
    #else
      #define RI_PROXY_FIELD_VALUE_DRAW_ID
      #define RI_FIELD_BARYCENTRIC_VALUE_DRAW_ID
    #endif

    #ifdef COLOR_NEEDED
      #define RI_PROXY_FIELD_VALUE_COLOR_MUL output.colorMul = input.colorMul;
      #define RI_FIELD_BARYCENTRIC_VALUE_COLOR_MUL output.colorMul = input[0].colorMul;
    #else
      #define RI_PROXY_FIELD_VALUE_COLOR_MUL
      #define RI_FIELD_BARYCENTRIC_VALUE_COLOR_MUL
    #endif

    #ifdef PERTURB_NORMAL_DISABLE
      #define RI_PROXY_FIELD_VALUE_PLOD_ID output.plodIdx = input.plodIdx;
      #define RI_FIELD_BARYCENTRIC_VALUE_PLOD_ID output.plodIdx = input[0].plodIdx;
    #else
      #define RI_PROXY_FIELD_VALUE_PLOD_ID
      #define RI_FIELD_BARYCENTRIC_VALUE_PLOD_ID
    #endif

    #if HAS_DOMINANT_UV
      #define DOMINANT_DATA_OUTPUT_MEMBERS \
        float2 domVertexTc : TEXCOORD9; \
        float4 domEdgeTc : TEXCOORD10;
      #define RI_PROXY_FIELD_VALUE_DOMINANT_DATA PROXY_FIELD_VALUE(domVertexTc); PROXY_FIELD_VALUE(domEdgeTc);
      #define RI_FIELD_BARYCENTRIC_VALUE_DOMINANT_DATA FIELD_BARYCENTRIC_VALUE(domVertexTc); FIELD_BARYCENTRIC_VALUE(domEdgeTc);
    #else
      #define DOMINANT_DATA_OUTPUT_MEMBERS
      #define RI_PROXY_FIELD_VALUE_DOMINANT_DATA
      #define RI_FIELD_BARYCENTRIC_VALUE_DOMINANT_DATA
    #endif

    #define COMMON_RENDINST_VS_OUTPUT_MEMBERS \
      COMMON_OUTPUT_MEMBERS                   \
      DOMINANT_DATA_OUTPUT_MEMBERS            \
      FULL_OUTPUT_MEMBERS                     \
      DEPTH_OUTPUT_MEMBERS                    \
      COLOR_OUTPUT_MEMBERS                    \
      PLOD_VS_OUTPUT

    #define COMMON_RENDINST_HS_OUTPUT_MEMBERS \
      VSOUT_DRAW_ID                           \
      DOMINANT_DATA_OUTPUT_MEMBERS            \
      FULL_OUTPUT_MEMBERS_HS                  \
      COLOR_OUTPUT_MEMBERS                    \
      PLOD_VS_OUTPUT

    #define COMMON_RENDINST_TESS_PROXY_FIELD_VALUE \
      PROXY_FIELD_VALUE(diffuseTexcoord); \
      PROXY_FIELD_VALUE(pointToEye); \
      RI_PROXY_FIELD_VALUE_COLOR_MUL \
      RI_PROXY_FIELD_VALUE_PLOD_ID \
      RI_PROXY_FIELD_VALUE_DOMINANT_DATA \
      RI_PROXY_FIELD_VALUE_DRAW_ID

    #define COMMON_RENDINST_TESS_FIELD_BARYCENTRIC_VALUE \
      FIELD_BARYCENTRIC_VALUE(diffuseTexcoord); \
      FIELD_BARYCENTRIC_VALUE(pointToEye.w); \
      output.pointToEye.xyz = world_view_pos - output.pos.xyz; \
      RI_FIELD_BARYCENTRIC_VALUE_COLOR_MUL \
      RI_FIELD_BARYCENTRIC_VALUE_PLOD_ID \
      RI_FIELD_BARYCENTRIC_VALUE_DOMINANT_DATA \
      RI_FIELD_BARYCENTRIC_VALUE_DRAW_ID
  }
endmacro


macro COMMON_RENDINST_VS_IO_DEFINES()

  hlsl (ps) {
    #if HLSL_FULL_VS_OUTPUT && JITTER_DEPTH_PIXEL_OFFSET
      #undef VS_OUT_POSITION
      #define VS_OUT_POSITION(name)  linear noperspective centroid float4 name:SV_POSITION;
    #endif
    #if HLSL_FULL_VS_OUTPUT
      #define IS_DYNAMIC input.diffuseTexcoord.z
      #define FORCE_AUTO_MOTION_VECTOR 1
    #endif
  }

  COMMON_RENDINST_VS_OUTPUT_MEMBERS_DEF()
endmacro


macro COMMON_RENDINST_VS_INPUT()

  hlsl (vs) {
    INSTANCING_BUFFERS

    ##if rendinst_render_is_shadow_or_depth
      #define VS_INPUT_NEED_NORMAL PN_TESSELATION
    ##else
      #define VS_INPUT_NEED_NORMAL 1
    ##endif

    struct VsInput
    {
      float3 pos                  : POSITION;
      #if VS_INPUT_NEED_NORMAL
        float3 normal               : NORMAL;
      #endif
      #if HLSL_FULL_VS_OUTPUT
        float2 diffuseTexcoord      : TEXCOORD0;
      #endif
      #if HAS_VERTEX_COLOR_MASK
        float3 vcolMask             : COLOR0;
      #endif
      #if HAS_DOMINANT_UV
        float4 domVertexTc : TEXCOORD1;
        float4 domEdgeTc : TEXCOORD2;
      #endif
    };
  }
endmacro


macro COMMON_RENDINST_VS()

  hlsl(vs) {
    ##if (rendinst_additional_data == color_mul_from_to)
    float3 getColorIntervalMul(uint packedColor)
    {
      uint4 c;
      c.x = packedColor & 0xff;
      c.y = (packedColor >> 8) & 0xff;
      c.z = (packedColor >> 16) & 0xff;
      c.w = (packedColor >> 24) & 0xff;

      float4 colorMul = c * (1.0f / 255.0f);
      colorMul *= 2.0f; // 0.5 -> 1.0; 0.5 - neutral gray
      colorMul.rgb *= colorMul.a * 2.0f; // brightness
      return colorMul.rgb;
    }
    ##endif

    #ifndef VS_OUTPUT
      #define VS_OUTPUT VsOutput
    #endif

    VS_OUTPUT simple_vs(VsInput input  HW_USE_INSTANCE_ID, uint vertex_id : SV_VERTEXID)
    {
      VS_OUTPUT output;

      #if SET_UP_MULTIDRAW
        INIT_MULTIDRAW(output);
        SET_DRAW_CALL_ID(GET_MATERIAL_OFFSET);
      #endif

      #if !VS_INPUT_NEED_NORMAL
        float3 localNormal = 1; //warning fix, need not 0 value because of normalize(localNormal) in VB_PERFORM_INSTANCING
      #else
        float3 localNormal = normalize(BGR_SWIZZLE(input.normal)*2-1);
      #endif

      float3 localPos = input.pos;
      float opacity = 1;
      VB_PERFORM_INSTANCING

      float3 pointToEye = world_view_pos-worldPos;

      #if !PN_TESSELATION
        output.pos = mulPointTm(worldPos + camera_base_offset, globtm);
      #else
        output.pos = float4(worldPos, 1);
      #endif

      #if HLSL_FULL_VS_OUTPUT
        #if !PN_TESSELATION && JITTER_DEPTH_PIXEL_OFFSET
          output.zw = output.pos.zw;
        #endif

        output.diffuseTexcoord.xy = input.diffuseTexcoord;
        #if RANDOMIZE_TC
          output.diffuseTexcoord.xy = uv_apply_random(output.diffuseTexcoord.xy, worldLocalPos);
        #endif
        output.diffuseTexcoord.z = IS_DYNAMIC_RI;

        output.normal.xyz = worldNormal;
        output.pointToEye.xyz = pointToEye;
        output.pointToEye.w = 0; //avoid compilation warnings

        ##if (rendinst_render_pass != rendinst_render_pass_to_shadow)
          output.pointToEye.w = worldPos.y - worldLocalPos.y;
        ##endif
      #else
        ##if (rendinst_render_pass != rendinst_render_pass_to_shadow)
          output.normal.w = worldPos.y - worldLocalPos.y;
          output.normal.xyz = float3(0,0,0); //avoid compilation warnings
        ##endif
      #endif

      #if HAS_DOMINANT_UV
      output.domVertexTc = input.domVertexTc.xy;
      output.domEdgeTc = input.domEdgeTc;
        #if RANDOMIZE_TC
          // apply the same randomization to dominant data to keep it
          float2 uvDiff = output.diffuseTexcoord.xy - input.diffuseTexcoord.xy;
          output.domVertexTc.xy += uvDiff;
          output.domEdgeTc.xy += uvDiff;
          output.domEdgeTc.zw += uvDiff;
        #endif
      #endif

      #if COLOR_NEEDED
        output.colorMul = 1;
        #if HAS_PAINT_DETAILS
          ##if (rendinst_additional_data == color_mul_from_to)
            output.colorMul = getColorIntervalMul(hashVal);
          ##else
            output.colorMul = getColorMul(hashVal);
          ##endif
        #endif
        #if HAS_OVERLAY_MAP_COLOR
          if (need_overlay_map_color())
            output.colorMul = get_overlay_map_color(worldPos);
        #endif
      #endif

      #if RI_HMAP_BLEND_ON
        output.riHmapBlend = make_ri_hmap_blend_vs_params(worldPos);
      #endif

      #if HAS_VERTEX_COLOR_MASK
        output.vcolMask = input.vcolMask;
      #endif

      PROCESS_OUTPUT(output.pos, worldPos.xyz);
      writeVertexDensityPos(output.pos);

      PLOD_VS_GEN(output, vertex_id);

      #if defined(VS_SPECIFIC_OUTPUT) && VS_SPECIFIC_OUTPUT
        VS_SPECIFIC_OUTPUT_INIT_FIELDS(output)
        vs_specific_output(input, worldPos, worldLocalPos, output);
      #endif

      return output;
    }
  }
endmacro

macro COMMON_RENDINST_PS_PREP(render_to_shadow)

  if (rendinst_render_is_shadow_or_depth)
  {
    if (render_to_shadow)
    {
      RENDER_TO_SHADOW_PS()
    }
    else
    {
      compile("ps_null", "rendinst_render_depth_black_ps");
    }
  }
  else if (rendinst_render_pass == rendinst_render_pass_normal)
  {
      hlsl {
        #define NORMAL_RENDER_PASS 1
      }
  }
endmacro

macro INIT_AND_USE_DETAIL()
  if (detail != NULL)
  {
    static float detail_multiplier;

    (ps) {
      detail_tex@static = detail;
      detail_multiplier@f1 = (detail_multiplier);
    }

    if (secondary_detail != NULL)
    {
      static float secondary_detail_multiplier;
      (ps) {
        secondary_detail_tex@static = secondary_detail;
        secondary_detail_multiplier@f1 = (secondary_detail_multiplier);
      }
    }

    hlsl(ps) {
      void calculate_detail(inout float3 color, float2 uv)
      {
        float3 detailColor = tex2DBindless(get_detail_tex(), uv * get_detail_scale_offset().xy + get_detail_scale_offset().zw).rgb;
        color += (detailColor - 0.5) * get_detail_multiplier();

        ##if secondary_detail != NULL
          float3 secondaryDetailColor = tex2DBindless(get_secondary_detail_tex(),
                                                      uv * get_secondary_detail_scale_offset().xy + get_secondary_detail_scale_offset().zw).rgb;
          color += (secondaryDetailColor - 0.5) * get_secondary_detail_multiplier();
        ##endif
      }

      #define SUPPORT_DETAIL_TEX 1
    }
  }
endmacro

macro COMMON_RENDINST_ATEST_DEFINES()
  hlsl {
    ##if (atest==atestOn)
      #ifndef HLSL_FULL_VS_OUTPUT
        #define HLSL_FULL_VS_OUTPUT 1
      #endif
    ##endif
  }
endmacro

macro USE_PARALLAX()
  if (parallax_str == parallax_on)
  {
    USE_PIXEL_TANGENT_SPACE()
    hlsl(ps) {
      #define HAS_PARALLAX 1
      #define parallax_tex_sampler(tex, tc) tex2DBindless(tex, tc.xy)
      #define PARALLAX_TEX get_diffuse_tex()
      #define PARALLAX_ATTR a
      #include "./parallax.hlsl"
      #include "noise/Value2D.hlsl"

      float2 applyParallax(float2 tex_coord, float3 normal, float3 point_to_eye)
      {
        half3x3 tangent = cotangent_frame( normalize(normal), point_to_eye, tex_coord);
        float3 viewDir;
        viewDir.x = dot(point_to_eye, tangent[0]);
        viewDir.y = dot(point_to_eye, tangent[1]);
        viewDir.z = dot(point_to_eye, tangent[2]);
        viewDir = normalize(viewDir);
        return(get_parallax(viewDir.xy, float4(tex_coord, 0, 0), 0.05));
      }
    }
  }
endmacro