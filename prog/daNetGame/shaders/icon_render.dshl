include "sky_shader_global.dshl"
include "pbr.dshl"
include "gbuffer.dshl"
include "monteCarlo.dshl"
include "roughToMip.dshl"
include "normaldetail.dshl"
include "viewVecVS.dshl"
include "invGlobTm.dshl"
include "use_prefiltered_gf.dshl"
include "contact_shadows.dshl"
float4 icon_outline_color = (0,0,0,2);
float4 icon_silhouette_color = (0,0,0,2);
float4 icon_ssaa = (1,1,0,0);

texture combined_shadows;

macro COMMON_RESOLVE()
  supports global_const_block;
  STANDARD_BRDF_SHADING()
  USE_READ_GBUFFER()

  USE_ROUGH_TO_MIP()
  INIT_SKY()
  USE_SKY()
  INIT_ZNZFAR()
  USE_DECODE_DEPTH()
  USE_PREINTEGRATED_GF()
endmacro

macro COMMON_RESOLVE_MOBILE()
  supports global_const_block;
  hlsl {
    #define SPECULAR_DISABLED 1
    #define MOBILE_GBUFFER_UNPACK_FORCE_METALNESS 0
  }
  STANDARD_BRDF_SHADING()
  USE_READ_GBUFFER_MOBILE_DEFERRED()

  INIT_SKY()
  USE_SKY()
endmacro

float4 view_scale_ofs = (1,1,0,0);
texture icon_albedo_gbuf;
texture icon_normal_gbuf;
texture icon_material_gbuf;
texture icon_depth_gbuf;
float4 icon_light_dir = (0,-1,0,0);
float4 icon_light_color = (2,2,2,1);
texture icon_envi_panorama;
float icon_envi_panorama_exposure = 64;

shader deferred_immediate_resolve
{
  supports global_frame;
  //if (mobile_render == deferred) {
  if (mobile_render != deferred) {
    (ps) {
      icon_albedo_gbuf@smp2d = icon_albedo_gbuf;
      icon_normal_gbuf@smp2d = icon_normal_gbuf;
      icon_material_gbuf@smp2d = icon_material_gbuf;
    }
    hlsl(ps) {
      #define albedo_gbuf_read icon_albedo_gbuf
      #define normal_gbuf_read icon_normal_gbuf
      #define material_gbuf_read icon_material_gbuf
      #define albedo_gbuf_read_samplerstate icon_albedo_gbuf_samplerstate
      #define normal_gbuf_read_samplerstate icon_normal_gbuf_samplerstate
      #define material_gbuf_read_samplerstate icon_material_gbuf_samplerstate
    }
  }
  else {
    if (mobile_simplified_materials == yes) {
      (ps) {
        albedo_nx_gbuf@smp2d = icon_albedo_gbuf;
        ny_landDmaskMaterial_gbuf@smp2d = icon_normal_gbuf;
      }
    } else {
      (ps) {
        albedo_smooth_gbuf@smp2d = icon_albedo_gbuf;
        normal_refl_mettr_gbuf@smp2d = icon_normal_gbuf;
        ao_material_dmask_gbuf@smp2d = icon_material_gbuf;
      }
    }
  }

  (ps) {
    view_scale_ofs@f4 = view_scale_ofs;
    icon_depth_gbuf@smp2d = icon_depth_gbuf;
    icon_envi_panorama@smp2d = icon_envi_panorama;
    icon_outline_color@f4 = icon_outline_color;
    icon_silhouette_color@f4 = icon_silhouette_color;
    icon_light_dir@f3 = icon_light_dir;
    icon_light_color@f3 = icon_light_color;
    viewProjectionMatrix@f44 = { globtm_psf_0, globtm_psf_1, globtm_psf_2, globtm_psf_3 };
    icon_envi_panorama_exposure@f1 = (icon_envi_panorama_exposure);
  }

  ENABLE_ASSERT(ps)

  if (mobile_render != off)
  {
    if (use_postfx == on)
    {
      INIT_FULL_TONEMAP_LUT(ps)
    }
    USE_FULL_TONEMAP_LUT(ps)
  }

  if (compatibility_mode == compatibility_mode_off)
  {
    INIT_ENVI_SPECULAR()
    COMMON_RESOLVE()
  }
  else if (mobile_render == deferred)
  {
    INIT_ENVI_SPECULAR()
    COMMON_RESOLVE_MOBILE()
  }

  cull_mode  = none;
  z_write = false;
  z_test = false;

  blend_src = sa; blend_dst = isa;
  blend_asrc = one; blend_adst = one;

  //fixme: in case of (depth_bounds_support == no_bounds)
  //z_test = false should be true ONLY for cascade other than [0, something]


  USE_AND_INIT_INV_GLOBTM_PS()

  if (compatibility_mode == compatibility_mode_off)
  {
    CONTACT_SHADOWS()
  }

  POSTFX_VS_TEXCOORD(1, texcoord)

  hlsl(ps) {
    float3 FilmicMain( float3 texColor )
    {
      float3 x = max(0,texColor-0.004); // Filmic Curve
      float3 retColor = (x*(6.2*x+.5))/(x*(6.2*x+1.7)+0.06);
      return retColor;
    }
    #include <fast_shader_trig.hlsl>
    float2 toRadialCoords(float3 normalizedCoords)
    {
      //float latitude = acos(normalizedCoords.y);
      //float longitude = atan2(normalizedCoords.z, normalizedCoords.x);
      float latitude = acosFast4(normalizedCoords.y);
      float longitude = atan2(normalizedCoords.z, normalizedCoords.x);
      float2 sphereCoords = float2(longitude, latitude) * float2(0.5/PI, 1.0/PI);
      return float2(sphereCoords.x,sphereCoords.y);
      //return float2(0.5,1.0) - sphereCoords;
    }
##if compatibility_mode == compatibility_mode_off
    float3 sampleIconEnviSpecularLod(float3 dir, float lod)
    {
      return tex2Dlod(icon_envi_panorama, float4(toRadialCoords(dir),0,lod)).xyz;
    }

  #define USE_REFERENCE_INTEGRATION 0
  #if USE_REFERENCE_INTEGRATION

    #include <monteCarlo.hlsl>
    #include <hammersley.hlsl>
    float3 sampleEnviSpecular(float3 N, float3 V, float ggx_alpha, float3 specularColor)
    {
      float weight = 0;
      float3 res = 0;
      const uint NUM_FILTER_SAMPLES=64;
      LOOP
      for ( uint i = 0; i < NUM_FILTER_SAMPLES; ++i )
      {
        float2 E = hammersley( i, NUM_FILTER_SAMPLES, 0 );

        float3 H = tangent_to_world( importance_sample_GGX_NDF( E, ggx_alpha).xyz, N );
        float3 L = 2 * dot( V, H ) * H - V;

        float NoV = saturate( dot( N, V ) );
        float NoL = saturate( dot( N, L ) );
        float NoH = saturate( dot( N, H ) );
        float VoH = saturate( dot( V, H ) );

        if( NoL > 0 )
        {
          half3 cubeTex = sampleIconEnviSpecularLod(L.xyz, 0);
          float Vis = BRDF_geometricVisibility( ggx_alpha, NoV, NoL, VoH );
          float Fc = pow5(1 - VoH);
          float3 F = (1 - Fc) * specularColor + Fc;

          res += cubeTex * F * ( NoL * Vis * (4 * VoH / NoH) );
        }
      }
      return res*icon_envi_panorama_exposure/NUM_FILTER_SAMPLES;
    }
    float3 sampleEnviDiffuse(float3 N, float3 V, float linearRoughness)
    {
      float3 diffuse=0;
      const uint NUM_DIFFUSE_SAMPLES = 256;
      LOOP
      for ( uint i = 0; i < NUM_DIFFUSE_SAMPLES; ++i )
      {
        float2 E = hammersley( i, NUM_DIFFUSE_SAMPLES, 0 );

        float3 L = tangent_to_world( cosine_sample_hemisphere( E ).xyz, N );
        float3 H = normalize(V + L);
        float NoV = saturate( dot( N, V ) );
        float NoL = saturate( dot( N, L ) );
        float NoH = saturate( dot( N, H ) );
        float VoH = saturate( dot( V, H ) );

        if( NoL > 0 )
        {
          diffuse += BRDF_diffuse( 1, linearRoughness, NoV, NoL, VoH, NoH )*sampleIconEnviSpecularLod(L.xyz, 0);
        }
      }
      return diffuse * icon_envi_panorama_exposure/ NUM_DIFFUSE_SAMPLES;
    }
    void sampleIconEnvi(float3 normal, float3 V, float roughness, float linearRoughness, float3 specularColor, out float3 specular, out float3 diffuse)
    {
      specular = sampleEnviSpecular(normal, V,roughness, specularColor);
      diffuse = sampleEnviDiffuse(normal, V, linearRoughness);
    }
  #else

    #define ENVI_DIFFUSE_MIP 5//this is exactly same number as used when build icon_render_panorama texture!
    float3 sampleEnviDiffuse(float3 N, float3 V, float linearRoughness)
    {
      //return icon_envi_panorama_exposure*sampleIconEnviSpecularLod(normalize(getDiffuseDominantDir(N, V, dot(N, V), ggx_alpha)), DIFFUSE_MIP);
      ##if icon_envi_panorama==NULL
        return GetSkySHDiffuse(N);
      ##else
        return icon_envi_panorama_exposure*sampleIconEnviSpecularLod(N, ENVI_DIFFUSE_MIP);//since we use it for sss rendering only
      ##endif
    }
    void sampleIconEnvi(float3 N, float3 V, float ggx_alpha, float linearRoughness, float3 specularColor, out float3 specular, out float3 diffuse)
    {
      float roughMip = linearRoughness*float(ENVI_DIFFUSE_MIP)-0.5;//we actually allow roughness = 1 to be DIFFUSE_MIP-0.5. it is kinda similar, and we don't need another mip
      float NdotV = dot(N, V);
      float saturate_NdotV = saturate(NdotV);
      float3 reflectionVec = 2 * NdotV * N - V;
      float NoV = abs( NdotV ) + 1e-5;
      half3 AB = getEnviBRDF_AB(linearRoughness, NoV);
      half3 enviBRDF = specularColor * AB.x + AB.yyy;
      float3 roughR = getRoughReflectionVec(reflectionVec, N, ggx_alpha);
      float3 diffuseN = normalize(getDiffuseDominantDir(N, V, saturate_NdotV, ggx_alpha));
      ##if icon_envi_panorama==NULL// || icon_envi_panorama!=NULL
        float enviScale = 1.0/(abs(enviSPH0.w)+abs(enviSPH1.w)+abs(enviSPH2.w)+1e-6);//use current environemnt, but fix brightness of band0
        enviScale *= clamp(0.5/(dot(sun_color_0.rgb,1)+1e-6), 1., 4.0);//if there is no sun, environment is very dark
        float3 specularAtDir = texCUBElod(envi_probe_specular, float4(roughR, roughMip)).rgb*enviScale;
        half3 diffuseAtDir = GetSkySHDiffuse(diffuseN)*min(enviScale, 4.0);
      ##else
        float3 specularAtDir = icon_envi_panorama_exposure*sampleIconEnviSpecularLod(normalize(roughR), roughMip);
        half3 diffuseAtDir  = icon_envi_panorama_exposure*sampleIconEnviSpecularLod(diffuseN, ENVI_DIFFUSE_MIP);
      ##endif
      specular = specularAtDir*enviBRDF;
      diffuse = AB.z*diffuseAtDir;
    }
  #endif
##endif //compatibility_mode == compatibility_mode_off
    float get_outline(float2 tc, float rawDepth)//sobel
    {
      bool center = rawDepth>0;
      #define ALLOFS(DO)\
        DO(0,0);DO(1,0);DO(2,0);\
        DO(0,1);        DO(2,1);\
        DO(0,2);DO(1,2);DO(2,2);
      #define SAMPLE_DEPTH(x,y)\
        float val##x##y = (icon_depth_gbuf.SampleLevel(icon_depth_gbuf_samplerstate, tc,0, int2(x-1,y-1)).r>0) != center;
      ALLOFS(SAMPLE_DEPTH)

      #define NO_CENTER(to, DO)\
        float to = DO(2,0)  - DO(0,0) +\
                -2*DO(0,1) + 2*DO(2,1)+\
                 -DO(0,2)  + DO(2,2);
      #define HORIZONTAL(x,y) val##x##y
      #define VERTICAL(x,y) val##y##x
      NO_CENTER(horizontal, HORIZONTAL)
      NO_CENTER(vertical, VERTICAL)
      return saturate(sqrt(horizontal * horizontal + vertical * vertical));
    }

    float4 deferred_simple_ps(VsOutput input HW_USE_SCREEN_POS) : SV_Target0
    {
      float4 screenpos = GET_SCREEN_POS(input.pos);
      float2 tc = input.texcoord.xy*view_scale_ofs.xy + view_scale_ofs.zw;
      float rawDepth = tex2Dlod(icon_depth_gbuf, float4(tc,0,0)).x;
      BRANCH
      if (rawDepth<=0)// we can ac
      {
        BRANCH
        if (icon_outline_color.a<=1)
          return icon_outline_color * get_outline(tc, rawDepth);//we use sobel filter only out of picture, to make 'outer' outline
        else
          return 0;
      }

      if (icon_silhouette_color.a<=1)
      {
        float4 silhouetteColor;

        BRANCH
        if (icon_outline_color.a<=1)
          silhouetteColor = lerp(icon_silhouette_color, icon_outline_color, get_outline(tc, rawDepth));//we use sobel filter only out of picture, to make 'outer' outline
        else
          silhouetteColor = icon_silhouette_color;

        ##if mobile_render == forward
          silhouetteColor.rgb = performLUTTonemap(silhouetteColor.rgb);
        ##endif

        return silhouetteColor;
      }
##if compatibility_mode == compatibility_mode_off
      float4 farpos = float4(input.texcoord.xy * float2(2,-2) + float2(-1,1), rawDepth, 1.);
      float4 worldpos_prj = mul(farpos, globtm_inv);
      float4 worldPos = worldpos_prj / worldpos_prj.w;
      float3 pointToEye = -worldPos.xyz;// world_view_pos.xyz is assumed to be zero!

      float distSq = dot(pointToEye,pointToEye);
      float invRsqrt = rsqrt(distSq);
      float3 view  = pointToEye*invRsqrt;
      float dist = rcp(invRsqrt);

      ProcessedGbuffer gbuffer = readProcessedGbuffer(tc);

      float geometryFactor = 1;
      half translucencyStrength = gbuffer.translucency;

      float NdotV = dot(gbuffer.normal, view);
      float NoV = abs( NdotV ) + 1e-5;

      half enviAO = gbuffer.ao;//we still modulate by albedo color, so we don't need micro AO
      float ggx_alpha = gbuffer.ggx_alpha;
      half specularAOcclusion = computeSpecOcclusion(saturate(NdotV), enviAO, ggx_alpha);// dice spec occlusion
      half3 specularColor = gbuffer.specularColor*specularAOcclusion;
      //SUN
      float3 lightDir = -icon_light_dir;
      half3 lightColor = icon_light_color;

      float NoL = dot(gbuffer.normal, lightDir);
      half3 result = 0;
      bool subSurface = isSubSurfaceShader(gbuffer.material) && isTranslucentProfileValid(gbuffer.sss_profile);

      half csmShadow = 1;

      float2 hitUV;
      float4 clipSpacePos = mul( float4( worldPos.xyz, 1 ), viewProjectionMatrix );
      float w = clipSpacePos.w;
      clipSpacePos/=clipSpacePos.w;
      float dither = interleavedGradientNoise(screenpos.xy);//if we have temporal aa
      float contactShadow = contactShadowRayCastWithScale(icon_depth_gbuf, icon_depth_gbuf_samplerstate, worldPos.xyz,//+view*0.00005,
                            lightDir, w*0.2, 64, -0.98*dither, projectionMatrix, w, viewProjectionMatrix,
                            hitUV, view_scale_ofs);
      csmShadow = contactShadow;

      half shadow = min(gbuffer.shadow, csmShadow);

      half SSSshadow = shadow;

      //SUN
      BRANCH
      if (NoL>0 && shadow>0)
      {
        result = standardBRDF( NoV, NoL, gbuffer.diffuseColor, ggx_alpha, gbuffer.linearRoughness, specularColor, gbuffer.extracted_albedo_ao, lightDir, view, gbuffer.normal)*shadow*lightColor;
      }

      half3 enviDiffuse, enviSpecular;
      sampleIconEnvi(gbuffer.normal, view, ggx_alpha, gbuffer.linearRoughness, gbuffer.specularColor, enviSpecular, enviDiffuse);
      half3 environmentAmbientLighting = (enviAO * geometryFactor)*gbuffer.diffuseColor*enviDiffuse;
      half3 totalReflection = enviSpecular*specularAOcclusion;

      BRANCH
      if (subSurface)//fixme: use that only for foliage?
      {
        result += (gbuffer.ao * foliageSSS(NoL, view, lightDir) * SSSshadow) * lightColor * gbuffer.translucencyColor;
        //environmentAmbientLighting += enviAO*GetSkySHDiffuse(-gbuffer.normal)*gbuffer.translucencyColor;
        environmentAmbientLighting += enviAO*sampleEnviDiffuse(-gbuffer.normal, view, gbuffer.linearRoughness)*gbuffer.translucencyColor;
      }
      half3 reflection = environmentAmbientLighting + totalReflection;//*enviAO - tri-ace formula
      result += reflection;
      result += gbuffer.emissionColor;
##elif mobile_render == deferred
      ProcessedGbuffer gbuffer = readProcessedGbuffer(tc);

      float4 farpos = float4(input.texcoord.xy * float2(2,-2) + float2(-1,1), rawDepth, 1.);
      float4 worldpos_prj = mul(farpos, globtm_inv);
      float4 worldPos = worldpos_prj / worldpos_prj.w;
      float3 pointToEye = -worldPos.xyz;// world_view_pos.xyz is assumed to be zero!

      float distSq = dot(pointToEye,pointToEye);
      float invRsqrt = rsqrt(distSq);
      float3 view  = pointToEye*invRsqrt;

      float3 lightDir = -icon_light_dir;
      half3 lightColor = icon_light_color;

      float NoL = dot(gbuffer.normal, lightDir);
      float NdotV = dot(gbuffer.normal, view);
      float NoV = abs( NdotV ) + 1e-5;

      float shadow = 1;

      half enviAO = gbuffer.ao;//we still modulate by albedo color, so we don't need micro AO
      float ggx_alpha = 0.0;
      float linearRoughness = 0.0;

      half geometryFactor = 1.0;
      half3 enviDiffuse = GetSkySHDiffuse(gbuffer.normal);
      half3 environmentAmbientLighting = (enviAO * geometryFactor)*gbuffer.diffuseColor*enviDiffuse;

      half3 specularColor = half3(0,0,0);

      half3 sunLight = standardBRDF( NoV, NoL, gbuffer.diffuseColor, ggx_alpha, linearRoughness, specularColor, gbuffer.extracted_albedo_ao, lightDir, view, gbuffer.normal)*shadow*lightColor;
      half3 result = sunLight + environmentAmbientLighting;
##elif mobile_render == forward
      ##if use_postfx == on
        half3 result = performLUTTonemap(tex2Dlod(icon_albedo_gbuf, float4(tc,0,0)).xyz);
      ##else
        half3 result = tex2Dlod(icon_albedo_gbuf, float4(tc,0,0)).xyz;
      ##endif
##else // compatibility_mode == compatibility_mode_on
      half3 sunLight     = texelFetch(icon_albedo_gbuf, screenpos.xy, 0).xyz;
      half3 ambientLight = texelFetch(icon_normal_gbuf, screenpos.xy, 0).xyz;
      half3 result       = sunLight + ambientLight;
##endif
      return float4(result,1);
    }
  }

  compile("target_ps", "deferred_simple_ps");
}

texture animchar_icons_final;
shader simple_gui_tonemap
{
  cull_mode=none;
  z_write=false;
  z_test=false;

  supports global_frame;

  POSTFX_VS_TEXCOORD(0, tc)

  (ps) {
    frame_tex@smp2d = animchar_icons_final;
    view_scale_ofs@f4 = view_scale_ofs;
    icon_ssaa@f4 = icon_ssaa;
  }
  blend_src = sa; blend_dst = isa;
  hlsl(ps) {
    float3 FilmicMain( float3 texColor )
    {
       float3 x = max(0,texColor-0.004); // Filmic Curve
       float3 retColor = (x*(6.2*x+.5))/(x*(6.2*x+1.7)+0.06);
       return retColor;
    }
    #define tonemap UnchartedMain
    float4 postfx_ps(VsOutput input HW_USE_SCREEN_POS) : SV_Target
    {
      float4 pos = GET_SCREEN_POS(input.pos);
      float4 frame = 0;
      BRANCH
      if (icon_ssaa.x <= 2)//simplest case
      {
        frame = tex2Dlod(frame_tex, float4(input.tc*view_scale_ofs.xy + view_scale_ofs.zw,0,0));//it is actually incorrect if icon_ssaa.x==2, as we tonemap downsampled and not downsampled tonemapped
        frame = float4(FilmicMain(frame.rgb).rgb, frame.a);
      } else
      {
        int4 icon_ssaaI = icon_ssaa;
        int2 start = (int2(pos.xy) + icon_ssaaI.zw)*icon_ssaaI.x;
        for (uint y = 0; y < icon_ssaaI.x; ++y)
          for (uint x = 0; x < icon_ssaaI.x; ++x)
          {
            float4 val = frame_tex[start + int2(x, y)];
            frame += float4(FilmicMain(val.rgb), val.a);
          }
        frame /= icon_ssaa.x*icon_ssaa.x;
      }
      return frame;
    }
  }

  compile("target_ps", "postfx_ps");
}
