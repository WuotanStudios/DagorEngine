include "init_projective_wounds.dshl"
include "animchar_additional_data.dshl"

macro WOUNDS_AND_BURNING_INIT_TYPE_INTERVAL()
  static int has_wounds = 0;
  static int has_burning = 0;
  interval has_wounds: off<1, blood_decal < 2, torn_wounds < 3, holes;
  interval has_burning: off<1, on;
endmacro

macro WOUNDS_BLOOD_ON_SKIN_INIT()
  hlsl{
    #define WOUND_BLOOD_ON_SKIN 1
  }
endmacro

macro WOUNDS_AND_BURNING_INIT()
  WOUNDS_AND_BURNING_INIT_TYPE_INTERVAL()
  if ((has_burning != off || has_wounds == blood_decal) && dyn_model_render_pass == render_pass_normal || has_wounds >= torn_wounds)
  {
    hlsl {
      #define NEED_FRAG_POS_NORM 1
    }
  }
  if (has_burning != off && dyn_model_render_pass == render_pass_normal)
  {
    hlsl {
      #define HAS_BURNING 1
    }
  }
  if (has_wounds >= blood_decal && dyn_model_render_pass == render_pass_normal)
  {
    hlsl {
      #define HAS_BLOOD_DECAL 1
    }
  }
  if (has_wounds >= torn_wounds)
  {
    cull_mode=none;
    hlsl {
      #define ATEST_IS_ON 1
      #define HAS_TORN_WOUNDS 1
      #define HAS_VS_PREV_FUNCTION 1
    }

    if (debug_torn_wounds == on)
    {
      hlsl {
        #define HAS_TORN_WOUNDS_DEBUG 1
      }
    }
  }
  if (has_wounds == torn_wounds)
  {
    hlsl {
      #define HAS_BLOOD_SPLASH 1
    }
  }
endmacro

macro WOUNDS_AND_BURNING_USE(samplerName)
  USE_ANIMCHAR_ADDITIONAL_DATA_VS_ONCE()
  hlsl(vs) {
    #include "animchar_additional_data_types.hlsli"
  }

  if ((has_burning != off || has_wounds == blood_decal) && dyn_model_render_pass == render_pass_normal || has_wounds >= torn_wounds)
  {
    MODEL_SPACE_PROJECTION()
  }
  if (has_wounds != off)
  {
    INIT_PROJECTIVE_WOUNDS_SHADER()
  }
  if (has_wounds >= torn_wounds)
  {
    USE_TORN_WOUNDS(samplerName)
  }
  if (has_wounds >= blood_decal && dyn_model_render_pass == render_pass_normal)
  {
    USE_BLOOD_DECAL(samplerName)
  }
  if (has_burning != off && dyn_model_render_pass == render_pass_normal)
  {
    INIT_BURNED_DIFFUSE_FUNCTION_SHADER()
    SET_BURNED_DIFFUSE_FUNCTION(samplerName)
  }

  hlsl(vs) {
    void init_burning_and_wounds(VsInput input, inout VsOutput output)
    {
      #if NEED_FRAG_POS_NORM
        output.fragPos = input.pos;
        output.fragNormal = (BGR_SWIZZLE(input.normal.bgr) * 2 - 1);
      #endif
      #if HAS_BURNING
        output.burnedEffect = getBurnedEffect();
      #endif
      #if HAS_BLOOD_DECAL
        vs_blood_decal_function(input.pos, output.bloodDecalTC, output.hitNormalTextureIndexTime);
      #endif
      #if HAS_TORN_WOUNDS
        vs_torn_wounds_function(input.pos, output);
      #endif
    }
  }
endmacro

macro MODEL_SPACE_PROJECTION()

hlsl(ps)
{
  float4 sample_texture_from_pos(Texture2D tex, SamplerState tex_samplerstate, float3 frag_pos, float3 frag_norm, float scale)
  {
    float3 n = pow4_vec4(frag_norm.xyzz).xyz;

    n /= n.x + n.y + n.z;
    frag_pos = frag_pos * scale + 0.5;
    return  tex2D(tex, frag_pos.xy) * n.x +
            tex2D(tex, frag_pos.xz) * n.y +
            tex2D(tex, frag_pos.zy) * n.z;
  }
  float4 sample_texture_from_pos(Texture2DArray tex, SamplerState tex_samplerstate, int slice, float3 frag_pos, float3 frag_norm, float scale)
  {
    float3 n = pow4_vec4(frag_norm.xyzz).xyz;

    n /= n.x + n.y + n.z;
    frag_pos = frag_pos * scale + 0.5;
    return  tex3D(tex, float3(frag_pos.xy, slice)) * n.x +
            tex3D(tex, float3(frag_pos.xz, slice)) * n.y +
            tex3D(tex, float3(frag_pos.zy, slice)) * n.z;
  }
}
endmacro

macro USE_TORN_WOUNDS(samperName)

hlsl(vs) {
  #include "render/woundsConst.hlsli"

  void vs_prev_function(inout VsInput input)
  {
    ##if num_bones == four_bones
    uint2 dataOffsetCount = get_offset_count_additional_data(HUMAN_COMBINED_PARAMS);
    if (dataOffsetCount.y == 0)
      return;
    float4 count = get_additional_data(dataOffsetCount, 0);
    uint wounds_count = (uint)count.x;
    uint project_wounds_count = (uint)count.y;
    uint offset = 1 + project_wounds_count * DECAL_WOUND_SIZE;

    for (uint i = 0; i < wounds_count; i++)
    {
      uint j = offset + i * TORN_WOUND_SIZE;
      float4 wound_params = get_additional_data(dataOffsetCount, j);
      float4 pos_size = get_additional_data(dataOffsetCount, j + 1);
      float3 localPos = input.pos - pos_size.xyz;
      float woundRadius = pos_size.w;
      if (dot(localPos, localPos) < woundRadius*woundRadius)
      {
        input.boneWeights = max4(input.boneWeights.x, input.boneWeights.y, input.boneWeights.z, input.boneWeights.w) == input.boneWeights;
        input.boneWeights /= dot(input.boneWeights, 1);
        break;
      }
    }
    ##endif
  }

  void vs_torn_wounds_function(float3 pos, inout VsOutput output)
  {
    #if HAS_TORN_WOUNDS_DEBUG
    output.debugColor = float4(1.0, 1.0, 0.0, 1.0);
    #endif
    output.tornWoundParams = 0;
    uint2 dataOffsetCount = get_offset_count_additional_data(HUMAN_COMBINED_PARAMS);
    if (dataOffsetCount.y == 0)
      return;
    float4 count = get_additional_data(dataOffsetCount, 0);
    uint wounds_count = (uint)count.x;
    uint project_wounds_count = (uint)count.y;

    float mindist = 1000;//distance in uv coordinates
    float splashStrength = 0;
    float3 tornWoundParams = 0;
    for (uint i = 0; i < wounds_count; i++)
    {
      int j = 1 + project_wounds_count * DECAL_WOUND_SIZE + i * TORN_WOUND_SIZE;
      //local position, radius
      //start fade from, trim vertices to, discard pixel to, discadr tex uv scale
      float4 wound_params = get_additional_data(dataOffsetCount, j);
      float4 pos_size = get_additional_data(dataOffsetCount, j + 1);

      float3 localPos = pos - pos_size.xyz;
      float woundRadius = pos_size.w;
      float distToWound = length(localPos) / woundRadius;

      const float trimVerticesTo = wound_params.y;//[0,1]
      if (distToWound < trimVerticesTo)
      {
        output.pos.xyz = NaN;
        return;
      }
      if (distToWound < 1 && 1 - distToWound > splashStrength)
      {
        output.fragPos = localPos;
        splashStrength = 1 - distToWound;
        tornWoundParams = wound_params.xzw;
      }

    }
    output.tornWoundParams.x = splashStrength;
    output.tornWoundParams.yzw = tornWoundParams;
    float startFadeFrom = output.tornWoundParams.y;
    output.tornWoundParams.y = saturate(1 / (1 - startFadeFrom) * splashStrength);
    #if HAS_TORN_WOUNDS_DEBUG
    output.debugColor = float4(1.0, 0.0, 0.0, 1.0);
    #endif
  }
}
hlsl (ps) {
  float discard_torn_wound(float3 frag_pos, float3 frag_norm, float4 wound_param)
  {
    const float discardPixelTo = wound_param.z;
    float normalizedDistToWound = 1 - wound_param.x;
    const float discardTexUVScale = wound_param.w;
    float bloodTex = 0;
    if (normalizedDistToWound < sample_tex_inside_of)
    {
      bloodTex = sample_texture_from_pos(teared_wounds_decal, samperName, frag_pos, frag_norm, discardTexUVScale).r;
      if (normalizedDistToWound < discardPixelTo && bloodTex > blood_tex_discard_threshold)
        return -1;
    }
    return bloodTex;
  }

  void apply_blood_splash(float4 wound_param, float3 frag_pos, float3 frag_norm,
                          float micro_detail_layer, bool skip_blood,
                          inout float3 diffuse_color, inout float smoothness)
  {
    const float splashStrength = wound_param.x;
    const float distFactor = wound_param.y;
    if (splashStrength > 0)
    {
      float bloodIntensity = discard_torn_wound(frag_pos, frag_norm, wound_param);
      if (bloodIntensity < 0)
        discard;

##if dyn_model_render_pass == render_pass_normal
      BRANCH
      if (skip_blood)
        return;

      float alpha = saturate(bloodIntensity * blood_brightness);

      float3 bloodColor = blood_wound_color_low_intensity * distFactor;

      diffuse_color = lerp(diffuse_color,  diffuse_color * bloodColor, alpha);
      float porosity = micro_detail_layer != -1 ? get_porosity_by_microdetail_base(micro_detail_layer)
                                                : 1.0;
      smoothness = lerp(smoothness, 0.9, (1.0 - porosity) * alpha);
##endif
    }
  }

  void apply_debug_colormap(float4 wound_param, float3 frag_pos, float3 frag_norm, float4 debug_color,
    inout float3 diffuse_color)
  {
    const float splashStrength = wound_param.x;
    const float distFactor = wound_param.y;
    if (splashStrength > 0)
    {
      float bloodIntensity = discard_torn_wound(frag_pos, frag_norm, wound_param);
      if (bloodIntensity < 0)
        debug_color = float4(1.0, 0.0, 1.0, 1.0);

      diffuse_color = debug_color.xyz * debug_color.a;
    }
  }
}
endmacro

macro USE_BLOOD_DECAL(samplerName)

hlsl(vs) {
  float2 rotate_on_minus_pi (float2 coords)
  {
    return float2(-coords.x, -coords.y);
  }

  void vs_blood_decal_function(float3 input_pos, inout float4 bloodDecalTC, inout float4 hitNormalTextureIndexTime)
  {
    bloodDecalTC = NaN;
    hitNormalTextureIndexTime = float4(0, 0, 0, 0);
    uint2 dataOffsetCount = get_offset_count_additional_data(HUMAN_COMBINED_PARAMS);
    if (dataOffsetCount.y == 0)
      return;
    float4 count = get_additional_data(dataOffsetCount, 0);
    uint wounds_count = (uint)count.x;
    uint project_wounds_count = (uint)count.y;

    float mindist = 1000;//distance in uv coordinates
    #include <render/woundsConst.hlsli>
    for (uint i = 0; i < project_wounds_count; i++)
    {
      int j = 1 + i * DECAL_WOUND_SIZE;
      float4 pos_scale = get_additional_data(dataOffsetCount, j);
      float4 dir_depth_time = get_additional_data(dataOffsetCount, j + 1);
      float3 pos = (input_pos - pos_scale.xyz) * pos_scale.w;
      float start_time = dir_depth_time.w;
      float lenSq = dot(pos, pos);
      if (lenSq < mindist && lenSq < 1)
      {
        mindist = lenSq;
        bloodDecalTC.xyz = pos;
        bloodDecalTC.w = i + 1;
        hitNormalTextureIndexTime.w = start_time;
        hitNormalTextureIndexTime.xyz = dir_depth_time.xyz;

        //we rotate all texture for 180 degreese, to make  floating along attachment
        bloodDecalTC.xy = rotate_on_minus_pi(bloodDecalTC.xy);

      }
    }
  }
}

hlsl(ps) {
  #include <psh_tangent.hlsl>

  void extract_time_index(in float packed_value, out float time, out uint index)
  {
    uint p = asuint(packed_value);
    index = p & 0xffff;
    time = f16tof32(p >> 16);
  }

  bool check_for_integer(float f, float eps)
  {
    return abs (floor(f + eps) - f) <= eps;
  }

  void apply_blood_material(float thickness, float edge_closeness, float porosity,
                              float3 blood_normal, inout float3 normal,
                              inout float3 albedo, inout float smoothness, inout float reflectance)
  {
    bool isPuddleHole = thickness >= blood_wound_puddle_begin_thickness;
    float materialReflectance = lerp(blood_wound_low_porosity_reflectance, min(reflectance, blood_wound_low_porosity_reflectance), porosity);
    float3 materialNormal = lerp(blood_normal, normal, porosity);
    float materialSmoothness = lerp(1.0, smoothness, porosity);

  #if WOUND_BLOOD_ON_SKIN
    float3 meatColorHighIntensity = blood_wound_skin_meat_color_high_intensity;
    float3 meatColorLowIntensity = blood_wound_skin_meat_color_low_intensity;
    float3 bloodColorHighIntensity = blood_wound_skin_color_high_intensity;
    float3 bloodColorLowIntensity = blood_wound_skin_color_low_intensity;
  #else
    float3 meatColorHighIntensity = blood_wound_meat_color_high_intensity;
    float3 meatColorLowIntensity = blood_wound_meat_color_low_intensity;
    float3 bloodColorHighIntensity = blood_wound_color_high_intensity;
    float3 bloodColorLowIntensity = blood_wound_color_low_intensity;
  #endif

    BRANCH
    if (isPuddleHole)
    {
      float colorT = (thickness - blood_wound_puddle_begin_thickness) / one_minus_blood_puddle_begin_thickness;
      float3 bloodColor = lerp(meatColorHighIntensity, meatColorLowIntensity, colorT);

      float edgeT = saturate((blood_wound_puddle_edge_ending_thickness - thickness) / (blood_wound_puddle_edge_thickness_width + 0.0001));
      edgeT = pow3(edgeT);
      float3 bloodOnMaterialColor = albedo * bloodColorLowIntensity;
      float3 bloodAlbedo = lerp(bloodColor, bloodOnMaterialColor, edgeT);

      albedo = bloodAlbedo;
      smoothness = lerp(blood_wound_meat_smoothness, materialSmoothness, edgeT);
      reflectance = lerp(blood_wound_meat_reflectance, materialReflectance, edgeT);
      normal = lerp(blood_normal, materialNormal, edgeT);
    }
    else
    {
      float edgeClosenessWithPorosity = edge_closeness * porosity;
      float colorT = thickness / blood_wound_puddle_begin_thickness;

      float3 bloodColor = lerp(bloodColorHighIntensity, bloodColorLowIntensity, colorT);
      float3 opacityColor = lerp(bloodColor.rrr, 1.0.xxx, edgeClosenessWithPorosity);
      float3 bloodAlbedo = lerp(bloodColor, opacityColor, edgeClosenessWithPorosity);

      float darkAlbedoCompensationT = blood_wound_dark_albedo_compensation_factor * (1.0 - porosity);
      albedo = lerp(bloodAlbedo * albedo, bloodAlbedo, darkAlbedoCompensationT);

      reflectance = materialReflectance;
      smoothness = materialSmoothness;
      normal = materialNormal;
    }
  }

  float calc_mask(float3 frag_pos, float3 normal, float3 hitDir, float2 distance_range, float2 angle_range, float angle_free_zone)
  {
    float mask = 1.0;
    float dotV = dot(normal, hitDir);
    float distanceFactor = smoothstep(distance_range.x, distance_range.y,  (1 - length(frag_pos.xyz)));
    float angleFact = smoothstep(angle_range.x, angle_range.y, dotV);

    if (distanceFactor > angle_free_zone)
      mask = distanceFactor;
    else
      mask = angleFact * distanceFactor;

    return mask;
  }

  float to_border_mask(float mask)
  {
    return saturate(mask / 0.3);
  }

  void apply_blood_decal(float4 decal_tc, float start_time, uint tex_index, float3 frag_norm, float3 normal, float3 hitDir,
                          float3 point_to_eye, int micro_detail_layer,
                          inout float3 diffuse_color, inout float3 world_normal,
                          inout float smoothness, inout float reflectance)
  {
    float decal_idx = decal_tc.w;
    // it's need to skip rendering blood in triangles with different decal index in vertex
    const float eps = 0.0001;
    if (check_for_integer(decal_idx, eps))
    {
      //r - time, g - packed norm, b - intensive, a - packed norm
      //decal_tc.xyz in one-unit sphere, need to translate it to half-unit sphere, so scale = 0.5
      float mask = calc_mask(decal_tc.xyz, normal, hitDir, blood_wound_dist_fadeoff_range, blood_wound_angle_fadeoff_range, blood_wound_angle_free_zone);

      BRANCH
      if (mask == 0.0)
        return;

      mask = to_border_mask(mask);

      float4 blood = sample_texture_from_pos(wounds_decal_array, samplerName, tex_index, decal_tc.xyz, hitDir, 0.5);
      float current_time = time_wetness_bloody_time.x;
      float time = current_time - start_time;
      float bloody_time = time_wetness_bloody_time.y;

      float flowmapCuttingOffset = 0.1;
      float flowmapStartOffset = 0.4;

      float linearTime = saturate(bloody_time * time + flowmapCuttingOffset + flowmapStartOffset);
      float flowValue = blood.r;

      BRANCH
      if ((1.0 - linearTime) >= flowValue - flowmapCuttingOffset)
        return;

      float borderScale = 4.0 * blood_wound_dry_edge_scale;
      float edgeCloseness = 1.0 - saturate((flowValue - (1.0 - linearTime))*borderScale);

      float intensity = blood.b;
      float thickness = 1.0 - intensity;

      float porosity = micro_detail_layer != -1 ? get_porosity_by_microdetail_base(micro_detail_layer)
                                                : 1.0;
      float3 bloodWorldNormal = perturb_normal_precise(unpack_ag_normal(blood), normal, point_to_eye, decal_tc.xy);
      float3 diffuseWithBlood = diffuse_color;

      apply_blood_material(thickness, edgeCloseness, porosity, bloodWorldNormal,
        world_normal, diffuseWithBlood, smoothness, reflectance);

      diffuse_color = lerp(diffuse_color, diffuseWithBlood, mask);
    }
  }
}

endmacro


macro USE_PROJECTIVE_WOUNDS()

hlsl(ps) {
  void apply_burning_and_wounds(VsOutput input,
      int micro_detail_layer,
      inout float3 world_normal,
      inout float3 diffuse_color,
      inout float smoothness,
      inout float reflectance,
      bool skip_blood = false
    )
  {
  #if HAS_BLOOD_SPLASH
    #if HAS_TORN_WOUNDS_DEBUG
      apply_debug_colormap(input.tornWoundParams, input.fragPos, input.fragNormal, input.debugColor, diffuse_color);
    #else
      apply_blood_splash(input.tornWoundParams, input.fragPos, input.fragNormal,
        micro_detail_layer, skip_blood, diffuse_color, smoothness);
    #endif
  #endif
  #if HAS_BLOOD_DECAL
    BRANCH
    if (!skip_blood)
    {
      float start_time;
      uint tex_index;
      extract_time_index(input.hitNormalTextureIndexTime.w, start_time, tex_index);
      apply_blood_decal(input.bloodDecalTC, start_time, tex_index, input.fragNormal, input.normal, input.hitNormalTextureIndexTime.xyz, input.pointToEye,
        micro_detail_layer, diffuse_color, world_normal, smoothness, reflectance);
    }
  #endif

  #if HAS_BURNING
    apply_burning_effect(diffuse_color, smoothness, input.fragPos, input.fragNormal, input.burnedEffect, false);
  #endif
  }
}
endmacro

macro SET_BURNED_DIFFUSE_FUNCTION(samplerName)
  //INIT_BURNED_DIFFUSE_FUNCTION()
  hlsl(vs) {
    float getBurnedEffect() //can't get additional_data in frag shader
    {
      uint2 dataOffsetCount = get_offset_count_additional_data(HUMAN_COMBINED_PARAMS);
      if (dataOffsetCount.y > 0)
        return get_additional_data(dataOffsetCount, 0).w;
      else
        return 0;
    }
  }


  hlsl(ps) {
    void apply_burning_effect(inout float3 diffuse, inout float smoothness, float3 frag_pos, float3 frag_norm, float burning_effect, bool flesh)
    {
      float3 burned_color = flesh ? // compile time branch
          sample_texture_from_pos(burned_flesh, samplerName, frag_pos, frag_norm, 3).rgb :
          sample_texture_from_pos(burned_cloth, samplerName, frag_pos, frag_norm, 3).rgb;

      diffuse = lerp(diffuse, burned_color, burning_effect);
      smoothness *= 1 - burning_effect;
    }
  }
endmacro
