include "shader_global.dshl"
include "gbuffer.dshl"

float4 depth_target_sz;
float4 depth_source_sz;
int depth_lod = 0;
int downsampleTypeId = 0;
interval downsampleTypeId:final2x2<1, final4x4<2, down2x2 < 3, down4x4;
int detect_cockpit_by_distance = 0; // assumed everywhere
interval detect_cockpit_by_distance: no < 1, yes;
float cockpit_distance = 0;
texture occlusionExclusionMask;

int downsample_depth_from_const_no = 4 always_referenced;
hlsl(ps) {
  Texture2D downsample_depth_from:register(t4);
  SamplerState downsample_depth_from_samplerstate:register(s4);
}


shader downsample_depth_hzb
{
  supports global_frame;
  supports none;
  // setup constants
  cull_mode = none;
  z_write = false;
  z_test = false;

  POSTFX_VS_TEXCOORD(1, tc)

  INIT_ZNZFAR()
  (ps)
  {
    depth_source_sz@f2 = depth_source_sz;
    depth_target_sz@f2 = depth_target_sz;
    depth_source_rcp@f2 = (1.0 / depth_source_sz.x, 1.0 / depth_source_sz.y);
    half_target_rcp@f2 = (0.5 / depth_target_sz.x, 0.5 / depth_target_sz.y);
  }
  if (occlusionExclusionMask!=NULL)
  {
    (ps) {occlusionExclusionMask@smp2d = occlusionExclusionMask;}
  }
  else if (detect_cockpit_by_distance == yes)
  {
    (ps) {cockpit_distance@f1 = cockpit_distance;}
  }
  else if (material_gbuf!=NULL)
  {
    INIT_READ_IS_HERO_COCKPIT(ps)
    USE_READ_IS_HERO_COCKPIT(ps)
  }
  PS4_DEF_TARGET_FMT_32_AR()

  hlsl(ps) {
    #define depth_max(a,b) min(a,b)
    float downsample_ps(VsOutput IN HW_USE_SCREEN_POS):SV_Target0
    {
      float4 pos = GET_SCREEN_POS(IN.pos);
      //float2 tc = IN.tc;
      ##if downsampleTypeId == down4x4 || downsampleTypeId == final4x4
        float2 posFloored = floor(pos.xy);
        float2 lt = (floor(posFloored*(depth_source_sz/depth_target_sz)) + 0.5)/depth_source_sz;

        float4 src = downsample_depth_from.GatherRed(downsample_depth_from_samplerstate, lt);
        src = depth_max(src, (downsample_depth_from.GatherRed(downsample_depth_from_samplerstate, lt, int2(2, 0) )));
        src = depth_max(src, (downsample_depth_from.GatherRed(downsample_depth_from_samplerstate, lt, int2(0, 2) )));
        src = depth_max(src, (downsample_depth_from.GatherRed(downsample_depth_from_samplerstate, lt, int2(2, 2) )));
        float src0 = src.x, src1 = src.y, src2 = src.z, src3=src.w;
      ##else
        float2 tc = floor((IN.tc.xy + half_target_rcp) * depth_source_sz) * depth_source_rcp;
        float4 src = downsample_depth_from.GatherRed(downsample_depth_from_samplerstate, tc);
        float src0 = src.x, src1 = src.y, src2 = src.z, src3=src.w;
      ##endif

      float depth = depth_max(depth_max(src0, src1), depth_max(src2, src3));

      ##if downsampleTypeId == final2x2 || downsampleTypeId == final4x4
        // Make sure depth is non-negative
        depth = max(depth, 0);
        ##if (occlusionExclusionMask != NULL)
          if (tex2Dlod(occlusionExclusionMask, float4(IN.tc, 0,0)).x)
            return zn_zfar.y;
        ##elif detect_cockpit_by_distance == yes
          float linearDepth = linearize_z(depth, zn_zfar.zw);
          return linearDepth <= cockpit_distance ? -depth : depth;
        ##elif (material_gbuf != NULL)
          // Return cockpit flag by negating depth for cockpit pixels
          uint cockpit = isGbufferHeroCockpit(IN.tc.xy);
          return cockpit ? -depth : depth;
        ##endif
        return depth;
      ##else
        return depth;
      ##endif
    }
  }
  compile("target_ps", "downsample_ps");
}
