include "sun_disk_specular.dshl"
include "panorama.dshl"
include "static_shadow.dshl"
include "underwater_fog.dshl"
include "frustum.dshl"
include "heightmap_common.dshl"
include "vr_reprojection.dshl"
include "indoor_light_probes.dshl"

float water_ripples_foam_on = 0;
float water_ripples_foam_intensity = 1;
float water_ssr_intensity = 1;

float water_refraction_base_mip = 1;

float water_depth_hardness = 1; //should be about 2 for tanks and 0.5 for planes

float foam_tiling = 0.4113;
float foam_reflectivity = 0.1;
float angle_to_roughness_scale = 0.1;

texture water_planar_reflection_clouds;
float4 ambient_wind__speed__current_time__previous_time = (1.811, 0, 0, 0);

int water_rt_enabled = 0;
interval water_rt_enabled: no<1, yes;

macro INIT_WATER_3D_DEFERRED_COLOR()
  (ps) {
    foam_tex@tex = foam_tex hlsl{ Texture2D<float>foam_tex@tex; };
    foam_time@f1 = (scroll_time);
    foam_tiling@f4 = (foam_tiling/(height_tiling+1), water_depth_hardness*(2-height_tiling), (1-1/max(1, max_wave_height))*angle_to_roughness_scale,
      water_flowmap_foam_tiling*(foam_tiling/(height_tiling+1))/UVScaleCascade0123.x);
    projected_on_water_effects_tex@tex = projected_on_water_effects_tex hlsl{ Texture2D<float4>projected_on_water_effects_tex@tex; };
    water_ripples_foam_on_intensity_flowmap_debug_cascadesTexelScale@f4 = (water_ripples_foam_on, water_ripples_foam_intensity, water_flowmap_debug, cascadesTexelScale0123.x);
    water_flowmap_foam@f4 = water_flowmap_foam;
    water_flowmap_foam_color@f4 = water_flowmap_foam_color;
    foam_reflectivity_curve@f2 = (1.0 / (1.0 - water_flowmap_foam_reflectivity_min), water_flowmap_foam_reflectivity_min / ( water_flowmap_foam_reflectivity_min - 1.0));
    water_ssr_intensity@f1 = (water_ssr_intensity, 0, 0, 0);
    water_refraction_base_mip@f1 = (water_refraction_base_mip,0,0,0);
    water_flowmap_tex_add_0@smp2d = water_flowmap_tex_add_0;
    water_flowmap_tex_add_1a@tex = water_flowmap_tex_add_1a hlsl{ Texture2D<float4>water_flowmap_tex_add_1a@tex; };
    water_flowmap_tex_add_1b@tex = water_flowmap_tex_add_1b hlsl{ Texture2D<float4>water_flowmap_tex_add_1b@tex; };
    world_to_flowmap_add_0@f4 = world_to_flowmap_add_0;
    world_to_flowmap_add_1a@f4 = world_to_flowmap_add_1a;
    world_to_flowmap_add_1b@f4 = world_to_flowmap_add_1b;
    water_flowmap_strength@f4 = water_flowmap_strength;
    water_flowmap_strength_add_0@f4 = (-1/((water_flowmap_strength_add.y-water_flowmap_strength_add.x)*water_flowmap_range_0),
      water_flowmap_strength_add.y/(water_flowmap_strength_add.y-water_flowmap_strength_add.x), water_flowmap_strength_add.z, water_flowmap_strength_add.w);
    water_flowmap_strength_add_1@f4 = (-1/((water_flowmap_strength_add.y-water_flowmap_strength_add.x)*water_flowmap_range_1),
      water_flowmap_strength_add.y/(water_flowmap_strength_add.y-water_flowmap_strength_add.x), water_flowmap_strength_add.z, water_flowmap_strength_add.w);
    foam_reflectivity@f1 = (foam_reflectivity);
    water_flowmap_multiplier@f1 = (water_flowmap_multiplier);
    water_flowmap_blend@f1 = (water_flowmap_blend);
    water_flowmap_cascades@i1 = (water_flowmap_cascades);
  }
  (vs) {
    foam_time@f1 = (scroll_time);
  }
  hlsl(ps) {
    #define projected_on_water_effects_tex_samplerstate preparedLoss_samplerstate
    #define water_ripples_foam_on (water_ripples_foam_on_intensity_flowmap_debug_cascadesTexelScale.x)
    #define water_ripples_foam_intensity (water_ripples_foam_on_intensity_flowmap_debug_cascadesTexelScale.y)
    #define water_flowmap_debug (water_ripples_foam_on_intensity_flowmap_debug_cascadesTexelScale.z)
    #define cascadesTexelScale (water_ripples_foam_on_intensity_flowmap_debug_cascadesTexelScale.w)
    #define water_flowmap_foam_power (water_flowmap_foam.x)
    #define water_flowmap_foam_scale (water_flowmap_foam.y)
    #define water_flowmap_foam_threshold (water_flowmap_foam.z)
    #define water_flowmap_foam_reflectivity (water_flowmap_foam.w)
    #define water_flowmap_tex_add_1a_samplerstate water_flowmap_tex_add_0_samplerstate
    #define water_flowmap_tex_add_1b_samplerstate water_flowmap_tex_add_0_samplerstate
    #define STATIC_SHADOW_REFERENCE_FXAA_IMPL 1
    #define water_refraction_tex_samplerstate preparedLoss_samplerstate
    ##if compatibility_mode == compatibility_mode_off
      #define foam_tex_samplerstate perlin_noise_samplerstate
    ##else
      #define foam_tex_samplerstate preparedLoss_samplerstate
    ##endif
  }

  bool colorPass = true;
  WATER_3D_COMMON()
endmacro

macro USE_WATER_3D_DEFERRED_COLOR()
  INIT_HDR(ps)
  USE_HDR(ps)

  USE_BRUNETON_FOG()
  USE_CLOUDS_SHADOW()

  INIT_SKY_UP_DIFFUSE(ps)
  USE_SUN_DISK_SPECULAR()

  if (use_postfx == off)
  {
    FULL_TONEMAP_LUT_APPLY(ps)
  }
  USING_SKY_ATTENUATION(ps)
  if (clouds_panorama_mip == NULL)
  {
    (ps) { water_planar_reflection_clouds@smp2d = water_planar_reflection_clouds;
           planar_reflection_distortion_strength@f1 = (ambient_wind__speed__current_time__previous_time.x);}
    hlsl
    {
      #define BASE_PLANAR_REFLECTION_DISTORTION_STRENGTH 1
      #define REFLECTION_TC_BIAS 0.005
      #define NUM_PROBE_MIPS 5.h
    }
    INIT_BOUNDING_VIEW_REPROJECTION(ps)
    USE_BOUNDING_VIEW_REPROJECTION(ps)
  }
  else
  {
    (ps) {
      clouds_panorama_mip@tex = clouds_panorama_mip hlsl{ Texture2D<float3>clouds_panorama_mip@tex; }
    }
    hlsl(ps) {
      #define clouds_panorama_mip_samplerstate clouds_alpha_panorama_tex_samplerstate
    }
    INIT_CLOUDS_ALPHA_PANORAMA()
    USE_CLOUDS_ALPHA_PANORAMA()
  }
  USE_ROUGH_TO_MIP()

  INIT_UNDERWATER_FOG()
  GET_UNDERWATER_FOG()
  USE_WATER_CASCADES_ROUGHNESS()
  CUSTOM_FOG(ps)

  (ps)
  {
    downsampled_far_depth_tex@tex = downsampled_far_depth_tex hlsl
    {
      Texture2D<float>downsampled_far_depth_tex@tex;
      #define downsampled_far_depth_tex_samplerstate skies_frustum_scattering_samplerstate
    }
  }
  WATER_3D_DEFERRED_COMMON()

  if (water_rt_enabled == no)
  {
    INIT_STATIC_SHADOW()
    USE_STATIC_SHADOW()
  }

  hlsl(ps) {

    float4 calc_water_color_from_ps_input_really_simple(PS_INPUT In HW_USE_SCREEN_POS INPUT_VFACE, half3 worldNormal)
    {
      //simple const color
      float4 oceanColor = get_ocean_color(float2(0,0), 0);
      return float4(oceanColor.xyz, 1);
    }

    float4 calc_water_color_from_ps_input(PS_INPUT In HW_USE_SCREEN_POS INPUT_VFACE, half3 worldNormal)
    {
      float4 screenpos = GET_SCREEN_POS(In.pos_clip);
      float2 screenTc = screen_pos_to_tc(screenpos.xy);
      float2 lowresTc = saturate(screen_pos_to_lowres_tc(screenpos.xy));
      float3 pointToEye = getPointToEye(screenpos.xy, screenpos.w);
      float3 worldPos = world_view_pos.xyz-pointToEye.xyz;
      float distSq = dot(pointToEye,pointToEye);
      float invDist = rsqrt(distSq);
      float dist = distSq*invDist;
      float distLog2 = log2(dist);
      float distToZfar = saturate(dist/zn_zfar.y);
      float3 pointToEyeNormalized = pointToEye * invDist;
      float4 result;
      half3 finalLitRefraction = half3(0,0,0);
      half3 finalReflection = half3(1,1,1);
      half3 foamColor = half3(1,1,1);

      float4 water_projection_pos = mul(float4(In.pos_world_undisplaced.xzy, 1), water_effects_proj_tm);
      float2 wfxTc = normalize_wfx_tc(water_projection_pos).xy;

      ShoreData shoreData;
      getShoreAttributes(worldPos, shoreData);

      ##if shader != water_distant
        CascadesTex csc;
        ##if water_flowmap_tex == NULL || mobile_render != off
          get_cascades(In.pos_world_undisplaced.xy, csc.nvsf_tex_coord_cascade01, csc.nvsf_tex_coord_cascade23, csc.nvsf_tex_coord_cascade45);
        ##else
          get_cascades(In.worldPosXZ_a, csc.nvsf_tex_coord_cascade01_a, csc.nvsf_tex_coord_cascade23_a, csc.nvsf_tex_coord_cascade45_a);
          get_cascades(In.worldPosXZ_b, csc.nvsf_tex_coord_cascade01_b, csc.nvsf_tex_coord_cascade23_b, csc.nvsf_tex_coord_cascade45_b);
        ##endif
        float4 nvsf_blendfactors0123 = 1;
        float4 nvsf_blendfactors4567 = 1;
        GFSDK_WAVEWORKS_SURFACE_ATTRIBUTES surfaceAttributes = GFSDK_WaveWorks_GetSurfaceAttributes(In, csc, nvsf_blendfactors0123,
                                                                                                    nvsf_blendfactors4567, pointToEyeNormalized);

        worldNormal = get_water_normal(In, shoreData, worldPos, surfaceAttributes.normal.xzy, wfxTc, nvsf_blendfactors0123, nvsf_blendfactors4567);
      ##endif

      ##if water_heightmap_pages != NULL
        float3x3 tangentSpace = float3x3(In.tangent, cross(In.bitangent, In.tangent), In.bitangent);
        worldNormal = mul(worldNormal, tangentSpace);
      ##endif
      worldNormal = MUL_VFACE(worldNormal);

      // Getting texcoords
      half bubblesFactor = 2.0*shoreData.gerstnerFoamFactor;

      float3 reflectDirNormalized = reflect(-pointToEyeNormalized, worldNormal);


      float3 reflectSampleDir = reflectDirNormalized;
      reflectSampleDir.y = abs(reflectSampleDir.y);//this hack is preventing reflection belowe horizon. In real water it can happen, but will only reflect reflecting water
      FLATTEN
      if (world_view_pos.y < water_level_max_wave_height.x)
        reflectSampleDir.y = -reflectSampleDir.y;

      // Applying wakes to normals

      float3 halfDir = normalize(pointToEyeNormalized.xyz-from_sun_direction.xyz);

      float3 view = pointToEyeNormalized;
      float NoH = saturate( dot(worldNormal, halfDir) );
      float VoH = saturate( dot(view, halfDir) );
      half fresnelLight = fresnelSchlick(0.02, VoH).x;
      float NdotV = dot(worldNormal,pointToEyeNormalized);
      float NoV = abs(NdotV)+1e-5;
      float Fc = pow5(1.- NoV);
      half fresnelView = Fc+0.02*(1-Fc);
      float NoL = dot(-from_sun_direction.xyz, worldNormal);

      // Getting planar reflection

      float2 refractionTC = lowresTc;

      float waterRTShadow = 1;
      float4 objectReflection = 0;
      ##if (in_editor_assume == no) && (water_reflection_tex != NULL)
      BRANCH
      if (water_ssr_intensity > 0)
      {
        float SSR_VALID_TRESHOLD = 0; // green channel is 0 where water SSR wasn't rendered, and minimum 0.1 elsewhere
        bool4 strengthMask = water_reflection_strength_tex.GatherGreen(water_reflection_strength_tex_samplerstate, refractionTC) > SSR_VALID_TRESHOLD;
        if (all(strengthMask))
        {
          float4 strengthSample = tex2D(water_reflection_strength_tex, refractionTC);
          objectReflection = float4(
            tex2D(water_reflection_tex, refractionTC).rgb,
            strengthSample.r * water_ssr_intensity
          );
          ##if water_rt_enabled == yes
            waterRTShadow = strengthSample.b;
          ##endif
        }
        else
        {
          float4 strengthMul = float4(strengthMask);
          if (any(strengthMask))
            strengthMul = strengthMul / dot(strengthMul, strengthMul);
          objectReflection.r = dot(water_reflection_tex.GatherRed(water_reflection_tex_samplerstate, refractionTC), strengthMul);
          objectReflection.g = dot(water_reflection_tex.GatherGreen(water_reflection_tex_samplerstate, refractionTC), strengthMul);
          objectReflection.b = dot(water_reflection_tex.GatherBlue(water_reflection_tex_samplerstate, refractionTC), strengthMul);
          objectReflection.a = dot(water_reflection_strength_tex.GatherRed(water_reflection_strength_tex_samplerstate, refractionTC), strengthMul) * water_ssr_intensity;
          ##if water_rt_enabled == yes
            waterRTShadow = dot(water_reflection_strength_tex.GatherBlue(water_reflection_strength_tex_samplerstate, refractionTC), strengthMul);
          ##endif
        }
        ##if water_rt_enabled == no
          objectReflection.rgb = unpack_hdr(objectReflection.rgb);
        ##endif
      }
      ##endif

      // Getting water depth and opacity for blending
      float floorZ = linearize_z(tex2Dlod(downsampled_far_depth_tex, float4(lowresTc, 0, 0)), zn_zfar.zw);

      float3 viewVect = -pointToEyeNormalized;

      float ocean_part = shoreData.riverMultiplier;

      // Getting water underocean color

      // Getting seabed color (refracted terrain & objects)
      half3 fog_mul, fog_add;
      get_volfog_with_scattering(screenTc, screenTc, view, dist, screenpos.w, fog_mul, fog_add);

      half2 refractionDisturbance;
      float waterDepth = max(0, floorZ - screenpos.w);

      float refractionDistortion = (0.02*min(1,10.0*waterDepth/(waterDepth + dist)));
      float2 distortionVector = worldNormal.xz;
      refractionDisturbance.x =-refractionDistortion*distortionVector.x;
      refractionDisturbance.y =refractionDistortion*distortionVector.y;
      float2 refrTc = refractionTC + refractionDisturbance;

      float refractedWaterDepth = linearize_z(tex2Dlod(downsampled_far_depth_tex, float4(refrTc, 0, 0)), zn_zfar.zw);
      if (refractedWaterDepth < screenpos.w)
        refrTc = refractionTC;
      else
        floorZ = refractedWaterDepth;

      // Artificially increase water depth at farplane to fix transparent water over the border of the world.
      floorZ += max(0, screenpos.w - zn_zfar.y + 100);
      float realWaterDepth = floorZ - screenpos.w;
      IF_IS_BACK_FACE
      {
        refractedWaterDepth = realWaterDepth = dist;
      }

      waterDepth = abs(realWaterDepth);
      float water_depth_hardness = foam_tiling.y;
      float3 underWaterPos = world_view_pos + viewVect*floorZ;
      float water_deep_down = max(0, worldPos.y-underWaterPos.y);
      float shore_blending_coeff = saturate(realWaterDepth * water_depth_hardness);
      fresnelView *= shore_blending_coeff;

      half3 underwater_loss, underwater_inscatter;
      ##if water_rt_enabled == no
        half vsmShadow = getStaticShadow(worldPos);
      ##else
        half vsmShadow = waterRTShadow;
      ##endif
      half cloudShadow = clouds_shadow(worldPos);
      half shadow = min(vsmShadow, cloudShadow);

      float4 oceanColor = get_ocean_color(worldPos.xz, 0);
      float waterVolumeFog =  exp2(oceanColor.w*waterDepth);
      underwater_loss = waterVolumeFog;
      underwater_inscatter = (oceanColor.rgb/4)*(1-waterVolumeFog);

      #if HAS_REFRACTION
        float refractionScatter = log2(waterDepth) - water_refraction_base_mip;
        half3 seabedColor = tex2Dlod(water_refraction_tex, float4(refrTc, 0, refractionScatter)).rgb;
      #else
        float waterOpacity = saturate(1 - waterVolumeFog);
        half3 seabedColor = half3(0.07, 0.1, 0.07);
      #endif

      seabedColor = max(float3(0,0,0), (unpack_hdr(seabedColor)-fog_add)/max(fog_mul,0.000001));

      // Calculating specular
      float2 wind_dir = wind_dir_speed.xy;
      ##if compatibility_mode == compatibility_mode_off
        half smoothness_mul = tex2D(perlin_noise, float2(0.00011*(worldPos.x*wind_dir.x-worldPos.z*wind_dir.y), 0.00041*(worldPos.x*wind_dir.y+worldPos.z*wind_dir.x))).g;
      ##else
        half smoothness_mul = 0.5f;
      ##endif
      smoothness_mul = lerp(smoothness_mul, 0.5, distToZfar);
      smoothness_mul = 0.9;
      float smoothness = (0.71+0.28*smoothness_mul);  // BY TIM //: to prevent dark "holes" in specular
      float sun_roughness = 1-smoothness;

      float ggx_alpha = get_cascades_roughness(distLog2);
      float D, G;
      float3 F;
      sunDiskSpecular( 0.02, NoV, sun_roughness, -from_sun_direction.xyz, view, worldNormal, D, G, F );
      fresnelLight = F.x;
      G = 1;
      half absNoL = abs(NoL); //to avoid dark lines in specular
      half sunSpec = D*G*absNoL;

      // calculating hf specular factor
      half3 hf_normal = normalize(half3(worldNormal.x,0.25, worldNormal.z)); // 0.25 - tweakable - "spread" of sparkles
      float NoH_sparkles = saturate( dot(halfDir, hf_normal) );
      float D_sparkles = BRDF_distribution( sun_roughness*0.3, NoH_sparkles );
      float maxSpec = 6.0;
      sunSpec += min(D_sparkles*G*absNoL, maxSpec)*0.5;
      sunSpec = min(sunSpec*fresnelLight, maxSpec);

      half sunReflectionShadow  = (cloudShadow * 0.85 + 0.15); // intensity of specular mask by clouds shadow, must have outer percent parameter
      sunSpec *= sunReflectionShadow*vsmShadow;

      // Caclulating reflection color

      float sunMaskAlpha = objectReflection.a;
      sunMaskAlpha = 1 - pow2(1 - sunMaskAlpha);

      float waterColorToEnvColorKoef = saturate(screenpos.w * inv_zfar * 2.0 - 1.0);
      // not entirely correct (it should be sqrt(ggx_alpha)), but the approximation works better this way
      float linearRoughness = lerp(ggx_alpha, 1.0 - (0.71 + 0.28 * 0.5), waterColorToEnvColorKoef);

      ##if water_flowmap_tex == NULL
        float flowFoamFactor = 0;
      ##else
        float3 flowmapSample = In.water_flowmap_sample;
        float2 flowmapUVAdd0 = worldPos.xz * world_to_flowmap_add_0.xy + world_to_flowmap_add_0.zw;
        if (all(flowmapUVAdd0 >= 0) && all(flowmapUVAdd0 <= 1))
        {
          float flowmapStrengthAdd0 = saturate(dist * water_flowmap_strength_add_0.x + water_flowmap_strength_add_0.y) * water_flowmap_strength_add_0.w;
          float flowmapSampleAdd0 = tex2Dlod(water_flowmap_tex_add_0, float4(flowmapUVAdd0, 0, 0)).z;
          flowmapSample.z += flowmapSampleAdd0 * flowmapStrengthAdd0;
        }
        BRANCH
        if (water_flowmap_cascades >= 2)
        {
          float4 flowmapUVAdd1 = worldPos.xzxz * world_to_flowmap_add_1a + world_to_flowmap_add_1b;
          if (all(flowmapUVAdd1 >= 0) && all(flowmapUVAdd1 <= 1))
          {
            float flowmapStrengthAdd1 = saturate(dist * water_flowmap_strength_add_1.x + water_flowmap_strength_add_1.y) * water_flowmap_strength_add_1.w;
            float flowmapSampleAdd1a = tex2Dlod(water_flowmap_tex_add_1a, float4(flowmapUVAdd1.xy, 0, 0)).z;
            float flowmapSampleAdd1b = tex2Dlod(water_flowmap_tex_add_1b, float4(flowmapUVAdd1.zw, 0, 0)).z;
            float flowmapSampleAdd1 = lerp(flowmapSampleAdd1a, flowmapSampleAdd1b, water_flowmap_blend);
            flowmapSample.z += flowmapSampleAdd1 * flowmapStrengthAdd1;
          }
        }
        float2 windVec = wind_dir_speed.xy * cascadesTexelScale * current_time * 0.5 * UVScaleCascade0123.x;
        half flowFoamLowFreqA = tex2D(foam_tex, (csc.nvsf_tex_coord_cascade01_a.xy + windVec) * foam_tiling.w).r;
        half flowFoamLowFreqB = tex2D(foam_tex, (csc.nvsf_tex_coord_cascade01_b.xy + windVec) * foam_tiling.w).r;
        float flowmapTime = current_time * inv_water_flowmap_fading;
        float crossFade = abs(frac(flowmapTime) * 2 - 1);
        crossFade = smoothstep(0, 1, crossFade);
        half flowFoamLowFreq = lerp(flowFoamLowFreqA, flowFoamLowFreqB, crossFade);
        float flowFoamStrength = min(pow(flowmapSample.z, water_flowmap_foam_power) * water_flowmap_foam_scale, 1 + water_flowmap_foam_threshold) * water_flowmap_multiplier;
        float flowFoamFactor = saturate((flowFoamLowFreq - (1 - flowFoamStrength) * water_flowmap_foam_threshold) * flowFoamStrength);
        flowFoamFactor *= saturate(1 - water_flowmap_strength.w);

        float flowFoamReflectivity = pow(saturate(flowFoamFactor * foam_reflectivity_curve.x + foam_reflectivity_curve.y), water_flowmap_foam_reflectivity);
        shore_blending_coeff *= 1 - flowFoamReflectivity;
        linearRoughness = lerp(linearRoughness, 1, flowFoamReflectivity);
      ##endif

      // Adding foam on stern wake
      half sternWakeFactor = 0.0;
      const half STERN_EPS = 0.001; // To prevent division by zero

      // Getting projected effects color
      ##if projected_on_water_effects_tex != NULL
        if (all(wfxTc >= 0) && all(wfxTc <= 1)) {
          half4 effectsColor = h4tex2D(projected_on_water_effects_tex, wfxTc);
          sternWakeFactor = 1.0 - effectsColor.a;
          foamColor = unpack_hdr(effectsColor.rgb) / (sternWakeFactor + STERN_EPS);

          float sternWakeReflectivity = saturate(sternWakeFactor * foam_reflectivity);
          shore_blending_coeff *= 1 - sternWakeReflectivity;
          linearRoughness = lerp(linearRoughness, 1, sternWakeReflectivity);
        }
      ##endif

      half enviBRDF = saturate(EnvBRDFApprox( 0.02, linearRoughness, NoV).x);//fixme: optimize for water
      float enviMip = ComputeReflectionCaptureMipFromRoughness(linearRoughness);
      ##if clouds_panorama_mip == NULL
        float2 reflectionTC = float2(refractionTC.x, -refractionTC.y);
        ##if use_bounding_vr_reprojection == on
          reflectionTC = vr_bounding_view_reproject_tc(reflectionTC, 0);
        ##endif
        reflectionTC.y -= REFLECTION_TC_BIAS;//bias to prevent sampling from under the horizon
        float2 reflDistortionVector = worldNormal.xz;
        reflDistortionVector.y = 0.5 * abs(reflDistortionVector.y);
        reflDistortionVector *= BASE_PLANAR_REFLECTION_DISTORTION_STRENGTH + planar_reflection_distortion_strength;
        half4 enviReflectionA =
          tex2Dlod(water_planar_reflection_clouds, float4(reflectionTC  + 0.3 * reflDistortionVector, 0, enviMip)) * 0.5 +
          tex2Dlod(water_planar_reflection_clouds, float4(reflectionTC + float2(0.1, 0.6) * reflDistortionVector, 0, enviMip)) * (0.7 * 0.5) +
          tex2Dlod(water_planar_reflection_clouds, float4(reflectionTC + float2(0.2, 1.0) * reflDistortionVector, 0, enviMip)) * (0.3 * 0.5);
        float3 reflectWaterPlaneDirNormalized = reflect(-pointToEyeNormalized, float3(0,1,0));
        half3 enviReflection = unpack_hdr(enviReflectionA.rgb) * saturate(dot(reflectDirNormalized, reflectWaterPlaneDirNormalized));
        half cloudsAlpha = enviReflectionA.a;
      ##else
        float2 sky_uv = get_panorama_uv(worldPos, reflectSampleDir);
        half3 enviReflection = tex2Dlod(clouds_panorama_mip, float4(sky_uv,0,enviMip)).rgb;
        half cloudsAlpha = 1 - get_clouds_alpha_panorama_uv(sky_uv);
      ##endif
      enviReflection *= skylight_sky_atten;
      sunMaskAlpha = saturate(sunMaskAlpha + cloudsAlpha);
      float invDistToZfar = 1 - distToZfar;
      sunMaskAlpha *= saturate(2 * invDistToZfar);
      sunSpec *=  1.0f - sunMaskAlpha; // reflected objects mask for sun specular
      half3 sunReflection = sun_color_0 * sunSpec;
      half3 sky_color = enviReflection;

      BRANCH
      if (objectReflection.a > 0.01)
      {
        #define PANORAMA_MIP_FOR_BLENDING 3
        ##if clouds_panorama_mip != NULL
          half3 envi_smooth = tex2Dlod(clouds_panorama_mip, float4(sky_uv,0,PANORAMA_MIP_FOR_BLENDING)).rgb;
        ##else
          half4 enviReflectionB =
            tex2Dlod(water_planar_reflection_clouds, float4(reflectionTC  + 0.3 * reflDistortionVector, 0, PANORAMA_MIP_FOR_BLENDING)) * 0.5 +
            tex2Dlod(water_planar_reflection_clouds, float4(reflectionTC + float2(0.1, 0.6) * reflDistortionVector, 0, PANORAMA_MIP_FOR_BLENDING)) * (0.7 * 0.5) +
            tex2Dlod(water_planar_reflection_clouds, float4(reflectionTC + float2(0.2, 1.0) * reflDistortionVector, 0, PANORAMA_MIP_FOR_BLENDING)) * (0.3 * 0.5);
          half3 envi_smooth = unpack_hdr(enviReflectionB.rgb) * saturate(dot(reflectDirNormalized, reflectWaterPlaneDirNormalized));
        ##endif
        envi_smooth *= skylight_sky_atten;
        sky_color = lerp(enviReflection, envi_smooth, saturate(2*objectReflection.a));
      }
      ##if in_editor_assume == no
        float4 indoorRefl__localWeight = use_indoor_probes(worldPos, worldNormal, reflectDirNormalized, enviMip, dist);
        sky_color = lerp(indoorRefl__localWeight.xyz, sky_color, indoorRefl__localWeight.w);
      ##endif
      half3  reflectionColor = lerp(sky_color, objectReflection.rgb, objectReflection.a)*enviBRDF+sunReflection;

      // Adding subsurface scattering/double refraction to refraction color
      // simulating scattering/double refraction: light hits the side of wave, travels some distance in water, and leaves wave on the other side
      // it is difficult to do it physically correct without photon mapping/ray tracing, so using simple but plausible emulation below

      // scattering needs to be faded out at distance
      const half scatterIntensity = 1.0;
      half distanceFaderStartingAt1000m =  rcp(1+dist*(1./1000));

      // only the crests of water waves generate double refracted light
      half displaceY = log2(max(1, worldPos.y - In.pos_world_undisplaced.z + 2.0));
      half scatterFactor = scatterIntensity * displaceY * distanceFaderStartingAt1000m*scatter_disappear_factor;

      // the waves that lie between camera and light projection on water plane generate maximal amount of double refracted light
      scatterFactor *= pow2(max(0.0,dot((float3(from_sun_direction.x,0.0,from_sun_direction.z)),pointToEyeNormalized)));

      // the slopes of waves that are oriented back to light generate maximal amount of double refracted light
      scatterFactor *= pow4(1 - NoL)*2;//up to 2^4

      ##if compatibility_mode == compatibility_mode_off
        scatterFactor *= 1-saturate(shoreData.landHeight*water_heightmap_min_max.z+water_heightmap_min_max.w-water_level_max_wave_height.x);
      ##else
        scatterFactor *= 1-saturate(water_heightmap_min_max.z+water_heightmap_min_max.w-water_level_max_wave_height.x);
      ##endif

      // Adding some turbulence based bubbles spread in water

      ##if shader == water_distant
        float foamFactor = 0;
      ##else
        // Getting foam textures
        half FoamLowFreq = tex2D(foam_tex, In.pos_world_undisplaced.xy*foam_tiling.x).r;//0.051 plane, 0.101 tank

        // Calculating shore waves foam
        float gerstnerFoamFactor = FoamLowFreq*shoreData.gerstnerFoamFactor;

        // Calculating turbulence energy based foam
        float oceanFoamFactor = 1.0*saturate(FoamLowFreq * min(1.0,2.0*surfaceAttributes.foam_turbulent_energy));

        // Clumping foam on folded areas
        oceanFoamFactor *= 1.0 + 1.0*saturate(surfaceAttributes.foam_surface_folding);
        gerstnerFoamFactor *= 1.0 + 1.0*saturate(surfaceAttributes.foam_surface_folding*shoreData.oceanWavesMultiplier);

        // Applying foam wave hats
        oceanFoamFactor += 0.5*saturate(FoamLowFreq*FoamLowFreq*surfaceAttributes.foam_wave_hats);

        // Combining shore and ocean foam, using high power of oceanWavesMultiplier to leave leewind areas without ocean foam
        float foamFactor = pow4(shoreData.oceanWavesMultiplier)*oceanFoamFactor + gerstnerFoamFactor + sternWakeFactor;
      ##endif

      BRANCH
      if (water_ripples_foam_on != 0)
      {
        float ripplesFoamFactor = saturate(get_water_ripples_displace(worldPos) * water_ripples_foam_intensity);
        foamFactor += ripplesFoamFactor;
      }

      foamColor = lerp(1.0, foamColor, sternWakeFactor / (foamFactor + STERN_EPS));

      foamFactor *= saturate(waterDepth);
      flowFoamFactor *= saturate(waterDepth);

      // Calculating texture based modulation factors used to to hide repeats and add uniqueness
      half foamRepeatHider = 1-saturate(dist/10000.0 - 1.0); // smoothly complete hide foam (lerp to 0) in distance range 10km to 20km

      // Applying foam repeat hider
      foamFactor = saturate(foamRepeatHider*foamFactor);
      flowFoamFactor = saturate(foamRepeatHider*flowFoamFactor);

      // Adding foam on intersection between water and terrain
      scatterFactor *= cloudShadow*0.75 + 0.25;
      half3 lighting = (sun_color_0*(scatterFactor + saturate(0.6 + 0.4*NoL))*shadow + enviUp);
      underwater_inscatter *= lighting;

      // Getting final refraction color
      half3 surfaceFoamColor = sun_color_0*(saturate(0.6 + 0.4*NoL) * vsmShadow * cloudShadow) + sky_color;

      reflectionColor *= shore_blending_coeff;
      #if HAS_REFRACTION
        finalLitRefraction = underwater_loss*seabedColor+underwater_inscatter;
      #else
        finalLitRefraction = underwater_inscatter;
      #endif

      // Applying fresnel factor
      result.rgb = finalLitRefraction * (1-fresnelView)+reflectionColor;

      // Applying surface foam
      result.rgb = lerp(result.rgb, surfaceFoamColor * foamColor, foamFactor);
      result.rgb = lerp(result.rgb, surfaceFoamColor * water_flowmap_foam_color.rgb, flowFoamFactor);

      #if HAS_REFRACTION
        // Applying fog
        result.a = 1.0;
      #else
        //apply blend factor
        result.a = waterOpacity*(1-foamFactor);
      #endif

      #if HAS_REFRACTION
        result.rgb = result.rgb*fog_mul + fog_add;
      #else
        result.rgb = result.rgb*fog_mul + fog_add*result.a;
      #endif

      ##if water_flowmap_tex != NULL
        // Flowmap debug render mode
        result.rgb = lerp(result.rgb, In.water_flowmap_sample.rgb, water_flowmap_debug);
      ##endif

      ##if use_postfx == off
        result.rgb = performLUTTonemap(result.rgb);
      ##endif
      result.rgb = pack_hdr(result.rgb).rgb;
       if (special_vision > 0) //thermal vision
       {
        result.rgb = 0;
        result.r = 0.02 + 0.1* saturate(dot(worldNormal, normalize(view)));
       }
      return result;
    }
  }
endmacro
