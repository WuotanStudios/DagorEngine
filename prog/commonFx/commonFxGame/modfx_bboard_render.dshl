include "dafx_helpers.dshl"
include "dafx_shaders.dshl"
include "shader_global.dshl"
include "fom_shadows.dshl"
include "clustered/lights_cb.dshl"
include "dynamic_lights_count.dshl"
include "flexible_scale_rasterization.dshl"
include "vr_reprojection.dshl"

int modfx_debug_render = 0;
interval modfx_debug_render : off < 1, on;

int modfx_wboit_enabled = 0;
interval modfx_wboit_enabled : off < 1, on;

int fx_apply_volfog_per_pixel = 0;
interval fx_apply_volfog_per_pixel: no < 1, yes; // must be disabled explicitly for WT compat for lack of UAV

int fx_has_volfog_injection = 0;
interval fx_has_volfog_injection: no < 1, yes;

int rendering_distortion_color = 0;
interval rendering_distortion_color: no < 1, yes;

int fom_double_intensity = 0;
interval fom_double_intensity: no < 1, yes;

int modfx_bboard_lighting_from_clustered_lights = 0;
interval modfx_bboard_lighting_from_clustered_lights: no < 1, yes;

texture wboit_color;
texture wboit_alpha;

texture haze_scene_depth_tex;
float haze_scene_depth_tex_lod;

float modfx_wboit_depth_offset = 20;

define_macro_if_not_defined DAFX_USE_CLOUD_SHADOWS()
endmacro

int dafx_modfx_g_tex_0_const_no = 10;
int dafx_modfx_g_tex_1_const_no = 11;

shader dafx_modfx_bboard_render, dafx_modfx_ribbon_render, dafx_modfx_ribbon_render_side_only, dafx_modfx_bboard_render_atest, dafx_modfx_bboard_distortion, dafx_modfx_ribbon_distortion, dafx_modfx_ribbon_distortion_side_only, dafx_modfx_bboard_thermals, dafx_modfx_bboard_render_fom, dafx_modfx_bboard_rain, dafx_modfx_bboard_rain_distortion, dafx_modfx_volshape_render, dafx_modfx_volshape_thermal, dafx_modfx_volshape_wboit_render, dafx_modfx_bboard_volfog_injection
{
  ENABLE_ASSERT(ps)
  if (fx_apply_volfog_per_pixel == yes && !(shader == dafx_modfx_bboard_distortion || shader == dafx_modfx_ribbon_distortion || shader == dafx_modfx_ribbon_distortion_side_only || shader == dafx_modfx_bboard_rain_distortion || shader == dafx_modfx_bboard_render_fom))
  {
    hlsl
    {
      #define MODFX_USE_FOG_PS_APPLY 1
    }
  }

  z_test = true;
  cull_mode = none;

  DAFXEX_USE_SHADOW()
  DAFXEX_USE_GI()

  hlsl
  {
    #if !MOBILE_DEVICE
      #define MODFX_USE_LIGHTING 1
    #endif
    #define MODFX_USE_FRAMEBLEND 1
    #define MODFX_USE_DEPTH_MASK 1
    #define MODFX_USE_COLOR_MATRIX 1
    #define MODFX_USE_COLOR_REMAP 1
    #define MODFX_USE_PACK_HDR 1
    #define MODFX_USE_FOG 1
  }

  if (shader == dafx_modfx_ribbon_render || shader == dafx_modfx_ribbon_render_side_only || shader == dafx_modfx_ribbon_distortion || shader == dafx_modfx_ribbon_distortion_side_only )
  {
    hlsl
    {
      #define MODFX_RIBBON_SHAPE 1
    }

    if (shader == dafx_modfx_ribbon_render_side_only || shader == dafx_modfx_ribbon_distortion_side_only)
    {
      hlsl
      {
        #define MODFX_RIBBON_SHAPE_IS_SIDE_ONLY 1
      }
    }
    else
    {
      hlsl
      {
        #define MODFX_RIBBON_SHAPE_IS_SIDE_ONLY 0
      }
    }
  }

  if ( modfx_debug_render == on )
  {
    z_write = false;
    z_test = false;

    blend_src=one;
    blend_dst=one;

    blend_asrc=one;
    blend_adst=one;

    hlsl { #define MODFX_DEBUG_RENDER_ENABLED 1 }
  }
  else if ( shader == dafx_modfx_bboard_render || shader == dafx_modfx_bboard_rain || shader == dafx_modfx_ribbon_render || shader == dafx_modfx_ribbon_render_side_only)
  {
    z_write = false;
    blend_src=one;
    blend_dst=isa;

    blend_asrc=zero;
    blend_adst=isa;

    DAFX_USE_CLOUD_SHADOWS()
  }
  else if ( shader == dafx_modfx_volshape_render || shader == dafx_modfx_volshape_thermal )
  {
    z_write = false;
    blend_src=one;
    blend_dst=isa;

    blend_asrc=zero;
    blend_adst=isa;

    if (modfx_wboit_enabled == on)
    {
      (ps)
      {
        wboit_color@smp2d = wboit_color;
        wboit_alpha@smp2d = wboit_alpha;
      }
    }
    else
    {
      if ( shader == dafx_modfx_volshape_thermal )
      {
        hlsl
        {
          #define MODFX_SHADER_THERMALS 1
          #undef MODFX_USE_LIGHTING
          #undef MODFX_USE_SHADOW
          #undef MODFX_USE_GI
          #include "fx_thermals.hlsl"
        }
      }
    }

    hlsl
    {
      #define MODFX_SHADER_VOLSHAPE 1
      #undef MODFX_USE_DEPTH_MASK

      ##if modfx_wboit_enabled == on
        #define MODFX_SHADER_VOLSHAPE_WBOIT_APPLY 1
      ##endif
    }
  }
  else if ( shader == dafx_modfx_volshape_wboit_render )
  {
    z_write = false;
    blend_src=one;
    blend_dst=one;
    blend_asrc=zero;
    blend_adst=isa;

    DAFX_USE_CLOUD_SHADOWS()
    hlsl
    {
      #define MODFX_SHADER_VOLSHAPE_WBOIT 1
      #define MODFX_WBOIT_ENABLED 1
      #undef MODFX_USE_DEPTH_MASK
    }

    (ps)
    {
      modfx_wboit_depth_offset@f1 = (modfx_wboit_depth_offset);
    }
  }
  else if ( shader == dafx_modfx_bboard_render_atest )
  {
    z_write = false;
    blend_src=one;
    blend_dst=zero;
    blend_asrc=zero;
    blend_adst=isa;

    USE_ATEST_HALF()
    DAFX_USE_CLOUD_SHADOWS()
    hlsl { #define MODFX_SHADER_ATEST 1 }
  }
  else if ( shader == dafx_modfx_bboard_distortion || shader == dafx_modfx_ribbon_distortion || shader == dafx_modfx_ribbon_distortion_side_only || shader == dafx_modfx_bboard_rain_distortion)
  {
    z_write  =true;
    blend_src[0]=one;
    blend_dst[0]=one;

    blend_asrc[0]=one;
    blend_adst[0]=one;

    blend_src[1] = 1; blend_dst[1] = 1;
    blend_op[1] = max; // reverse depth

    (ps)
    {
      haze_scene_depth_tex@smp2d = haze_scene_depth_tex;
      haze_scene_depth_tex_lod@f1 = (haze_scene_depth_tex_lod);
    }

    if (rendering_distortion_color == yes)
    {
      hlsl
      {
        #define MODFX_SHADER_DISTORTION_IS_COLORED 1
      }
    }

    hlsl
    {
      #undef DAFXEX_USE_REACTIVE_MASK
      #define DAFXEX_USE_REACTIVE_MASK 0 // Disable reactive mask for distortions, since they apply after txaa

      #define MODFX_SHADER_DISTORTION 1
      #define MODFX_USE_DEPTH_OUTPUT 1

      #undef HAS_STATIC_SHADOW
      #undef MODFX_USE_SHADOW
      #undef MODFX_USE_LIGHTING
      #undef MODFX_USE_GI
      #undef MODFX_USE_FRAMEBLEND
      #undef MODFX_USE_DEPTH_MASK
      #undef MODFX_USE_COLOR_MATRIX
      #undef MODFX_USE_COLOR_REMAP
      #undef MODFX_USE_PACK_HDR
      #undef MODFX_USE_FOG
    }

    USE_ATEST_1()
  }
  else if ( shader == dafx_modfx_bboard_thermals )
  {
    z_write = false;
    blend_src=one;
    blend_dst=isa;

    blend_asrc=zero;
    blend_adst=isa;

    hlsl
    {
      #define MODFX_SHADER_THERMALS 1
      #undef MODFX_USE_LIGHTING
      #undef MODFX_USE_SHADOW
      #undef MODFX_USE_GI
      #include "fx_thermals.hlsl"
    }
  }

  else if ( shader == dafx_modfx_bboard_volfog_injection )
  {
    if (fx_has_volfog_injection == no)
    {
      dont_render;
    }

    z_test = false;
    z_write = false;

    (ps)
    {
      view_inscatter_volume_resolution@f3 = (volfog_froxel_volume_res.x, volfog_froxel_volume_res.y, volfog_froxel_volume_res.z, 0);
      view_inscatter_inv_range@f1 = volfog_froxel_range_params.y;
      volfog_ff_initial_media_rw@uav : register(volfog_ff_initial_media_const_no) hlsl {
        #define VOLFOG_FF_INITIAL_MEDIA RWTexture3D<float4> volfog_ff_initial_media_rw@uav;
      }
    }
    hlsl(ps)
    {
      VOLFOG_FF_INITIAL_MEDIA;
    }

    hlsl
    {
      #define MODFX_SHADER_VOLFOG_INJECTION 1

      #undef HAS_STATIC_SHADOW
      #undef MODFX_USE_SHADOW
      #undef MODFX_USE_LIGHTING
      #undef MODFX_USE_GI
      #undef MODFX_USE_PACK_HDR
      #undef MODFX_USE_FOG
      #undef MODFX_USE_DEPTH_MASK
    }
  }


  else if ( shader == dafx_modfx_bboard_render_fom )
  {
    z_write = false;
    blend_src=one;
    blend_dst=one;

    hlsl
    {
      #define MODFX_SHADER_FOM 1
      #undef HAS_STATIC_SHADOW
      #undef MODFX_USE_SHADOW
      #undef MODFX_USE_LIGHTING
      #undef MODFX_USE_GI
      #undef MODFX_USE_PACK_HDR
      #undef MODFX_USE_FOG
      #undef MODFX_USE_DEPTH_MASK
      ##if fom_double_intensity == yes
        #define FX_FOM_DOUBLE_INTESITY 1
      ##endif
      #include "fom_shadows_inc.hlsl"
    }
  }

  DAFXEX_USE_PARTICLE_PLACEMENT()

  if (shader == dafx_modfx_bboard_rain || shader == dafx_modfx_bboard_rain_distortion)
  {
    DAFXEX_USE_RAIN_CULLING()

    hlsl
    {
      #define MODFX_RAIN 1
    }
  }


  DAFX_RENDER_INIT()
  DAFX_RENDER_USE()
  DAFX_SCREEN_POS_TO_TC()
  DECL_POSTFX_TC_VS_SCR()
  DAFXEX_USE_SCENE_BLOCK()
  DAFXEX_USE_DEPTH_MASK(ps)
  DAFXEX_USE_HDR()
  DAFXEX_USE_FOG()
  USE_FSR(ps)

  hlsl(vs)
  {
    // There is some bug in old adreno drivers (up to 512.420 version): vkCreateGraphicsPipelines can return null-handle with VK_OK result code.
    // Disabling that optimization helps to work around the problem. So, do it for now.
    ##if hardware.vulkan
      #pragma spir-v optimizer disable convert-local-access-chains
    ##endif
  }

  hlsl
  {
    #include "dafx_hlsl_funcs.hlsli"
    #include "dafx_globals.hlsli"
    #include "dafx_loaders.hlsli"
    #include "dafx_packers.hlsli"
    #include "dafx_random.hlsli"

    #include "modfx/modfx_decl.hlsl"
  }
  if (modfx_debug_render == off && modfx_bboard_lighting_from_clustered_lights == yes && dynamic_lights_count != lights_off)
  {
    INIT_OMNI_LIGHTS_CB(vs)
    INIT_AND_USE_LIGHTS_CLUSTERED_CB(vs)
    INIT_AND_USE_CLUSTERED_LIGHTS(vs)
    hlsl(vs)
    {
      #include "renderLights.hlsli"
      #define MODFX_BBOARD_LIGHTING_FROM_CLUSTERED_LIGHTS 1
    }
  }

  if (use_bounding_vr_reprojection == on)
  {
    INIT_BOUNDING_VIEW_REPROJECTION(vs)
    USE_BOUNDING_VIEW_REPROJECTION(vs)
    if (cloud_volume == NULL)
    {
      INIT_BOUNDING_VIEW_REPROJECTION(ps)
      USE_BOUNDING_VIEW_REPROJECTION(ps)
    }

    hlsl {
      float2 reproject_scattering(float2 tc, float raw_depth) { return vr_bounding_view_reproject_tc(tc, raw_depth); }
    }
  }
  else
  {
    hlsl {
      float2 reproject_scattering(float2 tc, float raw_depth) { return tc; }
    }
  }

  hlsl(vs)
  {
    #define FX_VS 1
    #include "modfx/modfx_bboard_render.hlsl"
    #undef FX_VS
  }

  (ps)
  {
    g_tex_0@smp2d : register(dafx_modfx_g_tex_0_const_no);
    g_tex_1@smp2d : register(dafx_modfx_g_tex_1_const_no);
  }

  hlsl(ps)
  {
    #define FX_PS 1
    #include "modfx/modfx_bboard_render.hlsl"
    #undef FX_PS
  }

  if (hardware.fsh_5_0)
  {
    compile( "ps_5_0", "dafx_bboard_ps" );
  }
  else
  {
    compile( "target_ps", "dafx_bboard_ps" );
  }
  compile( "target_vs", "dafx_bboard_vs" );
}

int dafx_modfx_bvh_instance_buffer_regno = 2 always_referenced;
int dafx_modfx_bvh_instance_count_regno = 3 always_referenced;
int dafx_modfx_bvh_instance_data_regno = 4 always_referenced;
int dafx_modfx_bvh_meta_id_regno = 32 always_referenced;

int dafx_modfx_bvh_max_count = 0;
int4 dafx_modfx_bvh_blas_address = 0;

shader dafx_modfx_bvh
{
  ENABLE_ASSERT(ps)

  if (!hardware.dx12 && !hardware.vulkan)
  {
    dont_render;
  }

  (vs) {
    bvh_instance_buffer@uav : register(dafx_modfx_bvh_instance_buffer_regno) hlsl {
      #include <RTHWInstance.hlsli>
      RWStructuredBuffer<RTHWInstance> bvh_instance_buffer@uav;
    };
    bvh_instance_count@uav : register(dafx_modfx_bvh_instance_count_regno) hlsl { RWByteAddressBuffer bvh_instance_count@uav; };
    bvh_instance_data@uav : register(dafx_modfx_bvh_instance_data_regno) hlsl {
      #include "modfx/modfx_bvh.hlsli"
      RWStructuredBuffer<ModfxBVHParticleData> bvh_instance_data@uav;
    };

    bvh_max_count@i1 = dafx_modfx_bvh_max_count;
    bvh_blas_address@i4 = dafx_modfx_bvh_blas_address;
  }

  DAFX_RENDER_INIT()
  DAFX_RENDER_USE()

  DAFX_USE_CLOUD_SHADOWS()

  DAFXEX_USE_PARTICLE_PLACEMENT()

  (vs)
  {
    bvh_meta_id@i1 : register(dafx_modfx_bvh_meta_id_regno);
  }

  hlsl(vs)
  {
    #define MODFX_USE_FRAMEBLEND 1

    #include "dafx_hlsl_funcs.hlsli"
    #include "dafx_globals.hlsli"
    #include "dafx_loaders.hlsli"
    #include "dafx_packers.hlsli"
    #include "dafx_random.hlsli"

    #include "modfx/modfx_decl.hlsl"

    #define FX_VS 1
      #include "modfx/modfx_bboard_render.hlsl"
    #undef FX_VS

    #define ADD_SHADOW_INSTANCE 0

    float4 dafx_bvh_vs(uint vertexId : SV_VertexID, uint instanceId : SV_InstanceID, uint draw_call_id : TEXCOORD0) : SV_Position
    {
      DafxRenderData ren_info;
      dafx_get_render_info( instanceId, vertexId, draw_call_id, ren_info );
      if (vertexId == 1)
      {
        uint bvhIndex, bvhDataIndex;
        bvh_instance_count.InterlockedAdd(0, ADD_SHADOW_INSTANCE ? 2 : 1, bvhIndex);
        bvhDataIndex = ADD_SHADOW_INSTANCE ? bvhIndex / 2 : bvhIndex;

        // Write a HW instance here
        if (bvhIndex < uint(bvh_max_count))
        {
          GlobalData gdata = global_data_load();

          ModfxParentRenData parent_data;
          dafx_preload_parent_ren_data( 0, ren_info.parent_ofs, parent_data );

          uint decls = parent_data.decls;
          uint flags = parent_data.flags;

          bool reverse_order = FLAG_ENABLED( flags, MODFX_RFLAG_REVERSE_ORDER );
          uint data_ofs = dafx_get_render_data_offset( ren_info, !reverse_order );

          bool is_dead = false;

          ModfxRenData rdata;
          modfx_load_ren_data(0, data_ofs, decls, rdata);
          rdata.pos += rdata.pos_offset;
          if (rdata.radius <= 0.f)
            is_dead = true;

          float angle_sin = 0.f;
          float angle_cos = 1.f;
          sincos( -rdata.angle, angle_sin, angle_cos );

          float4x4 wtm =
            { 1, 0, 0, 0,
              0, 1, 0, 0,
              0, 0, 1, 0,
              0, 0, 0, 1 };
          if ( parent_data.mods_offsets[MODFX_RMOD_INIT_TM] )
            wtm = dafx_get_44mat( 0, parent_data.mods_offsets[MODFX_RMOD_INIT_TM] );

          bool apply_wtm = FLAG_ENABLED( flags, MODFX_RFLAG_USE_ETM_AS_WTM );
          if ( apply_wtm )
            rdata.pos = mul( float4( rdata.pos, 1 ), wtm ).xyz;

          float2 aspect = 1;
          if ( parent_data.mods_offsets[MODFX_RMOD_CUSTOM_ASPECT] )
            aspect = dafx_get_2f( 0, parent_data.mods_offsets[MODFX_RMOD_CUSTOM_ASPECT] );

          float stable_rnd_offset = (ren_info.instance_id + ren_info.data_ofs % 20) * 0.001;
          rdata.pos += gdata.view_dir_z * stable_rnd_offset;

          float3 view_dir = gdata.world_view_pos - rdata.pos;
          float view_dir_dist = length( view_dir );
          float3 view_dir_norm = view_dir * (view_dir_dist > 0.01 ? rcp( view_dir_dist ) : 0);
          float3 up_vec = float3(0, 1, 0);
          float3 right_vec = normalize(cross(view_dir_norm, up_vec));
          up_vec = normalize(cross(right_vec, view_dir_norm));

          bool use_uv_rotation = FLAG_ENABLED( flags, MODFX_RFLAG_USE_UV_ROTATION );

          float3 rotated_forward_vec = view_dir_norm;
          float3 rotated_right_vec;
          float3 rotated_up_vec;
          if ( use_uv_rotation )
          {
            rotated_right_vec = right_vec;
            rotated_up_vec = up_vec;
          }
          else
          {
            rotated_right_vec = angle_cos * right_vec - angle_sin * up_vec;
            rotated_up_vec = angle_sin * right_vec + angle_cos * up_vec;
          }

          ModfxBVHParticleData particleData;

          particleData.upDir = rotated_up_vec;
          particleData.rightDir = rotated_right_vec;

          rotated_forward_vec *= rdata.radius;
          rotated_right_vec *= aspect.x * rdata.radius;
          rotated_up_vec *= aspect.y * rdata.radius;

          float3 wpos = rdata.pos;

          RTHWInstance bvhInstance;
          bvhInstance.transform0 = float4(rotated_right_vec.x, rotated_up_vec.x, rotated_forward_vec.x, wpos.x);
          bvhInstance.transform1 = float4(rotated_right_vec.y, rotated_up_vec.y, rotated_forward_vec.y, wpos.y);
          bvhInstance.transform2 = float4(rotated_right_vec.z, rotated_up_vec.z, rotated_forward_vec.z, wpos.z);
          bvhInstance.instanceId_mask = bvh_meta_id | (1 << 24);
          bvhInstance.instanceOffset_flags = RT_INSTANCE_FLAG_TRIANGLE_CULL_DISABLE << 24 | bvhDataIndex;
          bvhInstance.blas = is_dead ? int2(0, 0) : bvh_blas_address.xy;
          structuredBufferAt(bvh_instance_buffer, bvhIndex) = bvhInstance;

          #if ADD_SHADOW_INSTANCE
            rotated_forward_vec = normalize(-gdata.from_sun_direction.xyz);
            rotated_up_vec = float3(0, 1, 0);
            rotated_right_vec = normalize(cross(rotated_up_vec, rotated_forward_vec));
            rotated_up_vec = normalize(cross(rotated_forward_vec, rotated_right_vec));

            wpos += rotated_forward_vec * rdata.radius * 0.25f;

            rotated_right_vec *= aspect.x * rdata.radius;
            rotated_up_vec *= aspect.y * rdata.radius;
            rotated_forward_vec *= rdata.radius;

            bvhInstance.transform0 = float4(rotated_right_vec.x, rotated_up_vec.x, rotated_forward_vec.x, wpos.x);
            bvhInstance.transform1 = float4(rotated_right_vec.y, rotated_up_vec.y, rotated_forward_vec.y, wpos.y);
            bvhInstance.transform2 = float4(rotated_right_vec.z, rotated_up_vec.z, rotated_forward_vec.z, wpos.z);
            bvhInstance.instanceId_mask = bvh_meta_id | (2 << 24);
            bvhInstance.instanceOffset_flags = RT_INSTANCE_FLAG_TRIANGLE_CULL_DISABLE << 24 | bvhDataIndex;
            bvhInstance.blas = is_dead ? int2(0, 0) : bvh_blas_address.zw;
            structuredBufferAt(bvh_instance_buffer, bvhIndex + 1) = bvhInstance;
          #endif

          float2 delta;

          delta = float2( 0, 0 );
          particleData.texcoord0 = modfx_render_get_frame_tc_opt( parent_data, rdata.frame_idx, rdata.frame_flags, use_uv_rotation, angle_cos, angle_sin, delta );
          delta = float2( 1, 0 );
          particleData.texcoord1 = modfx_render_get_frame_tc_opt( parent_data, rdata.frame_idx, rdata.frame_flags, use_uv_rotation, angle_cos, angle_sin, delta );
          delta = float2( 1, 1 );
          particleData.texcoord2 = modfx_render_get_frame_tc_opt( parent_data, rdata.frame_idx, rdata.frame_flags, use_uv_rotation, angle_cos, angle_sin, delta );
          delta = float2( 0, 1 );
          particleData.texcoord3 = modfx_render_get_frame_tc_opt( parent_data, rdata.frame_idx, rdata.frame_flags, use_uv_rotation, angle_cos, angle_sin, delta );

          if ( FLAG_ENABLED( flags, MODFX_RFLAG_FRAME_ANIMATED_FLIPBOOK ) )
            particleData.frameBlend = rdata.frame_blend;
          else
            particleData.frameBlend = 0;

          particleData.color = rdata.color;
          if( FLAG_ENABLED( flags, MODFX_RFLAG_GAMMA_CORRECTION ) )
            particleData.color.rgb = pow2(particleData.color.rgb);

          particleData.emission = 0;
          if ( parent_data.mods_offsets[MODFX_RMOD_COLOR_EMISSION] )
          {
            ModfxColorEmission pp = ModfxColorEmission_load( 0, parent_data.mods_offsets[MODFX_RMOD_COLOR_EMISSION] );
            particleData.emission = unpack_e3dcolor_to_n4f( pp.mask ).xyz * pp.value * rdata.emission_fade;
          }

          particleData.radius = rdata.radius;

          particleData.lighting = 0;
          if ( FLAG_ENABLED( flags, MODFX_RFLAG_OMNI_LIGHT_ENABLED ) )
          {
            ModfxDeclExternalOmnilight pp = ModfxDeclExternalOmnilight_load( 0, parent_data.mods_offsets[MODFX_RMOD_OMNI_LIGHT_INIT] );
            particleData.lighting = get_omni_lighting(rdata.pos.xyz, pp.pos, pp.radius, pp.color);
          }

          #if DAFX_USE_CLOUD_SHADOWS
            particleData.shadow = dafx_get_clouds_shadow(rdata.pos);
          #else
            particleData.shadow = 1;
          #endif

          particleData.flags = FLAG_ENABLED( flags, MODFX_RFLAG_COLOR_USE_ALPHA_THRESHOLD ) ? UseAlphaTreshold : 0;
          particleData.flags |= parent_data.mods_offsets[MODFX_RMOD_LIGHTING_INIT] ? UseLighting : 0;
          particleData.flags |= parent_data.mods_offsets[MODFX_RMOD_TEX_COLOR_REMAP] ? UseColorRemap : 0;
          particleData.flags |= parent_data.mods_offsets[MODFX_RMOD_TEX_COLOR_MATRIX] ? UseColorMatrix : 0;

          particleData.ambient = gdata.sky_color;

          if ( parent_data.mods_offsets[MODFX_RMOD_LIGHTING_INIT] )
          {
            ModfxDeclLighting pp = ModfxDeclLighting_load( 0, parent_data.mods_offsets[MODFX_RMOD_LIGHTING_INIT] );

            particleData.lighting_type = pp.type;
            particleData.lighting_translucency = pp.translucency / 255.0;
            particleData.sphere_normal_power = pp.sphere_normal_power / 255.0;
            particleData.sphere_normal_softness = pp.normal_softness / 255.0;
            particleData.sphere_normal_radius = pp.sphere_normal_radius;
          }

          if ( parent_data.mods_offsets[MODFX_RMOD_TEX_COLOR_MATRIX] )
          {
            uint4 mat = dafx_get_4ui( 0, parent_data.mods_offsets[MODFX_RMOD_TEX_COLOR_MATRIX] );
            particleData.color_matrix_r = unpack_e3dcolor_to_n4f( mat.x );
            particleData.color_matrix_g = unpack_e3dcolor_to_n4f( mat.y );
            particleData.color_matrix_b = unpack_e3dcolor_to_n4f( mat.z );
            particleData.color_matrix_a = unpack_e3dcolor_to_n4f( mat.w );
          }

          structuredBufferAt(bvh_instance_data, bvhDataIndex) = particleData;
        }
      }

      return 0;
    }
  }

  compile( "target_vs", "dafx_bvh_vs" );
  compile( "ps_null", "null_ps" );
}