#  to be included in jBuild.jam

rule AddPostLinkCmdForImports # target : shared_libs : rel_shared_libs_path
{
  local install_name_call = ;
  for t in $(2) {
    install_name_call += -change $(t) @loader_path$(3)$(t:D=) ;
  }
  if $(install_name_call) {
    $(1)__POSTLINK_CMD += $(_INSTALL_NAME_TOOL) $(install_name_call) $($(1)__OutDir)/$(1) "
  " ;
  }
}

rule ProcessLinkTarget
{
  local _MACOSX_LIBS = ;

  if $(TargetType) = exe
  {
    _LINK_OPT = ;
    if $(Config) = rel || $(Config) = irel { }

    if $(Config) = rel {
      _LINK_OPT = -Wl,-map -Wl,$($(Target)__TmpDir)/$(Target:S=.map) -Wl,-unexported_symbol -Wl,"*" ;
      $(Target)__IMGBUILD = call strip ;
    } else {
      _LINK_OPT = -Wl,-map -Wl,$($(Target)__TmpDir)/$(Target:S=.map) ;
      $(Target)__IMGBUILD = rem ;
    }
    if $(CheckOnly) = yes { _LINK_OPT += -Wl,-S -Wl,-x -Xlinker -no_deduplicate ; }
    _LINK_OPT += -Wl,-rpath -Wl,@executable_path/../Frameworks ;

    $(Target)__LINK      = $(_LINK) ;
    $(Target)__LINK_OPT  = $(_LINK_OPT) $(LINKopt) ;

    # setup imports for main APP
    local install_name_call = ;
    for t in $(UseSharedLibs) {
      install_name_call +=
        -change ./$(t:D=) @loader_path/../Frameworks/$(t:D=)
        -change /usr/local/lib/$(t:D=) @loader_path/../Frameworks/$(t:D=)
        -change @loader_path/$(t:D=) @loader_path/../Frameworks/$(t:D=)
        -change @executable_path/$(t:D=) @loader_path/../Frameworks/$(t:D=)
      ;

      local dest = $(OutDir)/../Frameworks/$(t:D=) ;
      MakeDirectory $(dest) : $(OutDir)/../Frameworks ;
      Depends $(dest) : $(t) ;
      file on $(dest) = $(t:D=) ;
      post_copy_cmd on $(dest) = call chmod +x $(Root)/prog/_jBuild/macOS/lipo_dylib "
 " call $(Root)/prog/_jBuild/macOS/lipo_dylib $(PlatformArch) $(dest) "
 " set errorlevel=0 ;
      raw_copy_file $(dest) : $(t) ;
      Depends $(OutDir)/$(Target) : $(dest) ;
    }
    if $(install_name_call) {
      $(Target)__POSTLINK_CMD += $(_INSTALL_NAME_TOOL) $(install_name_call) $(OutDir)/$(Target) ;
    }

    # setup frameworks used by main APP
    {
      local install_name_call = ;
      for f in $(UseFrameworkBundles) {
        $(Target)__LINK_OPT += -F\"$(f:D)\" -framework $(f:D=) ;

        local import = @loader_path/../Frameworks/$(f:D=).framework/$(f:D=) ;
        install_name_call +=
          -change ./$(f:D=) $(import)
          -change @loader_path/$(f:D=) $(import)
          -change @executable_path/$(f:D=) $(import)
        ;

        SignFrameworkBundle $(f) ;
        CopyFrameworkBundle $(f) ;
      }
      if $(install_name_call) {
        $(Target)__POSTLINK_CMD += "
" $(_INSTALL_NAME_TOOL) $(install_name_call) $(OutDir)/$(Target) ;
      }
    }

    # setup imports for used shared libraries
    for t1 in $(UseSharedLibs) {
      local install_name_call = ;
      for t in $(UseSharedLibs) {
        if $(t) != $(t1) {
          install_name_call +=
            -change ./$(t:D=) @loader_path/../Frameworks/$(t:D=)
            -change /usr/local/lib/$(t:D=) @loader_path/../Frameworks/$(t:D=)
            -change @loader_path/$(t:D=) @loader_path/../Frameworks/$(t:D=)
            -change @executable_path/$(t:D=) @loader_path/../Frameworks/$(t:D=)
          ;
        }
      }
      $(Target)__POSTLINK_CMD += "
 " $(_INSTALL_NAME_TOOL) $(install_name_call) -id @loader_path/$(t1:D=) $(OutDir)/../Frameworks/$(t1:D=) ;
    }

    if $(Config) = rel && $(CopyTo) {
      local target_exe_name = $(Target:D=) ;
      # add proper postfix when copying exe so we can create universal binary
      if $(MacRelPath) != "" { target_exe_name = $(Target:D=)-$(PlatformArch) ; }
      $(Target)__POSTLINK_CMD += "
 " copyfile $(OutDir)/$(Target) $(CopyTo)/$(target_exe_name).orig ;
    } else if $(Config) = rel {
      $(Target)__LINK += -Wl,-S ;
    }

    LinkExeSetBuildStamp $(Target) ;
  }
  else if $(TargetType) = lib
  {
    $(Target)__LINK     = $(_LIB) ;
    $(Target)__LINK_OPT = $(LINKopt) ;
    #if $(Config) = rel || $(Config) = irel { }
  }
  else if $(TargetType) = dll
  {
    _LINK = $(_LINK_DLL) ;
    $(Target)__LINK     = $(_LINK) ;
    $(Target)__LINK_OPT = $(LINKopt) ; #-lpthread ;
    $(Target)__IMGBUILD = rem ;
    $(Target)__POSTLINK_CMD += $(_INSTALL_NAME_TOOL) -id $(Target:D=) $(OutDir)/$(Target) "
  " ;
  }

  local _ADD_LIBS = $(1) ;

  if $(TargetType) = exe {
    _ADD_LIBS +=  -l$(_MACOSX_LIBS) ;
  }
  $(Target)__LINK_LIBS = $(_ADD_LIBS) ;
}


actions together quietly link_target
{
#sync
  $(prelink_cmd)
  echo linking $(1:B)$(1:S)
  del $(1)
  set MACOSX_DEPLOYMENT_TARGET=$(MacOSXMinVer)
  call $(link) $(link_opt) $(link_libs) $(obj_list) -o $(1)
  if errorlevel 1 goto failed
  $(postlink_cmd)
  if errorlevel 1 goto failed
  $(imgbuild) $(1)
  if errorlevel 1 goto failed
  echo ----------------------------------------------------------------------
  if errorlevel 1 goto failed
  if not exist $(1) goto failed
  echo SUCCESSFULLY built $(1:B)$(1:S)  $(_PrintedOutput)
  goto end

  :failed
  echo FAILED to build $(1:B)$(1:S) [Error #%errorlevel%] $(_PrintedOutput)
  set ERRORLEVEL=13

  :end
  echo .
}


actions together quietly lib_target
{
#async
  echo creating lib $(1:B)$(1:S)
  del $(1)
  call $(link[1]) -static -no_warning_for_no_symbols -c -o $(1) - $(obj_list) $(link_libs)
  echo ----------------------------------------------------------------------
  if errorlevel 1 goto failed
  if not exist $(1) goto failed
  echo SUCCESSFULLY built $(1:B)$(1:S)  $(_PrintedOutput)
  goto end

  :failed
  echo FAILED to build $(1:B)$(1:S) [Error #%errorlevel%] $(_PrintedOutput)
  set ERRORLEVEL=13

  :end
  echo .
}
