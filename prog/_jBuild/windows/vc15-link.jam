#  to be included in jBuild.jam
UseLinkWholeOpt ?= $(UseWholeOpt) ;

if $(UseLLDLink) = yes
{
  LINK_RESPONSE_MARKER = @@@ ;
}

FileAlignLinkOption ?= -filealign ;
LINK_RESPONCE_FILE ?= ;


rule SignPackageRule
{
}

rule ProcessLinkTarget
{
  local _WIN_LIBS = user32.lib ole32.lib kernel32.lib gdi32.lib winmm.lib dbghelp.lib ;
  if $(Sanitize) = address { _WIN_LIBS += clang_rt.asan-x86_64.lib ; }
  _WIN_LIBS += $(AdditionalWinLibs) ;
  if $(PlatformArch) = x86 { BaseAddress ?= 0x00400000 ; }

  if $(TargetType) = exe
  {
    _LINK_OPT = -nologo $(FileAlignLinkOption):512 -base:$(BaseAddress) -incremental:no ;
    if $(PlatformArch) = x86 { _LINK_OPT += /LARGEADDRESSAWARE ; }
    if $(Sanitize) != disabled {
      _LINK_OPT += /FUNCTIONPADMIN ;
      if $(Sanitize) = address && $(PlatformSpec) = clang && $(CLangVer:B) in 16.0 17.0 18.1 19.1 {
        _LINK_OPT += -inferasanlibs:no ; # to avoid duplicate simbols linker error https://learn.microsoft.com/en-us/cpp/sanitizers/asan-building?view=msvc-170#inferasanlibsno-linker-option
      }
    }

    local __sstype = windows ; local __ssver = 5.02 ;
    if $(ConsoleExe) = yes { __sstype = console ; }
    if $(PlatformArch) = x86 { __ssver = 5.01 ; }
    else if $(PlatformArch) = arm64 { __ssver = 6.02 ; }
    _LINK_OPT += -subsystem:$(__sstype),\"$(__ssver)\" ;

    _LINK_OPT += -nodefaultlib:LIBMMT -nodefaultlib:LIBIRC -nodefaultlib:LIBC ;
    if $(_VC_CRT_TYPE) = -MT {
      _LINK_OPT += -nodefaultlib:MSVCRT
                   -nodefaultlib:MSVCPRT
                   -nodefaultlib:UCRT
                   -nodefaultlib:VCRUNTIME
      ;
      if $(Config) != dbg {
        _WIN_LIBS += libcmt.lib libcpmt.lib libucrt.lib libvcruntime.lib ;
        _LINK_OPT += -nodefaultlib:LIBCMTD -nodefaultlib:LIBCPMTD ;
      } else {
        _WIN_LIBS += libcmtd.lib libcpmtd.lib libucrtd.lib libvcruntimed.lib ;
        _LINK_OPT += -nodefaultlib:LIBCMT -nodefaultlib:LIBCPMT ;
      }
    } else {
      if $(Config) != dbg {
        _WIN_LIBS += MSVCRT.lib MSVCPRT.lib UCRT.lib VCRUNTIME.lib ;
        _LINK_OPT += -nodefaultlib:LIBCMT -nodefaultlib:LIBCPMT ;
      } else {
        _WIN_LIBS += MSVCRTd.lib MSVCPRTd.lib UCRTd.lib VCRUNTIMEd.lib ;
        _LINK_OPT += -nodefaultlib:LIBCMT -nodefaultlib:LIBCPMT ;
      }
    }

    if $(UseGDK) != no {
      CopyGDKMedia ;
      CopyGDKDlls ;
      ProcessGDKManifest ;
    }

    if $(Config) != dbg && $(CheckOnly) != yes {
      if $(PlatformArch) = x86 { _LINK_OPT += /OPT:REF,ICF ; } else { _LINK_OPT += -opt:ref ; }
    }

    if $(CheckOnly) = yes {
      _LINK_OPT += -opt:noref ;
    }

    if $(UseLinkWholeOpt) = yes {
      _LINK_OPT += /LTCG ;
    }

    if $(Profile) = yes {
      _LINK_OPT += /PROFILE ;
    }

    if $(PdbCompressOpt) != no && $(UseLLDLink) != yes {
      _LINK_OPT += /pdbcompress ;
    }

    $(Target)__LINK      = $(_LINK) $(LINKopt) ;
    $(Target)__LINK_OPT  = $(_LINK_OPT) ;

    LinkExeSetMap $(Target) : ;
    LinkExeSetBuildStamp $(Target) ;
    LinkAddManifest $(Target) : $(OutDir) ;
  }
  else if $(TargetType) = lib
  {
    $(Target)__LINK     = $(_LIB) ;
    $(Target)__LINK_OPT = -nologo $(LINKopt) ;

    if $(UseLinkWholeOpt) = yes {
      $(Target)__LINK_OPT += /LTCG ;
    }
  }
  else if $(TargetType) = dll
  {
    _LINK_OPT = -nologo -dll -subsystem:windows -base:$(BaseAddress) -incremental:no ;
    if $(PlatformArch) = x86 { _LINK_OPT += /LARGEADDRESSAWARE ; }
    if $(Config) != dbg {
      _LINK_OPT += -opt:ref ;
    }

    if $(UseLinkWholeOpt) = yes {
      _LINK_OPT += /LTCG ;
    }

    $(Target)__LINK      = $(_LINK) ;
    $(Target)__LINK_OPT  = $(_LINK_OPT) $(LINKopt) ;

    LinkDllSetMapExpLib $(Target) : $(OutDir) : ;
  }

  local _ADD_LIBS = $(1) ;

  if $(TargetType) = exe {
    _ADD_LIBS += $(_WIN_LIBS) ;
  }

  $(Target)__LINK_LIBS = $(_ADD_LIBS) ;
}


actions together quietly link_target
{
#async
  $(prelink_cmd)
  echo linking $(1:B)$(1:S)
  del $(outfile:E=$(1))
  $(DEL_)$(pdb_path)
  set_filter nul /warning LNK4099/
  call_filtered $(link) $(link_opt) #\( $(link_libs) $(resources) $(DEBUG_PDB_)$(pdb_path) -out:$(outfile:E=$(1)) $(obj_list) )\#
  if errorlevel 1 goto after_postlink
  $(postlink_cmd)
  :after_postlink
  echo ----------------------------------------------------------------------
  if errorlevel 1 goto failed
  if not exist $(outfile:E=$(1)) goto failed
  echo SUCCESSFULLY built $(1:B)$(1:S)  $(_PrintedOutput)
  goto end

  :failed
  echo FAILED to build $(1:B)$(1:S) [Error #%errorlevel%] $(_PrintedOutput)
  set ERRORLEVEL=13

  :end
  echo .
}


actions together quietly lib_target
{
#async
  echo creating lib $(1:B)$(1:S)
  del $(outfile:E=$(1))
  set_filter nul /warning LNK4221/
  call_filtered $(link) $(link_opt) $(LINK_RESPONSE_MARKER) #\( -out:$(outfile:E=$(1)) $(obj_list) $(link_libs) )\#
  echo ----------------------------------------------------------------------
  if errorlevel 1 goto failed
  if not exist $(outfile:E=$(1)) goto failed
  echo SUCCESSFULLY built $(1:B)$(1:S)  $(_PrintedOutput)
  goto end

  :failed
  echo FAILED to build $(1:B)$(1:S) [Error #%errorlevel%] $(_PrintedOutput)
  set ERRORLEVEL=13

  :end
  echo .
}
