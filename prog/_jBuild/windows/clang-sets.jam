#  Setup for Clang-CL C/C++ compiler for Windows (to be included from jBuild.jam)
_OBJ_SUFFIX  = .obj ;

_CLANG_LIB_FOLDER = $(CLangVer:B) ;
_CLANG_LIB_FOLDER = $(_CLANG_LIB_FOLDER:B) ;

if $(_CLANG_LIB_FOLDER) = 15 {
  _VC_DIR         = $(_DEVTOOL)/vc2019_16.11.34 ;
  _MSC_VER        = 19.29.30154 ;
    _CLANG_LIB_FOLDER = $(CLangVer) ;
} else if $(_CLANG_LIB_FOLDER) in 16 17 18 19 {
  _VC_DIR         = $(_DEVTOOL)/vc2022_17.9.5 ;
  _MSC_VER        = 19.39.33523 ;
} else {
    exit Unknown CLangVer $(CLangVer) ;
}
_CLANG_DIR = $(_DEVTOOL)/LLVM-$(CLangVer) ;

if ! [ GLOB $(_CLANG_DIR) : * ] { exit FATAL\: \"$(_CLANG_DIR)\" not found! ; }
if ! [ GLOB $(_VC_DIR)    : * ] { exit FATAL\: \"$(_VC_DIR)\" not found! ; }

_VC_CRT_TYPE = -MT ;
if $(PlatformArch) = x86_64 { _WIN_SDK_TARGET_SUFFIX = x64 ; }
if $(PlatformArch) = arm64 { _WIN_SDK_TARGET_SUFFIX = arm64 ; }

if $(UseGDK) != no {
  include $(Root)/prog/_jBuild/_gdk/setup.jam ;
  WinSdkVer = win.sdk.100 ;
  WinSdkUpdateVer = $(GdkWinSdk) ;
}
include $(Root)/prog/_jBuild/_vc/win_sdk.jam ;

_VC_DIR_BIN = $(_VC_DIR)/bin/Hostx64/$(_WIN_SDK_TARGET_SUFFIX) ;

if ! [ GLOB $(_DEVTOOL)/nasm : * ] { exit FATAL\: \"$(_DEVTOOL)/nasm\" not found!  Please, update DEVTOOLS ; }

local _DEF_C_CMDLINE =
  -fms-compatibility-version=$(_MSC_VER)
  -X /D_TARGET_PC=1 -D_TARGET_PC_WIN=1 /Dasm=__asm /DWIN32_LEAN_AND_MEAN= /D_USE_MATH_DEFINES
  /DNOMINMAX
  -D_TARGET_SIMD_SSE=$(SSEVersion) -D_ALLOW_KEYWORD_MACROS=
  /D_USING_V110_SDK71_
  -Di_strlen=(int)strlen
  /DDELAYIMP_INSECURE_WRITABLE_HOOKS
  /c /nologo /Zc:forScope /J /Zc:inline
  /Zc:dllexportInlines-
  -Xclang -mrecip=none
  -Wno-c++11-narrowing
  -Wno-trigraphs
  -Wno-argument-outside-range
  -Wno-nonportable-include-path
  -Wno-ignored-attributes
  -fms-extensions
  -fms-compatibility
  -fdiagnostics-absolute-paths
  -Wno-invalid-offsetof
  -Wno-multichar
  -Wno-unused-function
  -Wno-inconsistent-missing-override
  -Wno-invalid-token-paste
  -Wno-ignored-pragma-intrinsic
  -Wno-pragma-pack
  -Wno-microsoft
  -Wno-int-to-void-pointer-cast
  -Wno-expansion-to-defined
  -Wno-deprecated-declarations
  -Wno-constant-conversion
  -Wno-unused-local-typedef
  -Wno-ignored-pragmas
  -Wno-switch
  -Werror=invalid-noreturn
  -Werror=return-type
  # -Wunused-parameter -Wunused-variable
;

if $(ClangThreadSafety) = yes {
  _DEF_C_CMDLINE += -Wthread-safety ;
}

switch $(PlatformArch) {
  case x86 :    _DEF_C_CMDLINE += /DWIN32 /D__IA32__=1 -D_TARGET_CPU_IA32=1 -m32 ;
  case x86_64 : _DEF_C_CMDLINE += /DWIN64 -D_TARGET_64BIT=1 ;
  case arm64 :  _DEF_C_CMDLINE = --target=aarch64-pc-windows-msvc [ StripStrings $(_DEF_C_CMDLINE) : -D_TARGET_SIMD_SSE=$(SSEVersion) ] -D_TARGET_SIMD_NEON /DWIN64 -D_TARGET_64BIT=1 -Wno-pointer-to-int-cast ;
}
if $(Analyze) = yes { _DEF_C_CMDLINE = [ StripStrings $(_DEF_C_CMDLINE) : /D_USING_V110_SDK71_ ] --analyze -Werror ; }

if $(Sanitize) != disabled {
  _DEF_C_CMDLINE += -fsanitize=$(Sanitize) ;
  if $(PlatformArch) = x86 { _DEF_C_CMDLINE += -mllvm -asan-use-private-alias=1 ; }
}

if $(CLangVer) >= 15 { # Note: lex compare
  _DEF_C_CMDLINE += -Wno-deprecated-builtins ; # __has_trivial_constructor etc in EASTL. See also https://github.com/llvm/llvm-project/commit/0b89d1d59f82cf5b45c250cd5c3351e43ce35ef9
}

if $(VCMathOption) = -fp:fast && $(CLangVer) >= 18 { # Note: lex compare
  _DEF_C_CMDLINE += -Wno-nan-infinity-disabled ;
}

if $(PlatformArch) = arm64 {
} else if $(SSEVersion) = 4  {
  _DEF_C_CMDLINE += -msse4.1 -mpopcnt ;
} else {
  _DEF_C_CMDLINE += -msse2 ;
}

_DEF_C_CMDLINE += /Zc:wchar_t ;

if $(UseWholeOpt) = yes {
  UseLLDLink = yes ;
}

if $(Sanitize) != disabled {
  UseLLDLink = no ; # currently there is false positive for ODR violation on string literals
}

if $(UseLLDLink) != yes {
  _LINK = $(_VC_DIR_BIN)/link.exe ;
} else {
  _LINK = $(_CLANG_DIR)/bin/lld-link.exe ; #we have to allow /force:multiple, otherwise it is not linking with effects :(
}
_LIB  = $(_CLANG_DIR)/bin/lld-link.exe /lib ;
LINK_RESPONSE_MARKER = @@@ ;

_C_COMPILER = $(_CLANG_DIR)/bin/clang-cl.exe $(GDK_C_CMDLINE) $(_DEF_C_CMDLINE) ;
_CPP_COMPILER = $(_C_COMPILER) /std:c++$(CPPStd) ;
_DEP_COMPILER = $(Root)/prog/_jBuild/fastdep-g.exe --cVC80 /D_TARGET_PC=1 -D_TARGET_PC_WIN=1 ;
_CVTRES_EXE   = $(_VC_DIR_BIN)/cvtres.exe /NOLOGO ;
_RC_COMPILER    = $(_WIN_SDK_BIN)/rc.exe /x /i$(_WIN_SDK_INC) /i$(_VC_DIR)/Include ;
_MT_UTIL        = $(_WIN_SDK_BIN)/mt.exe ;

switch $(PlatformArch) {
  case x86 :
    _LINK += /machine:x86 ;
    _LIB  += /machine:x86 ;
    _ASM_COMPILER  = $(_DEVTOOL)/nasm/nasm.exe -f win32 ;
    _MASM_COMPILER = $(_VC_DIR)/bin/Hostx64/x86/ml.exe -c -nologo ;
    _DEP_COMPILER += /DWIN32 /D__IA32__=1 ;
    _CVTRES_EXE   += /MACHINE:x86 ;

  case x86_64 :
    _LINK += /machine:x64 ;
    _LIB  += /machine:x64 ;
    _ASM_COMPILER  = $(_DEVTOOL)/nasm/nasm.exe -f win64 ;
    _MASM_COMPILER = $(_VC_DIR)/bin/Hostx64/x64/ml64.exe -c -nologo ;
    _DEP_COMPILER += /DWIN64 ;
    _CVTRES_EXE   += /MACHINE:x64 ;

  case arm64 :
    _LINK += /machine:arm64 ;
    _LIB  += /machine:arm64 ;
    _ASM_COMPILER  = $(_DEVTOOL)/nasm/nasm.exe -f arm64 ;
    _MASM_COMPILER = $(_VC_DIR)/bin/Hostx64/arm64/ml64.exe -c -nologo ;
    _GAS_COMPILER = $(_CLANG_DIR)/bin/clang.exe --target=aarch64-pc-windows-msvc -g -c ;
    _DEP_COMPILER += /DWIN64 ;
    _CVTRES_EXE   += /MACHINE:arm64 ;
}

_INCLUDE = $(GDK_INCLUDES) $(_UCRT_INC) $(_WIN_SDK_INC) $(_VC_DIR)/include ;
_LIBPATH = $(GDK_LIBPATHS) $(_UCRT_LIB) $(_WIN_SDK_LIB) $(_CLANG_DIR)/lib/clang/$(_CLANG_LIB_FOLDER)/lib/windows $(_VC_DIR)/lib/$(_WIN_SDK_TARGET_SUFFIX) $(_UM_LIB) ;

# make linker cmd-line ###
for lib in $(_LIBPATH) {
  _LINK += -libpath:$(lib) ;
  _LIB += -libpath:$(lib) ;
}

# make compiler cmd-line ###
_C_BASE_INCLUDES   = -imsvc $(_CLANG_DIR)/lib/clang/$(_CLANG_LIB_FOLDER)/include -I$(MasterPreInclude) -I$(Root)/prog/dagorInclude -I$(Root)/prog/1stPartyLibs -I$(Root)/prog/3rdPartyLibs ;
_CPP_BASE_INCLUDES = $(_C_BASE_INCLUDES) -I$(Root)/prog/3rdPartyLibs/eastl/include ;

for inc in $(_INCLUDE) {
  _CPP_BASE_INCLUDES += -imsvc $(inc) ;
  _C_BASE_INCLUDES   += -imsvc $(inc) ;
  _DEP_COMPILER += --x$(inc) ;
}

_DEF_C_CMDLINE = ;
