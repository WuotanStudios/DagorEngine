#  to be included in jBuild.jam

rule ProcessLinkTarget
{
  local _IOS_LIBS = ;

  if $(TargetType) = exe
  {
    _LINK_OPT = ;
    if $(Config) = rel || $(Config) = irel { }

    if $(Config) = rel {
      _LINK_OPT = -Wl,-S -Wl,-exported_symbol,__mh_execute_header ;
      $(Target)__IMGBUILD = call strip ;
    } else {
      _LINK_OPT = ;
      $(Target)__IMGBUILD = rem ;
    }
    if $(CheckOnly) = yes { _LINK_OPT += -Wl,-S -Wl,-x -Xlinker -no_deduplicate ; }

    _LINK_OPT += -Wl,-rpath,@executable_path/Frameworks ;

    for framework in [ GLOB $(OutDir)/Frameworks : *.framework ] {
      _LINK_OPT += -Wl,-rpath,@executable_path/Frameworks/$(framework:B).framework ;
    }

    $(Target)__LINK      = $(_LINK) ;
    $(Target)__LINK_OPT  = $(_LINK_OPT) $(LINKopt) ;

    if $(IOSUploadCrashlyticsSymbols) = yes {
      postlink +=
        echo ========= uploading dSYM to firebase crashlytics =========== "
"       call chmod +x $(_DEVTOOL)/firebase-frameworks/ios-$(PlatformArch)/upload-symbols "
"       call $(_DEVTOOL)/firebase-frameworks/ios-$(PlatformArch)/upload-symbols -gsp $(GoogleInfoPlist) -p ios $(OutDir).dSYM"
"   ;
    }

    $(Target)__POSTLINK_CMD = $(postlink) ;
    LinkExeSetBuildStamp $(Target) ;
  }
  else if $(TargetType) = lib
  {
    $(Target)__LINK     = $(_LIB) ;
    $(Target)__LINK_OPT = $(LINKopt) ;
    #if $(Config) = rel || $(Config) = irel { }
  }
  else if $(TargetType) = dll
  {
    _LINK_OPT = -dynamiclib ;

    $(Target)__IMGBUILD = rem ;
 
    if $(Config) = rel {
      _LINK_OPT += -Wl,-S ;

      StripLibrary ?= yes ;
      if $(StripLibrary) = yes {
        $(Target)__IMGBUILD = call strip -x ;
      }
    }

    if $(BuildDagorEngineIndependentCode) != yes {
      local ExportSymbols =
        _dagor_ios_main_init
        _dagor_ios_delegate_init
        _dagor_ios_delegate_main
        _dagor_ios_delegate_createDisplayLink
        _dagor_ios_delegate_step
        _dagor_ios_delegate_applicationWillFinishLaunching
        _dagor_ios_delegate_applicationDidFinishLaunching
        _dagor_ios_delegate_applicationWillTerminate
        _dagor_ios_delegate_applicationWillResignActive
        _dagor_ios_delegate_applicationDidBecomeActive
        _dagor_ios_delegate_applicationDidReceiveMemoryWarning
        _dagor_ios_delegate_openURL
        _dagor_ios_delegate_didRegisterForRemoteNotificationsWithDeviceToken
        _dagor_ios_delegate_didFailToRegisterForRemoteNotificationsWithError
        _dagor_ios_delegate_didReceiveRemoteNotification
        _dagor_ios_delegate_didFinishLaunchingWithOptions
        _dagor_ios_delegate_dealloc
      ;
      for symbol in $(ExportSymbols) {
        _LINK_OPT += -Wl,-exported_symbol,$(symbol) ;
      }
    }
  
    if $(CheckOnly) = yes { _LINK_OPT += -Wl,-S -Wl,-x ; }

    $(Target)__LINK     = $(_LINK) ;
    $(Target)__LINK_OPT = $(_LINK_OPT) $(LINKopt) ;

    if $(IOSUploadCrashlyticsSymbols) = yes {
      postlink +=
        echo ========= uploading dSYM to firebase crashlytics =========== "
"       call chmod +x $(_DEVTOOL)/firebase-frameworks/ios-$(PlatformArch)/upload-symbols "
"       call $(_DEVTOOL)/firebase-frameworks/ios-$(PlatformArch)/upload-symbols -gsp $(GoogleInfoPlist) -p ios $(OutDir).dSYM"
"   ;
    }

    $(Target)__POSTLINK_CMD = $(postlink) ;
    LinkExeSetBuildStamp $(Target) ;
  }

  local _ADD_LIBS = $(1) ;

  if $(TargetType) = exe {
    _ADD_LIBS +=  -l$(_IOS_LIBS) ;
  }
  $(Target)__LINK_LIBS = $(_ADD_LIBS) ;
}


actions together quietly link_target
{
#sync
  $(prelink_cmd)
  echo linking $(1:B)$(1:S)
  del $(1)
  set MACOSX_DEPLOYMENT_TARGET=$(MacOSXVer)
  set IPHONEOS_DEPLOYMENT_TARGET=$(iOSVer)
  call $(link) $(link_opt) $(link_libs) $(obj_list) -o $(1) 
  if errorlevel 1 goto failed
  call /usr/bin/dsymutil $(1) -o $(1:D).dSYM
  if errorlevel 1 goto failed
  $(imgbuild) $(1)
  if errorlevel 1 goto failed
  $(postlink_cmd)
  if errorlevel 1 goto failed
  echo ----------------------------------------------------------------------
  if errorlevel 1 goto failed
  if not exist $(1) goto failed
  echo SUCCESSFULLY built $(1:B)$(1:S)  $(_PrintedOutput)
  goto end

  :failed
  echo FAILED to build $(1:B)$(1:S) [Error #%errorlevel%] $(_PrintedOutput)
  set ERRORLEVEL=13

  :end
  echo .
}


actions together quietly lib_target
{
#async
  echo creating lib $(1:B)$(1:S)
  del $(1)
  call $(link[1]) -static -no_warning_for_no_symbols -c -o $(1) - $(obj_list) $(link_libs)
  echo ----------------------------------------------------------------------
  if errorlevel 1 goto failed
  if not exist $(1) goto failed
  echo SUCCESSFULLY built $(1:B)$(1:S)  $(_PrintedOutput)
  goto end

  :failed
  echo FAILED to build $(1:B)$(1:S) [Error #%errorlevel%] $(_PrintedOutput)
  set ERRORLEVEL=13

  :end
  echo .
}
